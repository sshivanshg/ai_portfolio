"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ai";
exports.ids = ["vendor-chunks/ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/ai/node_modules/nanoid/non-secure/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ai/node_modules/nanoid/non-secure/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   nanoid: () => (/* binding */ nanoid)\n/* harmony export */ });\nlet urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvbmFub2lkL25vbi1zZWN1cmUvaW5kZXguanM/YWU4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUgPSAyMSkgPT4ge1xuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgbGV0IGkgPSBzaXplXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWQgKz0gYWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGgpIHwgMF1cbiAgICB9XG4gICAgcmV0dXJuIGlkXG4gIH1cbn1cbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9ICcnXG4gIGxldCBpID0gc2l6ZVxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiA2NCkgfCAwXVxuICB9XG4gIHJldHVybiBpZFxufVxuZXhwb3J0IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ai/react/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/ai/react/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   experimental_useAssistant: () => (/* binding */ experimental_useAssistant),\n/* harmony export */   useAssistant: () => (/* binding */ useAssistant),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useCompletion: () => (/* binding */ useCompletion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/core/dist/index.mjs\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! nanoid/non-secure */ \"(ssr)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ experimental_useAssistant,useAssistant,useChat,useCompletion auto */ // react/use-chat.ts\n\n\n// shared/generate-id.ts\n\nvar generateId = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_2__.customAlphabet)(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 7);\n// shared/stream-parts.ts\nvar textStreamPart = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar functionCallStreamPart = {\n    code: \"1\",\n    name: \"function_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"function_call\" in value) || typeof value.function_call !== \"object\" || value.function_call == null || !(\"name\" in value.function_call) || !(\"arguments\" in value.function_call) || typeof value.function_call.name !== \"string\" || typeof value.function_call.arguments !== \"string\") {\n            throw new Error('\"function_call\" parts expect an object with a \"function_call\" property.');\n        }\n        return {\n            type: \"function_call\",\n            value\n        };\n    }\n};\nvar dataStreamPart = {\n    code: \"2\",\n    name: \"data\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"data\" parts expect an array value.');\n        }\n        return {\n            type: \"data\",\n            value\n        };\n    }\n};\nvar errorStreamPart = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar assistantMessageStreamPart = {\n    code: \"4\",\n    name: \"assistant_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every((item)=>item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\")) {\n            throw new Error('\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.');\n        }\n        return {\n            type: \"assistant_message\",\n            value\n        };\n    }\n};\nvar assistantControlDataStreamPart = {\n    code: \"5\",\n    name: \"assistant_control_data\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n            throw new Error('\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.');\n        }\n        return {\n            type: \"assistant_control_data\",\n            value: {\n                threadId: value.threadId,\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar dataMessageStreamPart = {\n    code: \"6\",\n    name: \"data_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n            throw new Error('\"data_message\" parts expect an object with a \"role\" and \"data\" property.');\n        }\n        return {\n            type: \"data_message\",\n            value\n        };\n    }\n};\nvar toolCallsStreamPart = {\n    code: \"7\",\n    name: \"tool_calls\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"tool_calls\" in value) || typeof value.tool_calls !== \"object\" || value.tool_calls == null || !Array.isArray(value.tool_calls) || value.tool_calls.some((tc)=>tc == null || typeof tc !== \"object\" || !(\"id\" in tc) || typeof tc.id !== \"string\" || !(\"type\" in tc) || typeof tc.type !== \"string\" || !(\"function\" in tc) || tc.function == null || typeof tc.function !== \"object\" || !(\"arguments\" in tc.function) || typeof tc.function.name !== \"string\" || typeof tc.function.arguments !== \"string\")) {\n            throw new Error('\"tool_calls\" parts expect an object with a ToolCallPayload.');\n        }\n        return {\n            type: \"tool_calls\",\n            value\n        };\n    }\n};\nvar messageAnnotationsStreamPart = {\n    code: \"8\",\n    name: \"message_annotations\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"message_annotations\" parts expect an array value.');\n        }\n        return {\n            type: \"message_annotations\",\n            value\n        };\n    }\n};\nvar toolCallStreamPart = {\n    code: \"9\",\n    name: \"tool_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\" || !(\"args\" in value) || typeof value.args !== \"object\") {\n            throw new Error('\"tool_call\" parts expect an object with a \"toolCallId\", \"toolName\", and \"args\" property.');\n        }\n        return {\n            type: \"tool_call\",\n            value\n        };\n    }\n};\nvar toolResultStreamPart = {\n    code: \"a\",\n    name: \"tool_result\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\" || !(\"args\" in value) || typeof value.args !== \"object\" || !(\"result\" in value)) {\n            throw new Error('\"tool_result\" parts expect an object with a \"toolCallId\", \"toolName\", \"args\", and \"result\" property.');\n        }\n        return {\n            type: \"tool_result\",\n            value\n        };\n    }\n};\nvar streamParts = [\n    textStreamPart,\n    functionCallStreamPart,\n    dataStreamPart,\n    errorStreamPart,\n    assistantMessageStreamPart,\n    assistantControlDataStreamPart,\n    dataMessageStreamPart,\n    toolCallsStreamPart,\n    messageAnnotationsStreamPart,\n    toolCallStreamPart,\n    toolResultStreamPart\n];\nvar streamPartsByCode = {\n    [textStreamPart.code]: textStreamPart,\n    [functionCallStreamPart.code]: functionCallStreamPart,\n    [dataStreamPart.code]: dataStreamPart,\n    [errorStreamPart.code]: errorStreamPart,\n    [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n    [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n    [dataMessageStreamPart.code]: dataMessageStreamPart,\n    [toolCallsStreamPart.code]: toolCallsStreamPart,\n    [messageAnnotationsStreamPart.code]: messageAnnotationsStreamPart,\n    [toolCallStreamPart.code]: toolCallStreamPart,\n    [toolResultStreamPart.code]: toolResultStreamPart\n};\nvar StreamStringPrefixes = {\n    [textStreamPart.name]: textStreamPart.code,\n    [functionCallStreamPart.name]: functionCallStreamPart.code,\n    [dataStreamPart.name]: dataStreamPart.code,\n    [errorStreamPart.name]: errorStreamPart.code,\n    [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n    [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n    [dataMessageStreamPart.name]: dataMessageStreamPart.code,\n    [toolCallsStreamPart.name]: toolCallsStreamPart.code,\n    [messageAnnotationsStreamPart.name]: messageAnnotationsStreamPart.code,\n    [toolCallStreamPart.name]: toolCallStreamPart.code,\n    [toolResultStreamPart.name]: toolResultStreamPart.code\n};\nvar validCodes = streamParts.map((part)=>part.code);\nvar parseStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return streamPartsByCode[code].parse(jsonValue);\n};\n// shared/read-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n    const concatenatedChunks = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const chunk of chunks){\n        concatenatedChunks.set(chunk, offset);\n        offset += chunk.length;\n    }\n    chunks.length = 0;\n    return concatenatedChunks;\n}\nasync function* readDataStream(reader, { isAborted } = {}) {\n    const decoder = new TextDecoder();\n    const chunks = [];\n    let totalLength = 0;\n    while(true){\n        const { value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            totalLength += value.length;\n            if (value[value.length - 1] !== NEWLINE) {\n                continue;\n            }\n        }\n        if (chunks.length === 0) {\n            break;\n        }\n        const concatenatedChunks = concatChunks(chunks, totalLength);\n        totalLength = 0;\n        const streamParts2 = decoder.decode(concatenatedChunks, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\").map(parseStreamPart);\n        for (const streamPart of streamParts2){\n            yield streamPart;\n        }\n        if (isAborted == null ? void 0 : isAborted()) {\n            reader.cancel();\n            break;\n        }\n    }\n}\n// shared/parse-complex-response.ts\nfunction assignAnnotationsToMessage(message, annotations) {\n    if (!message || !annotations || !annotations.length) return message;\n    return {\n        ...message,\n        annotations: [\n            ...annotations\n        ]\n    };\n}\nasync function parseComplexResponse({ reader, abortControllerRef, update, onToolCall, onFinish, generateId: generateId2 = generateId, getCurrentDate = ()=>/* @__PURE__ */ new Date() }) {\n    const createdAt = getCurrentDate();\n    const prefixMap = {\n        data: []\n    };\n    let message_annotations = void 0;\n    for await (const { type, value } of readDataStream(reader, {\n        isAborted: ()=>(abortControllerRef == null ? void 0 : abortControllerRef.current) === null\n    })){\n        if (type === \"text\") {\n            if (prefixMap[\"text\"]) {\n                prefixMap[\"text\"] = {\n                    ...prefixMap[\"text\"],\n                    content: (prefixMap[\"text\"].content || \"\") + value\n                };\n            } else {\n                prefixMap[\"text\"] = {\n                    id: generateId2(),\n                    role: \"assistant\",\n                    content: value,\n                    createdAt\n                };\n            }\n        }\n        if (type === \"tool_call\") {\n            if (prefixMap.text == null) {\n                prefixMap.text = {\n                    id: generateId2(),\n                    role: \"assistant\",\n                    content: \"\",\n                    createdAt\n                };\n            }\n            if (prefixMap.text.toolInvocations == null) {\n                prefixMap.text.toolInvocations = [];\n            }\n            prefixMap.text.toolInvocations.push(value);\n            if (onToolCall) {\n                const result = await onToolCall({\n                    toolCall: value\n                });\n                if (result != null) {\n                    prefixMap.text.toolInvocations[prefixMap.text.toolInvocations.length - 1] = {\n                        ...value,\n                        result\n                    };\n                }\n            }\n        } else if (type === \"tool_result\") {\n            if (prefixMap.text == null) {\n                prefixMap.text = {\n                    id: generateId2(),\n                    role: \"assistant\",\n                    content: \"\",\n                    createdAt\n                };\n            }\n            if (prefixMap.text.toolInvocations == null) {\n                prefixMap.text.toolInvocations = [];\n            }\n            const toolInvocationIndex = prefixMap.text.toolInvocations.findIndex((invocation)=>invocation.toolCallId === value.toolCallId);\n            if (toolInvocationIndex !== -1) {\n                prefixMap.text.toolInvocations[toolInvocationIndex] = value;\n            } else {\n                prefixMap.text.toolInvocations.push(value);\n            }\n        }\n        let functionCallMessage = null;\n        if (type === \"function_call\") {\n            prefixMap[\"function_call\"] = {\n                id: generateId2(),\n                role: \"assistant\",\n                content: \"\",\n                function_call: value.function_call,\n                name: value.function_call.name,\n                createdAt\n            };\n            functionCallMessage = prefixMap[\"function_call\"];\n        }\n        let toolCallMessage = null;\n        if (type === \"tool_calls\") {\n            prefixMap[\"tool_calls\"] = {\n                id: generateId2(),\n                role: \"assistant\",\n                content: \"\",\n                tool_calls: value.tool_calls,\n                createdAt\n            };\n            toolCallMessage = prefixMap[\"tool_calls\"];\n        }\n        if (type === \"data\") {\n            prefixMap[\"data\"].push(...value);\n        }\n        let responseMessage = prefixMap[\"text\"];\n        if (type === \"message_annotations\") {\n            if (!message_annotations) {\n                message_annotations = [\n                    ...value\n                ];\n            } else {\n                message_annotations.push(...value);\n            }\n            functionCallMessage = assignAnnotationsToMessage(prefixMap[\"function_call\"], message_annotations);\n            toolCallMessage = assignAnnotationsToMessage(prefixMap[\"tool_calls\"], message_annotations);\n            responseMessage = assignAnnotationsToMessage(prefixMap[\"text\"], message_annotations);\n        }\n        if (message_annotations == null ? void 0 : message_annotations.length) {\n            const messagePrefixKeys = [\n                \"text\",\n                \"function_call\",\n                \"tool_calls\"\n            ];\n            messagePrefixKeys.forEach((key)=>{\n                if (prefixMap[key]) {\n                    prefixMap[key].annotations = [\n                        ...message_annotations\n                    ];\n                }\n            });\n        }\n        const merged = [\n            functionCallMessage,\n            toolCallMessage,\n            responseMessage\n        ].filter(Boolean).map((message)=>({\n                ...assignAnnotationsToMessage(message, message_annotations)\n            }));\n        update(merged, [\n            ...prefixMap[\"data\"]\n        ]);\n    }\n    onFinish == null ? void 0 : onFinish(prefixMap);\n    return {\n        messages: [\n            prefixMap.text,\n            prefixMap.function_call,\n            prefixMap.tool_calls\n        ].filter(Boolean),\n        data: prefixMap.data\n    };\n}\n// shared/utils.ts\nfunction createChunkDecoder(complex) {\n    const decoder = new TextDecoder();\n    if (!complex) {\n        return function(chunk) {\n            if (!chunk) return \"\";\n            return decoder.decode(chunk, {\n                stream: true\n            });\n        };\n    }\n    return function(chunk) {\n        const decoded = decoder.decode(chunk, {\n            stream: true\n        }).split(\"\\n\").filter((line)=>line !== \"\");\n        return decoded.map(parseStreamPart).filter(Boolean);\n    };\n}\n// shared/call-chat-api.ts\nasync function callChatApi({ api, messages, body, streamMode = \"stream-data\", credentials, headers, abortController, restoreMessagesOnFailure, onResponse, onUpdate, onFinish, onToolCall, generateId: generateId2 }) {\n    var _a;\n    const response = await fetch(api, {\n        method: \"POST\",\n        body: JSON.stringify({\n            messages,\n            ...body\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...headers\n        },\n        signal: (_a = abortController == null ? void 0 : abortController()) == null ? void 0 : _a.signal,\n        credentials\n    }).catch((err)=>{\n        restoreMessagesOnFailure();\n        throw err;\n    });\n    if (onResponse) {\n        try {\n            await onResponse(response);\n        } catch (err) {\n            throw err;\n        }\n    }\n    if (!response.ok) {\n        restoreMessagesOnFailure();\n        throw new Error(await response.text() || \"Failed to fetch the chat response.\");\n    }\n    if (!response.body) {\n        throw new Error(\"The response body is empty.\");\n    }\n    const reader = response.body.getReader();\n    switch(streamMode){\n        case \"text\":\n            {\n                const decoder = createChunkDecoder();\n                const resultMessage = {\n                    id: generateId2(),\n                    createdAt: /* @__PURE__ */ new Date(),\n                    role: \"assistant\",\n                    content: \"\"\n                };\n                while(true){\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    resultMessage.content += decoder(value);\n                    resultMessage.id = generateId2();\n                    onUpdate([\n                        {\n                            ...resultMessage\n                        }\n                    ], []);\n                    if ((abortController == null ? void 0 : abortController()) === null) {\n                        reader.cancel();\n                        break;\n                    }\n                }\n                onFinish == null ? void 0 : onFinish(resultMessage);\n                return {\n                    messages: [\n                        resultMessage\n                    ],\n                    data: []\n                };\n            }\n        case \"stream-data\":\n            {\n                return await parseComplexResponse({\n                    reader,\n                    abortControllerRef: abortController != null ? {\n                        current: abortController()\n                    } : void 0,\n                    update: onUpdate,\n                    onToolCall,\n                    onFinish (prefixMap) {\n                        if (onFinish && prefixMap.text != null) {\n                            onFinish(prefixMap.text);\n                        }\n                    },\n                    generateId: generateId2\n                });\n            }\n        default:\n            {\n                const exhaustiveCheck = streamMode;\n                throw new Error(`Unknown stream mode: ${exhaustiveCheck}`);\n            }\n    }\n}\n// shared/process-chat-stream.ts\nasync function processChatStream({ getStreamedResponse: getStreamedResponse2, experimental_onFunctionCall, experimental_onToolCall, updateChatRequest, getCurrentMessages }) {\n    while(true){\n        const messagesAndDataOrJustMessage = await getStreamedResponse2();\n        if (\"messages\" in messagesAndDataOrJustMessage) {\n            let hasFollowingResponse = false;\n            for (const message of messagesAndDataOrJustMessage.messages){\n                if ((message.function_call === void 0 || typeof message.function_call === \"string\") && (message.tool_calls === void 0 || typeof message.tool_calls === \"string\")) {\n                    continue;\n                }\n                hasFollowingResponse = true;\n                if (experimental_onFunctionCall) {\n                    const functionCall = message.function_call;\n                    if (typeof functionCall !== \"object\") {\n                        console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                        continue;\n                    }\n                    const functionCallResponse = await experimental_onFunctionCall(getCurrentMessages(), functionCall);\n                    if (functionCallResponse === void 0) {\n                        hasFollowingResponse = false;\n                        break;\n                    }\n                    updateChatRequest(functionCallResponse);\n                }\n                if (experimental_onToolCall) {\n                    const toolCalls = message.tool_calls;\n                    if (!Array.isArray(toolCalls) || toolCalls.some((toolCall)=>typeof toolCall !== \"object\")) {\n                        console.warn(\"experimental_onToolCall should not be defined when using tools\");\n                        continue;\n                    }\n                    const toolCallResponse = await experimental_onToolCall(getCurrentMessages(), toolCalls);\n                    if (toolCallResponse === void 0) {\n                        hasFollowingResponse = false;\n                        break;\n                    }\n                    updateChatRequest(toolCallResponse);\n                }\n            }\n            if (!hasFollowingResponse) {\n                break;\n            }\n        } else {\n            let fixFunctionCallArguments2 = function(response) {\n                for (const message of response.messages){\n                    if (message.tool_calls !== void 0) {\n                        for (const toolCall of message.tool_calls){\n                            if (typeof toolCall === \"object\") {\n                                if (toolCall.function.arguments && typeof toolCall.function.arguments !== \"string\") {\n                                    toolCall.function.arguments = JSON.stringify(toolCall.function.arguments);\n                                }\n                            }\n                        }\n                    }\n                    if (message.function_call !== void 0) {\n                        if (typeof message.function_call === \"object\") {\n                            if (message.function_call.arguments && typeof message.function_call.arguments !== \"string\") {\n                                message.function_call.arguments = JSON.stringify(message.function_call.arguments);\n                            }\n                        }\n                    }\n                }\n            };\n            var fixFunctionCallArguments = fixFunctionCallArguments2;\n            const streamedResponseMessage = messagesAndDataOrJustMessage;\n            if ((streamedResponseMessage.function_call === void 0 || typeof streamedResponseMessage.function_call === \"string\") && (streamedResponseMessage.tool_calls === void 0 || typeof streamedResponseMessage.tool_calls === \"string\")) {\n                break;\n            }\n            if (experimental_onFunctionCall) {\n                const functionCall = streamedResponseMessage.function_call;\n                if (!(typeof functionCall === \"object\")) {\n                    console.warn(\"experimental_onFunctionCall should not be defined when using tools\");\n                    continue;\n                }\n                const functionCallResponse = await experimental_onFunctionCall(getCurrentMessages(), functionCall);\n                if (functionCallResponse === void 0) break;\n                fixFunctionCallArguments2(functionCallResponse);\n                updateChatRequest(functionCallResponse);\n            }\n            if (experimental_onToolCall) {\n                const toolCalls = streamedResponseMessage.tool_calls;\n                if (!(typeof toolCalls === \"object\")) {\n                    console.warn(\"experimental_onToolCall should not be defined when using functions\");\n                    continue;\n                }\n                const toolCallResponse = await experimental_onToolCall(getCurrentMessages(), toolCalls);\n                if (toolCallResponse === void 0) break;\n                fixFunctionCallArguments2(toolCallResponse);\n                updateChatRequest(toolCallResponse);\n            }\n        }\n    }\n}\n// react/use-chat.ts\nvar getStreamedResponse = async (api, chatRequest, mutate, mutateStreamData, existingData, extraMetadataRef, messagesRef, abortControllerRef, generateId2, streamMode, onFinish, onResponse, onToolCall, sendExtraMessageFields)=>{\n    var _a, _b;\n    const previousMessages = messagesRef.current;\n    mutate(chatRequest.messages, false);\n    const constructedMessagesPayload = sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(({ role, content, name, data, annotations, toolInvocations, function_call, tool_calls, tool_call_id })=>({\n            role,\n            content,\n            ...name !== void 0 && {\n                name\n            },\n            ...data !== void 0 && {\n                data\n            },\n            ...annotations !== void 0 && {\n                annotations\n            },\n            ...toolInvocations !== void 0 && {\n                toolInvocations\n            },\n            // outdated function/tool call handling (TODO deprecate):\n            tool_call_id,\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tool_calls !== void 0 && {\n                tool_calls\n            }\n        }));\n    if (typeof api !== \"string\") {\n        const replyId = generateId2();\n        const createdAt = /* @__PURE__ */ new Date();\n        let responseMessage = {\n            id: replyId,\n            createdAt,\n            content: \"\",\n            role: \"assistant\"\n        };\n        async function readRow(promise) {\n            const { content, ui, next } = await promise;\n            responseMessage[\"content\"] = content;\n            responseMessage[\"ui\"] = await ui;\n            mutate([\n                ...chatRequest.messages,\n                {\n                    ...responseMessage\n                }\n            ], false);\n            if (next) {\n                await readRow(next);\n            }\n        }\n        try {\n            const promise = api({\n                messages: constructedMessagesPayload,\n                data: chatRequest.data\n            });\n            await readRow(promise);\n        } catch (e) {\n            mutate(previousMessages, false);\n            throw e;\n        }\n        if (onFinish) {\n            onFinish(responseMessage);\n        }\n        return responseMessage;\n    }\n    return await callChatApi({\n        api,\n        messages: constructedMessagesPayload,\n        body: {\n            data: chatRequest.data,\n            ...extraMetadataRef.current.body,\n            ...(_a = chatRequest.options) == null ? void 0 : _a.body,\n            ...chatRequest.functions !== void 0 && {\n                functions: chatRequest.functions\n            },\n            ...chatRequest.function_call !== void 0 && {\n                function_call: chatRequest.function_call\n            },\n            ...chatRequest.tools !== void 0 && {\n                tools: chatRequest.tools\n            },\n            ...chatRequest.tool_choice !== void 0 && {\n                tool_choice: chatRequest.tool_choice\n            }\n        },\n        streamMode,\n        credentials: extraMetadataRef.current.credentials,\n        headers: {\n            ...extraMetadataRef.current.headers,\n            ...(_b = chatRequest.options) == null ? void 0 : _b.headers\n        },\n        abortController: ()=>abortControllerRef.current,\n        restoreMessagesOnFailure () {\n            mutate(previousMessages, false);\n        },\n        onResponse,\n        onUpdate (merged, data) {\n            mutate([\n                ...chatRequest.messages,\n                ...merged\n            ], false);\n            mutateStreamData([\n                ...existingData || [],\n                ...data || []\n            ], false);\n        },\n        onToolCall,\n        onFinish,\n        generateId: generateId2\n    });\n};\nfunction useChat({ api = \"/api/chat\", id, initialMessages, initialInput = \"\", sendExtraMessageFields, experimental_onFunctionCall, experimental_onToolCall, onToolCall, experimental_maxAutomaticRoundtrips = 0, maxAutomaticRoundtrips = experimental_maxAutomaticRoundtrips, maxToolRoundtrips = maxAutomaticRoundtrips, streamMode, onResponse, onFinish, onError, credentials, headers, body, generateId: generateId2 = generateId } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const idKey = id != null ? id : hookId;\n    const chatKey = typeof api === \"string\" ? [\n        api,\n        idKey\n    ] : idKey;\n    const [initialMessagesFallback] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const { data: messages, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"messages\"\n    ], null, {\n        fallbackData: initialMessages != null ? initialMessages : initialMessagesFallback\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"streamData\"\n    ], null);\n    const { data: error = void 0, mutate: setError } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        chatKey,\n        \"error\"\n    ], null);\n    const messagesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(messages || []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        messagesRef.current = messages || [];\n    }, [\n        messages\n    ]);\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (chatRequest)=>{\n        try {\n            mutateLoading(true);\n            setError(void 0);\n            const abortController = new AbortController();\n            abortControllerRef.current = abortController;\n            await processChatStream({\n                getStreamedResponse: ()=>getStreamedResponse(api, chatRequest, mutate, mutateStreamData, streamData, extraMetadataRef, messagesRef, abortControllerRef, generateId2, streamMode, onFinish, onResponse, onToolCall, sendExtraMessageFields),\n                experimental_onFunctionCall,\n                experimental_onToolCall,\n                updateChatRequest: (chatRequestParam)=>{\n                    chatRequest = chatRequestParam;\n                },\n                getCurrentMessages: ()=>messagesRef.current\n            });\n            abortControllerRef.current = null;\n        } catch (err) {\n            if (err.name === \"AbortError\") {\n                abortControllerRef.current = null;\n                return null;\n            }\n            if (onError && err instanceof Error) {\n                onError(err);\n            }\n            setError(err);\n        } finally{\n            mutateLoading(false);\n        }\n        const messages2 = messagesRef.current;\n        const lastMessage = messages2[messages2.length - 1];\n        if (// ensure there is a last message:\n        lastMessage != null && // check if the feature is enabled:\n        maxToolRoundtrips > 0 && // check that roundtrip is possible:\n        isAssistantMessageWithCompletedToolCalls(lastMessage) && // limit the number of automatic roundtrips:\n        countTrailingAssistantMessages(messages2) <= maxToolRoundtrips) {\n            await triggerRequest({\n                messages: messages2\n            });\n        }\n    }, [\n        mutate,\n        mutateLoading,\n        api,\n        extraMetadataRef,\n        onResponse,\n        onFinish,\n        onError,\n        setError,\n        mutateStreamData,\n        streamData,\n        streamMode,\n        sendExtraMessageFields,\n        experimental_onFunctionCall,\n        experimental_onToolCall,\n        onToolCall,\n        maxToolRoundtrips,\n        messagesRef,\n        abortControllerRef,\n        generateId2\n    ]);\n    const append = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (message, { options, functions, function_call, tools, tool_choice, data } = {})=>{\n        if (!message.id) {\n            message.id = generateId2();\n        }\n        const chatRequest = {\n            messages: messagesRef.current.concat(message),\n            options,\n            data,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tools !== void 0 && {\n                tools\n            },\n            ...tool_choice !== void 0 && {\n                tool_choice\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest,\n        generateId2\n    ]);\n    const reload = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ options, functions, function_call, tools, tool_choice } = {})=>{\n        if (messagesRef.current.length === 0) return null;\n        const lastMessage = messagesRef.current[messagesRef.current.length - 1];\n        if (lastMessage.role === \"assistant\") {\n            const chatRequest2 = {\n                messages: messagesRef.current.slice(0, -1),\n                options,\n                ...functions !== void 0 && {\n                    functions\n                },\n                ...function_call !== void 0 && {\n                    function_call\n                },\n                ...tools !== void 0 && {\n                    tools\n                },\n                ...tool_choice !== void 0 && {\n                    tool_choice\n                }\n            };\n            return triggerRequest(chatRequest2);\n        }\n        const chatRequest = {\n            messages: messagesRef.current,\n            options,\n            ...functions !== void 0 && {\n                functions\n            },\n            ...function_call !== void 0 && {\n                function_call\n            },\n            ...tools !== void 0 && {\n                tools\n            },\n            ...tool_choice !== void 0 && {\n                tool_choice\n            }\n        };\n        return triggerRequest(chatRequest);\n    }, [\n        triggerRequest\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n    }, []);\n    const setMessages = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messages2)=>{\n        mutate(messages2, false);\n        messagesRef.current = messages2;\n    }, [\n        mutate\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e, options = {}, metadata)=>{\n        if (metadata) {\n            extraMetadataRef.current = {\n                ...extraMetadataRef.current,\n                ...metadata\n            };\n        }\n        e.preventDefault();\n        if (!input) return;\n        append({\n            content: input,\n            role: \"user\",\n            createdAt: /* @__PURE__ */ new Date()\n        }, options);\n        setInput(\"\");\n    }, [\n        input,\n        append\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    const addToolResult = ({ toolCallId, result })=>{\n        const updatedMessages = messagesRef.current.map((message, index, arr)=>// update the tool calls in the last assistant message:\n            index === arr.length - 1 && message.role === \"assistant\" && message.toolInvocations ? {\n                ...message,\n                toolInvocations: message.toolInvocations.map((toolInvocation)=>toolInvocation.toolCallId === toolCallId ? {\n                        ...toolInvocation,\n                        result\n                    } : toolInvocation)\n            } : message);\n        mutate(updatedMessages, false);\n        const lastMessage = updatedMessages[updatedMessages.length - 1];\n        if (isAssistantMessageWithCompletedToolCalls(lastMessage)) {\n            triggerRequest({\n                messages: updatedMessages\n            });\n        }\n    };\n    return {\n        messages: messages || [],\n        error,\n        append,\n        reload,\n        stop,\n        setMessages,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData,\n        addToolResult,\n        experimental_addToolResult: addToolResult\n    };\n}\nfunction isAssistantMessageWithCompletedToolCalls(message) {\n    return message.role === \"assistant\" && message.toolInvocations && message.toolInvocations.length > 0 && message.toolInvocations.every((toolInvocation)=>\"result\" in toolInvocation);\n}\nfunction countTrailingAssistantMessages(messages) {\n    let count = 0;\n    for(let i = messages.length - 1; i >= 0; i--){\n        if (messages[i].role === \"assistant\") {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n// react/use-completion.ts\n\n\n// shared/call-completion-api.ts\nasync function callCompletionApi({ api, prompt, credentials, headers, body, streamMode = \"stream-data\", setCompletion, setLoading, setError, setAbortController, onResponse, onFinish, onError, onData }) {\n    try {\n        setLoading(true);\n        setError(void 0);\n        const abortController = new AbortController();\n        setAbortController(abortController);\n        setCompletion(\"\");\n        const res = await fetch(api, {\n            method: \"POST\",\n            body: JSON.stringify({\n                prompt,\n                ...body\n            }),\n            credentials,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers\n            },\n            signal: abortController.signal\n        }).catch((err)=>{\n            throw err;\n        });\n        if (onResponse) {\n            try {\n                await onResponse(res);\n            } catch (err) {\n                throw err;\n            }\n        }\n        if (!res.ok) {\n            throw new Error(await res.text() || \"Failed to fetch the chat response.\");\n        }\n        if (!res.body) {\n            throw new Error(\"The response body is empty.\");\n        }\n        let result = \"\";\n        const reader = res.body.getReader();\n        switch(streamMode){\n            case \"text\":\n                {\n                    const decoder = createChunkDecoder();\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) {\n                            break;\n                        }\n                        result += decoder(value);\n                        setCompletion(result);\n                        if (abortController === null) {\n                            reader.cancel();\n                            break;\n                        }\n                    }\n                    break;\n                }\n            case \"stream-data\":\n                {\n                    for await (const { type, value } of readDataStream(reader, {\n                        isAborted: ()=>abortController === null\n                    })){\n                        switch(type){\n                            case \"text\":\n                                {\n                                    result += value;\n                                    setCompletion(result);\n                                    break;\n                                }\n                            case \"data\":\n                                {\n                                    onData == null ? void 0 : onData(value);\n                                    break;\n                                }\n                        }\n                    }\n                    break;\n                }\n            default:\n                {\n                    const exhaustiveCheck = streamMode;\n                    throw new Error(`Unknown stream mode: ${exhaustiveCheck}`);\n                }\n        }\n        if (onFinish) {\n            onFinish(prompt, result);\n        }\n        setAbortController(null);\n        return result;\n    } catch (err) {\n        if (err.name === \"AbortError\") {\n            setAbortController(null);\n            return null;\n        }\n        if (err instanceof Error) {\n            if (onError) {\n                onError(err);\n            }\n        }\n        setError(err);\n    } finally{\n        setLoading(false);\n    }\n}\n// react/use-completion.ts\nfunction useCompletion({ api = \"/api/completion\", id, initialCompletion = \"\", initialInput = \"\", credentials, headers, body, streamMode, onResponse, onFinish, onError } = {}) {\n    const hookId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const completionId = id || hookId;\n    const { data, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        api,\n        completionId\n    ], null, {\n        fallbackData: initialCompletion\n    });\n    const { data: isLoading = false, mutate: mutateLoading } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"loading\"\n    ], null);\n    const { data: streamData, mutate: mutateStreamData } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])([\n        completionId,\n        \"streamData\"\n    ], null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const completion = data;\n    const [abortController, setAbortController] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const extraMetadataRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        credentials,\n        headers,\n        body\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        extraMetadataRef.current = {\n            credentials,\n            headers,\n            body\n        };\n    }, [\n        credentials,\n        headers,\n        body\n    ]);\n    const triggerRequest = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>callCompletionApi({\n            api,\n            prompt,\n            credentials: extraMetadataRef.current.credentials,\n            headers: {\n                ...extraMetadataRef.current.headers,\n                ...options == null ? void 0 : options.headers\n            },\n            body: {\n                ...extraMetadataRef.current.body,\n                ...options == null ? void 0 : options.body\n            },\n            streamMode,\n            setCompletion: (completion2)=>mutate(completion2, false),\n            setLoading: mutateLoading,\n            setError,\n            setAbortController,\n            onResponse,\n            onFinish,\n            onError,\n            onData: (data2)=>{\n                mutateStreamData([\n                    ...streamData || [],\n                    ...data2 || []\n                ], false);\n            }\n        }), [\n        mutate,\n        mutateLoading,\n        api,\n        extraMetadataRef,\n        setAbortController,\n        onResponse,\n        onFinish,\n        onError,\n        setError,\n        streamData,\n        streamMode,\n        mutateStreamData\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortController) {\n            abortController.abort();\n            setAbortController(null);\n        }\n    }, [\n        abortController\n    ]);\n    const setCompletion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((completion2)=>{\n        mutate(completion2, false);\n    }, [\n        mutate\n    ]);\n    const complete = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (prompt, options)=>{\n        return triggerRequest(prompt, options);\n    }, [\n        triggerRequest\n    ]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialInput);\n    const handleSubmit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e)=>{\n        e.preventDefault();\n        if (!input) return;\n        return complete(input);\n    }, [\n        input,\n        complete\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    return {\n        completion,\n        complete,\n        error,\n        setCompletion,\n        stop,\n        input,\n        setInput,\n        handleInputChange,\n        handleSubmit,\n        isLoading,\n        data: streamData\n    };\n}\n// react/use-assistant.ts\n\n\nfunction useAssistant({ api, threadId: threadIdParam, credentials, headers, body, onError }) {\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [threadId, setThreadId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"awaiting_message\");\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    const handleInputChange = (event)=>{\n        setInput(event.target.value);\n    };\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n            abortControllerRef.current = null;\n        }\n    }, []);\n    const append = async (message, requestOptions)=>{\n        var _a;\n        setStatus(\"in_progress\");\n        setMessages((messages2)=>{\n            var _a2;\n            return [\n                ...messages2,\n                {\n                    ...message,\n                    id: (_a2 = message.id) != null ? _a2 : generateId()\n                }\n            ];\n        });\n        setInput(\"\");\n        const abortController = new AbortController();\n        try {\n            abortControllerRef.current = abortController;\n            const result = await fetch(api, {\n                method: \"POST\",\n                credentials,\n                signal: abortController.signal,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...headers\n                },\n                body: JSON.stringify({\n                    ...body,\n                    // always use user-provided threadId when available:\n                    threadId: (_a = threadIdParam != null ? threadIdParam : threadId) != null ? _a : null,\n                    message: message.content,\n                    // optional request data:\n                    data: requestOptions == null ? void 0 : requestOptions.data\n                })\n            });\n            if (result.body == null) {\n                throw new Error(\"The response body is empty.\");\n            }\n            for await (const { type, value } of readDataStream(result.body.getReader())){\n                switch(type){\n                    case \"assistant_message\":\n                        {\n                            setMessages((messages2)=>[\n                                    ...messages2,\n                                    {\n                                        id: value.id,\n                                        role: value.role,\n                                        content: value.content[0].text.value\n                                    }\n                                ]);\n                            break;\n                        }\n                    case \"text\":\n                        {\n                            setMessages((messages2)=>{\n                                const lastMessage = messages2[messages2.length - 1];\n                                return [\n                                    ...messages2.slice(0, messages2.length - 1),\n                                    {\n                                        id: lastMessage.id,\n                                        role: lastMessage.role,\n                                        content: lastMessage.content + value\n                                    }\n                                ];\n                            });\n                            break;\n                        }\n                    case \"data_message\":\n                        {\n                            setMessages((messages2)=>{\n                                var _a2;\n                                return [\n                                    ...messages2,\n                                    {\n                                        id: (_a2 = value.id) != null ? _a2 : generateId(),\n                                        role: \"data\",\n                                        content: \"\",\n                                        data: value.data\n                                    }\n                                ];\n                            });\n                            break;\n                        }\n                    case \"assistant_control_data\":\n                        {\n                            setThreadId(value.threadId);\n                            setMessages((messages2)=>{\n                                const lastMessage = messages2[messages2.length - 1];\n                                lastMessage.id = value.messageId;\n                                return [\n                                    ...messages2.slice(0, messages2.length - 1),\n                                    lastMessage\n                                ];\n                            });\n                            break;\n                        }\n                    case \"error\":\n                        {\n                            setError(new Error(value));\n                            break;\n                        }\n                }\n            }\n        } catch (error2) {\n            if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_3__.isAbortError)(error2) && abortController.signal.aborted) {\n                abortControllerRef.current = null;\n                return;\n            }\n            if (onError && error2 instanceof Error) {\n                onError(error2);\n            }\n            setError(error2);\n        } finally{\n            abortControllerRef.current = null;\n            setStatus(\"awaiting_message\");\n        }\n    };\n    const submitMessage = async (event, requestOptions)=>{\n        var _a;\n        (_a = event == null ? void 0 : event.preventDefault) == null ? void 0 : _a.call(event);\n        if (input === \"\") {\n            return;\n        }\n        append({\n            role: \"user\",\n            content: input\n        }, requestOptions);\n    };\n    return {\n        append,\n        messages,\n        setMessages,\n        threadId,\n        input,\n        setInput,\n        handleInputChange,\n        submitMessage,\n        status,\n        error,\n        stop\n    };\n}\nvar experimental_useAssistant = useAssistant;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWkvcmVhY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWdFO0FBQzNCOztBQ0ROO0FBS3hCLElBQU1PLGFBQWFELGlFQUFjQSxDQUN0QyxrRUFDQTs7QUNVRixJQUFNRSxpQkFBa0Q7SUFDdERDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxPQUFPLENBQUNDO1FBQ04sSUFBSSxPQUFPQSxVQUFVLFVBQVU7WUFDN0IsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBQ0EsT0FBTztZQUFFQyxNQUFNO1lBQVFGO1FBQU07SUFDL0I7QUFDRjtBQUVBLElBQU1HLHlCQUlGO0lBQ0ZOLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxPQUFPLENBQUNDO1FBQ04sSUFDRUEsU0FBUyxRQUNULE9BQU9BLFVBQVUsWUFDakIsQ0FBRSxvQkFBbUJBLEtBQUEsS0FDckIsT0FBT0EsTUFBTUksYUFBQSxLQUFrQixZQUMvQkosTUFBTUksYUFBQSxJQUFpQixRQUN2QixDQUFFLFdBQVVKLE1BQU1JLGFBQUEsS0FDbEIsQ0FBRSxnQkFBZUosTUFBTUksYUFBQSxLQUN2QixPQUFPSixNQUFNSSxhQUFBLENBQWNOLElBQUEsS0FBUyxZQUNwQyxPQUFPRSxNQUFNSSxhQUFBLENBQWNDLFNBQUEsS0FBYyxVQUN6QztZQUNBLE1BQU0sSUFBSUosTUFDUjtRQUVKO1FBRUEsT0FBTztZQUNMQyxNQUFNO1lBQ05GO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBTU0saUJBQTREO0lBQ2hFVCxNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTyxDQUFDQztRQUNOLElBQUksQ0FBQ08sTUFBTUMsT0FBQSxDQUFRUixRQUFRO1lBQ3pCLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBLE9BQU87WUFBRUMsTUFBTTtZQUFRRjtRQUFNO0lBQy9CO0FBQ0Y7QUFFQSxJQUFNUyxrQkFBb0Q7SUFDeERaLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxPQUFPLENBQUND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QSxDQUFBSjtRQUVBLElBQUlqQyxVQUFVLElBQUk7WUFDaEI7UUFDRjtRQUVBTixPQUFPO1lBQUVoTCxNQUFNO1lBQVFDLFNBQVNxTDtRQUFNLEdBQUdrQztJQUMzQztJQUVBLE9BQU87UUFDTHhDO1FBQ0F2RjtRQUNBNEY7UUFDQS9LO1FBQ0FnTDtRQUNBQztRQUNBSTtRQUNBK0I7UUFDQUw7UUFDQTdDO1FBQ0FXO0lBQ0Y7QUFDRjtBQUtPLElBQU15Qyw0QkFBNEJWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4uL3VzZS1jaGF0LnRzPzg4MjgiLCJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4uLy4uL3NoYXJlZC9nZW5lcmF0ZS1pZC50cz8wZDVmIiwid2VicGFjazovL2FpLXBvcnRmb2xpby8uLi8uLi9zaGFyZWQvc3RyZWFtLXBhcnRzLnRzP2M0YTgiLCJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4uLy4uL3NoYXJlZC9yZWFkLWRhdGEtc3RyZWFtLnRzPzE4ZjEiLCJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4uLy4uL3NoYXJlZC9wYXJzZS1jb21wbGV4LXJlc3BvbnNlLnRzPzY1ZTAiLCJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4uLy4uL3NoYXJlZC91dGlscy50cz9mOGNmIiwid2VicGFjazovL2FpLXBvcnRmb2xpby8uLi8uLi9zaGFyZWQvY2FsbC1jaGF0LWFwaS50cz9iNTViIiwid2VicGFjazovL2FpLXBvcnRmb2xpby8uLi8uLi9zaGFyZWQvcHJvY2Vzcy1jaGF0LXN0cmVhbS50cz84ZDdmIiwid2VicGFjazovL2FpLXBvcnRmb2xpby8uLi91c2UtY29tcGxldGlvbi50cz9hZTdmIiwid2VicGFjazovL2FpLXBvcnRmb2xpby8uLi8uLi9zaGFyZWQvY2FsbC1jb21wbGV0aW9uLWFwaS50cz84NTI1Iiwid2VicGFjazovL2FpLXBvcnRmb2xpby8uLi91c2UtYXNzaXN0YW50LnRzPzI4MTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlSWQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU1dSLCB7IEtleWVkTXV0YXRvciB9IGZyb20gJ3N3cic7XG5pbXBvcnQgeyBjYWxsQ2hhdEFwaSB9IGZyb20gJy4uL3NoYXJlZC9jYWxsLWNoYXQtYXBpJztcbmltcG9ydCB7IGdlbmVyYXRlSWQgYXMgZ2VuZXJhdGVJZEZ1bmMgfSBmcm9tICcuLi9zaGFyZWQvZ2VuZXJhdGUtaWQnO1xuaW1wb3J0IHsgcHJvY2Vzc0NoYXRTdHJlYW0gfSBmcm9tICcuLi9zaGFyZWQvcHJvY2Vzcy1jaGF0LXN0cmVhbSc7XG5pbXBvcnQgdHlwZSB7XG4gIENoYXRSZXF1ZXN0LFxuICBDaGF0UmVxdWVzdE9wdGlvbnMsXG4gIENyZWF0ZU1lc3NhZ2UsXG4gIElkR2VuZXJhdG9yLFxuICBKU09OVmFsdWUsXG4gIE1lc3NhZ2UsXG4gIFVzZUNoYXRPcHRpb25zLFxufSBmcm9tICcuLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IHR5cGUge1xuICBSZWFjdFJlc3BvbnNlUm93LFxuICBleHBlcmltZW50YWxfU3RyZWFtaW5nUmVhY3RSZXNwb25zZSxcbn0gZnJvbSAnLi4vc3RyZWFtcy9zdHJlYW1pbmctcmVhY3QtcmVzcG9uc2UnO1xuXG5leHBvcnQgdHlwZSB7IENyZWF0ZU1lc3NhZ2UsIE1lc3NhZ2UsIFVzZUNoYXRPcHRpb25zIH07XG5cbmV4cG9ydCB0eXBlIFVzZUNoYXRIZWxwZXJzID0ge1xuICAvKiogQ3VycmVudCBtZXNzYWdlcyBpbiB0aGUgY2hhdCAqL1xuICBtZXNzYWdlczogTWVzc2FnZVtdO1xuICAvKiogVGhlIGVycm9yIG9iamVjdCBvZiB0aGUgQVBJIHJlcXVlc3QgKi9cbiAgZXJyb3I6IHVuZGVmaW5lZCB8IEVycm9yO1xuICAvKipcbiAgICogQXBwZW5kIGEgdXNlciBtZXNzYWdlIHRvIHRoZSBjaGF0IGxpc3QuIFRoaXMgdHJpZ2dlcnMgdGhlIEFQSSBjYWxsIHRvIGZldGNoXG4gICAqIHRoZSBhc3Npc3RhbnQncyByZXNwb25zZS5cbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kXG4gICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkgY2FsbFxuICAgKi9cbiAgYXBwZW5kOiAoXG4gICAgbWVzc2FnZTogTWVzc2FnZSB8IENyZWF0ZU1lc3NhZ2UsXG4gICAgY2hhdFJlcXVlc3RPcHRpb25zPzogQ2hhdFJlcXVlc3RPcHRpb25zLFxuICApID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZD47XG4gIC8qKlxuICAgKiBSZWxvYWQgdGhlIGxhc3QgQUkgY2hhdCByZXNwb25zZSBmb3IgdGhlIGdpdmVuIGNoYXQgaGlzdG9yeS4gSWYgdGhlIGxhc3RcbiAgICogbWVzc2FnZSBpc24ndCBmcm9tIHRoZSBhc3Npc3RhbnQsIGl0IHdpbGwgcmVxdWVzdCB0aGUgQVBJIHRvIGdlbmVyYXRlIGFcbiAgICogbmV3IHJlc3BvbnNlLlxuICAgKi9cbiAgcmVsb2FkOiAoXG4gICAgY2hhdFJlcXVlc3RPcHRpb25zPzogQ2hhdFJlcXVlc3RPcHRpb25zLFxuICApID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZD47XG4gIC8qKlxuICAgKiBBYm9ydCB0aGUgY3VycmVudCByZXF1ZXN0IGltbWVkaWF0ZWx5LCBrZWVwIHRoZSBnZW5lcmF0ZWQgdG9rZW5zIGlmIGFueS5cbiAgICovXG4gIHN0b3A6ICgpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGBtZXNzYWdlc2Agc3RhdGUgbG9jYWxseS4gVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0b1xuICAgKiBlZGl0IHRoZSBtZXNzYWdlcyBvbiB0aGUgY2xpZW50LCBhbmQgdGhlbiB0cmlnZ2VyIHRoZSBgcmVsb2FkYCBtZXRob2RcbiAgICogbWFudWFsbHkgdG8gcmVnZW5lcmF0ZSB0aGUgQUkgcmVzcG9uc2UuXG4gICAqL1xuICBzZXRNZXNzYWdlczogKG1lc3NhZ2VzOiBNZXNzYWdlW10pID0+IHZvaWQ7XG4gIC8qKiBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgKi9cbiAgaW5wdXQ6IHN0cmluZztcbiAgLyoqIHNldFN0YXRlLXBvd2VyZWQgbWV0aG9kIHRvIHVwZGF0ZSB0aGUgaW5wdXQgdmFsdWUgKi9cbiAgc2V0SW5wdXQ6IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPHN0cmluZz4+O1xuICAvKiogQW4gaW5wdXQvdGV4dGFyZWEtcmVhZHkgb25DaGFuZ2UgaGFuZGxlciB0byBjb250cm9sIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgKi9cbiAgaGFuZGxlSW5wdXRDaGFuZ2U6IChcbiAgICBlOlxuICAgICAgfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PlxuICAgICAgfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PixcbiAgKSA9PiB2b2lkO1xuICAvKiogRm9ybSBzdWJtaXNzaW9uIGhhbmRsZXIgdG8gYXV0b21hdGljYWxseSByZXNldCBpbnB1dCBhbmQgYXBwZW5kIGEgdXNlciBtZXNzYWdlICovXG4gIGhhbmRsZVN1Ym1pdDogKFxuICAgIGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+LFxuICAgIGNoYXRSZXF1ZXN0T3B0aW9ucz86IENoYXRSZXF1ZXN0T3B0aW9ucyxcbiAgKSA9PiB2b2lkO1xuICBtZXRhZGF0YT86IE9iamVjdDtcbiAgLyoqIFdoZXRoZXIgdGhlIEFQSSByZXF1ZXN0IGlzIGluIHByb2dyZXNzICovXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgLyoqIEFkZGl0aW9uYWwgZGF0YSBhZGRlZCBvbiB0aGUgc2VydmVyIHZpYSBTdHJlYW1EYXRhICovXG4gIGRhdGE/OiBKU09OVmFsdWVbXTtcbn07XG5cbi8qKlxuQGRlcHJlY2F0ZWQgVXNlIEFJIFNESyBSU0MgaW5zdGVhZDogaHR0cHM6Ly9zZGsudmVyY2VsLmFpL2RvY3MvYWktc2RrLXJzY1xuICovXG50eXBlIFN0cmVhbWluZ1JlYWN0UmVzcG9uc2VBY3Rpb24gPSAocGF5bG9hZDoge1xuICBtZXNzYWdlczogTWVzc2FnZVtdO1xuICBkYXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn0pID0+IFByb21pc2U8ZXhwZXJpbWVudGFsX1N0cmVhbWluZ1JlYWN0UmVzcG9uc2U+O1xuXG5jb25zdCBnZXRTdHJlYW1lZFJlc3BvbnNlID0gYXN5bmMgKFxuICBhcGk6IHN0cmluZyB8IFN0cmVhbWluZ1JlYWN0UmVzcG9uc2VBY3Rpb24sXG4gIGNoYXRSZXF1ZXN0OiBDaGF0UmVxdWVzdCxcbiAgbXV0YXRlOiBLZXllZE11dGF0b3I8TWVzc2FnZVtdPixcbiAgbXV0YXRlU3RyZWFtRGF0YTogS2V5ZWRNdXRhdG9yPEpTT05WYWx1ZVtdIHwgdW5kZWZpbmVkPixcbiAgZXhpc3RpbmdEYXRhOiBKU09OVmFsdWVbXSB8IHVuZGVmaW5lZCxcbiAgZXh0cmFNZXRhZGF0YVJlZjogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxhbnk+LFxuICBtZXNzYWdlc1JlZjogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxNZXNzYWdlW10+LFxuICBhYm9ydENvbnRyb2xsZXJSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8QWJvcnRDb250cm9sbGVyIHwgbnVsbD4sXG4gIGdlbmVyYXRlSWQ6IElkR2VuZXJhdG9yLFxuICBzdHJlYW1Nb2RlPzogJ3N0cmVhbS1kYXRhJyB8ICd0ZXh0JyxcbiAgb25GaW5pc2g/OiAobWVzc2FnZTogTWVzc2FnZSkgPT4gdm9pZCxcbiAgb25SZXNwb25zZT86IChyZXNwb25zZTogUmVzcG9uc2UpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+LFxuICBvblRvb2xDYWxsPzogVXNlQ2hhdE9wdGlvbnNbJ29uVG9vbENhbGwnXSxcbiAgc2VuZEV4dHJhTWVzc2FnZUZpZWxkcz86IGJvb2xlYW4sXG4pID0+IHtcbiAgLy8gRG8gYW4gb3B0aW1pc3RpYyB1cGRhdGUgdG8gdGhlIGNoYXQgc3RhdGUgdG8gc2hvdyB0aGUgdXBkYXRlZCBtZXNzYWdlc1xuICAvLyBpbW1lZGlhdGVseS5cbiAgY29uc3QgcHJldmlvdXNNZXNzYWdlcyA9IG1lc3NhZ2VzUmVmLmN1cnJlbnQ7XG4gIG11dGF0ZShjaGF0UmVxdWVzdC5tZXNzYWdlcywgZmFsc2UpO1xuXG4gIGNvbnN0IGNvbnN0cnVjdGVkTWVzc2FnZXNQYXlsb2FkID0gc2VuZEV4dHJhTWVzc2FnZUZpZWxkc1xuICAgID8gY2hhdFJlcXVlc3QubWVzc2FnZXNcbiAgICA6IGNoYXRSZXF1ZXN0Lm1lc3NhZ2VzLm1hcChcbiAgICAgICAgKHtcbiAgICAgICAgICByb2xlLFxuICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGFubm90YXRpb25zLFxuICAgICAgICAgIHRvb2xJbnZvY2F0aW9ucyxcbiAgICAgICAgICBmdW5jdGlvbl9jYWxsLFxuICAgICAgICAgIHRvb2xfY2FsbHMsXG4gICAgICAgICAgdG9vbF9jYWxsX2lkLFxuICAgICAgICB9KSA9PiAoe1xuICAgICAgICAgIHJvbGUsXG4gICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAuLi4obmFtZSAhPT0gdW5kZWZpbmVkICYmIHsgbmFtZSB9KSxcbiAgICAgICAgICAuLi4oZGF0YSAhPT0gdW5kZWZpbmVkICYmIHsgZGF0YSB9KSxcbiAgICAgICAgICAuLi4oYW5ub3RhdGlvbnMgIT09IHVuZGVmaW5lZCAmJiB7IGFubm90YXRpb25zIH0pLFxuICAgICAgICAgIC4uLih0b29sSW52b2NhdGlvbnMgIT09IHVuZGVmaW5lZCAmJiB7IHRvb2xJbnZvY2F0aW9ucyB9KSxcbiAgICAgICAgICAvLyBvdXRkYXRlZCBmdW5jdGlvbi90b29sIGNhbGwgaGFuZGxpbmcgKFRPRE8gZGVwcmVjYXRlKTpcbiAgICAgICAgICB0b29sX2NhbGxfaWQsXG4gICAgICAgICAgLi4uKGZ1bmN0aW9uX2NhbGwgIT09IHVuZGVmaW5lZCAmJiB7IGZ1bmN0aW9uX2NhbGwgfSksXG4gICAgICAgICAgLi4uKHRvb2xfY2FsbHMgIT09IHVuZGVmaW5lZCAmJiB7IHRvb2xfY2FsbHMgfSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcblxuICAvLyBUT0RPIGRlcHJlY2F0ZWQsIHJlbW92ZSBpbiBuZXh0IG1ham9yIHJlbGVhc2VcbiAgaWYgKHR5cGVvZiBhcGkgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSBhcmUgaGFuZGxpbmcgYSBTZXJ2ZXIgQWN0aW9uLiBObyBjb21wbGV4IG1vZGUgaGFuZGxpbmcgbmVlZGVkLlxuXG4gICAgY29uc3QgcmVwbHlJZCA9IGdlbmVyYXRlSWQoKTtcbiAgICBjb25zdCBjcmVhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCByZXNwb25zZU1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAgICBpZDogcmVwbHlJZCxcbiAgICAgIGNyZWF0ZWRBdCxcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgfTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIHJlYWRSb3cocHJvbWlzZTogUHJvbWlzZTxSZWFjdFJlc3BvbnNlUm93Pikge1xuICAgICAgY29uc3QgeyBjb250ZW50LCB1aSwgbmV4dCB9ID0gYXdhaXQgcHJvbWlzZTtcblxuICAgICAgLy8gVE9ETzogSGFuZGxlIGZ1bmN0aW9uIGNhbGxzLlxuICAgICAgcmVzcG9uc2VNZXNzYWdlWydjb250ZW50J10gPSBjb250ZW50O1xuICAgICAgcmVzcG9uc2VNZXNzYWdlWyd1aSddID0gYXdhaXQgdWk7XG5cbiAgICAgIG11dGF0ZShbLi4uY2hhdFJlcXVlc3QubWVzc2FnZXMsIHsgLi4ucmVzcG9uc2VNZXNzYWdlIH1dLCBmYWxzZSk7XG5cbiAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgIGF3YWl0IHJlYWRSb3cobmV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb21pc2UgPSBhcGkoe1xuICAgICAgICBtZXNzYWdlczogY29uc3RydWN0ZWRNZXNzYWdlc1BheWxvYWQgYXMgTWVzc2FnZVtdLFxuICAgICAgICBkYXRhOiBjaGF0UmVxdWVzdC5kYXRhLFxuICAgICAgfSkgYXMgUHJvbWlzZTxSZWFjdFJlc3BvbnNlUm93PjtcbiAgICAgIGF3YWl0IHJlYWRSb3cocHJvbWlzZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gUmVzdG9yZSB0aGUgcHJldmlvdXMgbWVzc2FnZXMgaWYgdGhlIHJlcXVlc3QgZmFpbHMuXG4gICAgICBtdXRhdGUocHJldmlvdXNNZXNzYWdlcywgZmFsc2UpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAob25GaW5pc2gpIHtcbiAgICAgIG9uRmluaXNoKHJlc3BvbnNlTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlTWVzc2FnZTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBjYWxsQ2hhdEFwaSh7XG4gICAgYXBpLFxuICAgIG1lc3NhZ2VzOiBjb25zdHJ1Y3RlZE1lc3NhZ2VzUGF5bG9hZCxcbiAgICBib2R5OiB7XG4gICAgICBkYXRhOiBjaGF0UmVxdWVzdC5kYXRhLFxuICAgICAgLi4uZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50LmJvZHksXG4gICAgICAuLi5jaGF0UmVxdWVzdC5vcHRpb25zPy5ib2R5LFxuICAgICAgLi4uKGNoYXRSZXF1ZXN0LmZ1bmN0aW9ucyAhPT0gdW5kZWZpbmVkICYmIHtcbiAgICAgICAgZnVuY3Rpb25zOiBjaGF0UmVxdWVzdC5mdW5jdGlvbnMsXG4gICAgICB9KSxcbiAgICAgIC4uLihjaGF0UmVxdWVzdC5mdW5jdGlvbl9jYWxsICE9PSB1bmRlZmluZWQgJiYge1xuICAgICAgICBmdW5jdGlvbl9jYWxsOiBjaGF0UmVxdWVzdC5mdW5jdGlvbl9jYWxsLFxuICAgICAgfSksXG4gICAgICAuLi4oY2hhdFJlcXVlc3QudG9vbHMgIT09IHVuZGVmaW5lZCAmJiB7XG4gICAgICAgIHRvb2xzOiBjaGF0UmVxdWVzdC50b29scyxcbiAgICAgIH0pLFxuICAgICAgLi4uKGNoYXRSZXF1ZXN0LnRvb2xfY2hvaWNlICE9PSB1bmRlZmluZWQgJiYge1xuICAgICAgICB0b29sX2Nob2ljZTogY2hhdFJlcXVlc3QudG9vbF9jaG9pY2UsXG4gICAgICB9KSxcbiAgICB9LFxuICAgIHN0cmVhbU1vZGUsXG4gICAgY3JlZGVudGlhbHM6IGV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5jcmVkZW50aWFscyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAuLi5leHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQuaGVhZGVycyxcbiAgICAgIC4uLmNoYXRSZXF1ZXN0Lm9wdGlvbnM/LmhlYWRlcnMsXG4gICAgfSxcbiAgICBhYm9ydENvbnRyb2xsZXI6ICgpID0+IGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50LFxuICAgIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSgpIHtcbiAgICAgIG11dGF0ZShwcmV2aW91c01lc3NhZ2VzLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvblJlc3BvbnNlLFxuICAgIG9uVXBkYXRlKG1lcmdlZCwgZGF0YSkge1xuICAgICAgbXV0YXRlKFsuLi5jaGF0UmVxdWVzdC5tZXNzYWdlcywgLi4ubWVyZ2VkXSwgZmFsc2UpO1xuICAgICAgbXV0YXRlU3RyZWFtRGF0YShbLi4uKGV4aXN0aW5nRGF0YSB8fCBbXSksIC4uLihkYXRhIHx8IFtdKV0sIGZhbHNlKTtcbiAgICB9LFxuICAgIG9uVG9vbENhbGwsXG4gICAgb25GaW5pc2gsXG4gICAgZ2VuZXJhdGVJZCxcbiAgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2hhdCh7XG4gIGFwaSA9ICcvYXBpL2NoYXQnLFxuICBpZCxcbiAgaW5pdGlhbE1lc3NhZ2VzLFxuICBpbml0aWFsSW5wdXQgPSAnJyxcbiAgc2VuZEV4dHJhTWVzc2FnZUZpZWxkcyxcbiAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICBleHBlcmltZW50YWxfb25Ub29sQ2FsbCxcbiAgb25Ub29sQ2FsbCxcbiAgZXhwZXJpbWVudGFsX21heEF1dG9tYXRpY1JvdW5kdHJpcHMgPSAwLFxuICBtYXhBdXRvbWF0aWNSb3VuZHRyaXBzID0gZXhwZXJpbWVudGFsX21heEF1dG9tYXRpY1JvdW5kdHJpcHMsXG4gIG1heFRvb2xSb3VuZHRyaXBzID0gbWF4QXV0b21hdGljUm91bmR0cmlwcyxcbiAgc3RyZWFtTW9kZSxcbiAgb25SZXNwb25zZSxcbiAgb25GaW5pc2gsXG4gIG9uRXJyb3IsXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBib2R5LFxuICBnZW5lcmF0ZUlkID0gZ2VuZXJhdGVJZEZ1bmMsXG59OiBPbWl0PFVzZUNoYXRPcHRpb25zLCAnYXBpJz4gJiB7XG4gIGFwaT86IHN0cmluZyB8IFN0cmVhbWluZ1JlYWN0UmVzcG9uc2VBY3Rpb247XG4gIGtleT86IHN0cmluZztcbiAgLyoqXG5AZGVwcmVjYXRlZCBVc2UgYG1heFRvb2xSb3VuZHRyaXBzYCBpbnN0ZWFkLlxuICAgKi9cbiAgZXhwZXJpbWVudGFsX21heEF1dG9tYXRpY1JvdW5kdHJpcHM/OiBudW1iZXI7XG5cbiAgLyoqXG5AZGVwcmVjYXRlZCBVc2UgYG1heFRvb2xSb3VuZHRyaXBzYCBpbnN0ZWFkLlxuICAgKi9cbiAgbWF4QXV0b21hdGljUm91bmR0cmlwcz86IG51bWJlcjtcblxuICAvKipcbk1heGltYWwgbnVtYmVyIG9mIGF1dG9tYXRpYyByb3VuZHRyaXBzIGZvciB0b29sIGNhbGxzLlxuXG5BbiBhdXRvbWF0aWMgdG9vbCBjYWxsIHJvdW5kdHJpcCBpcyBhIGNhbGwgdG8gdGhlIHNlcnZlciB3aXRoIHRoZSBcbnRvb2wgY2FsbCByZXN1bHRzIHdoZW4gYWxsIHRvb2wgY2FsbHMgaW4gdGhlIGxhc3QgYXNzaXN0YW50IFxubWVzc2FnZSBoYXZlIHJlc3VsdHMuXG5cbkEgbWF4aW11bSBudW1iZXIgaXMgcmVxdWlyZWQgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wcyBpbiB0aGVcbmNhc2Ugb2YgbWlzY29uZmlndXJlZCB0b29scy5cblxuQnkgZGVmYXVsdCwgaXQncyBzZXQgdG8gMCwgd2hpY2ggd2lsbCBkaXNhYmxlIHRoZSBmZWF0dXJlLlxuICAgKi9cbiAgbWF4VG9vbFJvdW5kdHJpcHM/OiBudW1iZXI7XG59ID0ge30pOiBVc2VDaGF0SGVscGVycyAmIHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgYWRkVG9vbFJlc3VsdGAgaW5zdGVhZC5cbiAgICovXG4gIGV4cGVyaW1lbnRhbF9hZGRUb29sUmVzdWx0OiAoe1xuICAgIHRvb2xDYWxsSWQsXG4gICAgcmVzdWx0LFxuICB9OiB7XG4gICAgdG9vbENhbGxJZDogc3RyaW5nO1xuICAgIHJlc3VsdDogYW55O1xuICB9KSA9PiB2b2lkO1xuICBhZGRUb29sUmVzdWx0OiAoe1xuICAgIHRvb2xDYWxsSWQsXG4gICAgcmVzdWx0LFxuICB9OiB7XG4gICAgdG9vbENhbGxJZDogc3RyaW5nO1xuICAgIHJlc3VsdDogYW55O1xuICB9KSA9PiB2b2lkO1xufSB7XG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGlkIGZvciB0aGUgY2hhdCBpZiBub3QgcHJvdmlkZWQuXG4gIGNvbnN0IGhvb2tJZCA9IHVzZUlkKCk7XG4gIGNvbnN0IGlkS2V5ID0gaWQgPz8gaG9va0lkO1xuICBjb25zdCBjaGF0S2V5ID0gdHlwZW9mIGFwaSA9PT0gJ3N0cmluZycgPyBbYXBpLCBpZEtleV0gOiBpZEtleTtcblxuICAvLyBTdG9yZSBhIGVtcHR5IGFycmF5IGFzIHRoZSBpbml0aWFsIG1lc3NhZ2VzXG4gIC8vIChpbnN0ZWFkIG9mIHVzaW5nIGEgZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWUgdGhhdCBnZXRzIHJlLWNyZWF0ZWQgZWFjaCB0aW1lKVxuICAvLyB0byBhdm9pZCByZS1yZW5kZXJzOlxuICBjb25zdCBbaW5pdGlhbE1lc3NhZ2VzRmFsbGJhY2tdID0gdXNlU3RhdGUoW10pO1xuXG4gIC8vIFN0b3JlIHRoZSBjaGF0IHN0YXRlIGluIFNXUiwgdXNpbmcgdGhlIGNoYXRJZCBhcyB0aGUga2V5IHRvIHNoYXJlIHN0YXRlcy5cbiAgY29uc3QgeyBkYXRhOiBtZXNzYWdlcywgbXV0YXRlIH0gPSB1c2VTV1I8TWVzc2FnZVtdPihcbiAgICBbY2hhdEtleSwgJ21lc3NhZ2VzJ10sXG4gICAgbnVsbCxcbiAgICB7IGZhbGxiYWNrRGF0YTogaW5pdGlhbE1lc3NhZ2VzID8/IGluaXRpYWxNZXNzYWdlc0ZhbGxiYWNrIH0sXG4gICk7XG5cbiAgLy8gV2Ugc3RvcmUgbG9hZGluZyBzdGF0ZSBpbiBhbm90aGVyIGhvb2sgdG8gc3luYyBsb2FkaW5nIHN0YXRlcyBhY3Jvc3MgaG9vayBpbnZvY2F0aW9uc1xuICBjb25zdCB7IGRhdGE6IGlzTG9hZGluZyA9IGZhbHNlLCBtdXRhdGU6IG11dGF0ZUxvYWRpbmcgfSA9IHVzZVNXUjxib29sZWFuPihcbiAgICBbY2hhdEtleSwgJ2xvYWRpbmcnXSxcbiAgICBudWxsLFxuICApO1xuXG4gIGNvbnN0IHsgZGF0YTogc3RyZWFtRGF0YSwgbXV0YXRlOiBtdXRhdGVTdHJlYW1EYXRhIH0gPSB1c2VTV1I8XG4gICAgSlNPTlZhbHVlW10gfCB1bmRlZmluZWRcbiAgPihbY2hhdEtleSwgJ3N0cmVhbURhdGEnXSwgbnVsbCk7XG5cbiAgY29uc3QgeyBkYXRhOiBlcnJvciA9IHVuZGVmaW5lZCwgbXV0YXRlOiBzZXRFcnJvciB9ID0gdXNlU1dSPFxuICAgIHVuZGVmaW5lZCB8IEVycm9yXG4gID4oW2NoYXRLZXksICdlcnJvciddLCBudWxsKTtcblxuICAvLyBLZWVwIHRoZSBsYXRlc3QgbWVzc2FnZXMgaW4gYSByZWYuXG4gIGNvbnN0IG1lc3NhZ2VzUmVmID0gdXNlUmVmPE1lc3NhZ2VbXT4obWVzc2FnZXMgfHwgW10pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG1lc3NhZ2VzUmVmLmN1cnJlbnQgPSBtZXNzYWdlcyB8fCBbXTtcbiAgfSwgW21lc3NhZ2VzXSk7XG5cbiAgLy8gQWJvcnQgY29udHJvbGxlciB0byBjYW5jZWwgdGhlIGN1cnJlbnQgQVBJIGNhbGwuXG4gIGNvbnN0IGFib3J0Q29udHJvbGxlclJlZiA9IHVzZVJlZjxBYm9ydENvbnRyb2xsZXIgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBleHRyYU1ldGFkYXRhUmVmID0gdXNlUmVmKHtcbiAgICBjcmVkZW50aWFscyxcbiAgICBoZWFkZXJzLFxuICAgIGJvZHksXG4gIH0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50ID0ge1xuICAgICAgY3JlZGVudGlhbHMsXG4gICAgICBoZWFkZXJzLFxuICAgICAgYm9keSxcbiAgICB9O1xuICB9LCBbY3JlZGVudGlhbHMsIGhlYWRlcnMsIGJvZHldKTtcblxuICBjb25zdCB0cmlnZ2VyUmVxdWVzdCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChjaGF0UmVxdWVzdDogQ2hhdFJlcXVlc3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG11dGF0ZUxvYWRpbmcodHJ1ZSk7XG4gICAgICAgIHNldEVycm9yKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCA9IGFib3J0Q29udHJvbGxlcjtcblxuICAgICAgICBhd2FpdCBwcm9jZXNzQ2hhdFN0cmVhbSh7XG4gICAgICAgICAgZ2V0U3RyZWFtZWRSZXNwb25zZTogKCkgPT5cbiAgICAgICAgICAgIGdldFN0cmVhbWVkUmVzcG9uc2UoXG4gICAgICAgICAgICAgIGFwaSxcbiAgICAgICAgICAgICAgY2hhdFJlcXVlc3QsXG4gICAgICAgICAgICAgIG11dGF0ZSxcbiAgICAgICAgICAgICAgbXV0YXRlU3RyZWFtRGF0YSxcbiAgICAgICAgICAgICAgc3RyZWFtRGF0YSEsXG4gICAgICAgICAgICAgIGV4dHJhTWV0YWRhdGFSZWYsXG4gICAgICAgICAgICAgIG1lc3NhZ2VzUmVmLFxuICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJSZWYsXG4gICAgICAgICAgICAgIGdlbmVyYXRlSWQsXG4gICAgICAgICAgICAgIHN0cmVhbU1vZGUsXG4gICAgICAgICAgICAgIG9uRmluaXNoLFxuICAgICAgICAgICAgICBvblJlc3BvbnNlLFxuICAgICAgICAgICAgICBvblRvb2xDYWxsLFxuICAgICAgICAgICAgICBzZW5kRXh0cmFNZXNzYWdlRmllbGRzLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwsXG4gICAgICAgICAgZXhwZXJpbWVudGFsX29uVG9vbENhbGwsXG4gICAgICAgICAgdXBkYXRlQ2hhdFJlcXVlc3Q6IGNoYXRSZXF1ZXN0UGFyYW0gPT4ge1xuICAgICAgICAgICAgY2hhdFJlcXVlc3QgPSBjaGF0UmVxdWVzdFBhcmFtO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0Q3VycmVudE1lc3NhZ2VzOiAoKSA9PiBtZXNzYWdlc1JlZi5jdXJyZW50LFxuICAgICAgICB9KTtcblxuICAgICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gSWdub3JlIGFib3J0IGVycm9ycyBhcyB0aGV5IGFyZSBleHBlY3RlZC5cbiAgICAgICAgaWYgKChlcnIgYXMgYW55KS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob25FcnJvciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldEVycm9yKGVyciBhcyBFcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBtdXRhdGVMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXV0by1zdWJtaXQgd2hlbiBhbGwgdG9vbCBjYWxscyBpbiB0aGUgbGFzdCBhc3Npc3RhbnQgbWVzc2FnZSBoYXZlIHJlc3VsdHM6XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IG1lc3NhZ2VzUmVmLmN1cnJlbnQ7XG4gICAgICBjb25zdCBsYXN0TWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBlbnN1cmUgdGhlcmUgaXMgYSBsYXN0IG1lc3NhZ2U6XG4gICAgICAgIGxhc3RNZXNzYWdlICE9IG51bGwgJiZcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGZlYXR1cmUgaXMgZW5hYmxlZDpcbiAgICAgICAgbWF4VG9vbFJvdW5kdHJpcHMgPiAwICYmXG4gICAgICAgIC8vIGNoZWNrIHRoYXQgcm91bmR0cmlwIGlzIHBvc3NpYmxlOlxuICAgICAgICBpc0Fzc2lzdGFudE1lc3NhZ2VXaXRoQ29tcGxldGVkVG9vbENhbGxzKGxhc3RNZXNzYWdlKSAmJlxuICAgICAgICAvLyBsaW1pdCB0aGUgbnVtYmVyIG9mIGF1dG9tYXRpYyByb3VuZHRyaXBzOlxuICAgICAgICBjb3VudFRyYWlsaW5nQXNzaXN0YW50TWVzc2FnZXMobWVzc2FnZXMpIDw9IG1heFRvb2xSb3VuZHRyaXBzXG4gICAgICApIHtcbiAgICAgICAgYXdhaXQgdHJpZ2dlclJlcXVlc3QoeyBtZXNzYWdlcyB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIG11dGF0ZSxcbiAgICAgIG11dGF0ZUxvYWRpbmcsXG4gICAgICBhcGksXG4gICAgICBleHRyYU1ldGFkYXRhUmVmLFxuICAgICAgb25SZXNwb25zZSxcbiAgICAgIG9uRmluaXNoLFxuICAgICAgb25FcnJvcixcbiAgICAgIHNldEVycm9yLFxuICAgICAgbXV0YXRlU3RyZWFtRGF0YSxcbiAgICAgIHN0cmVhbURhdGEsXG4gICAgICBzdHJlYW1Nb2RlLFxuICAgICAgc2VuZEV4dHJhTWVzc2FnZUZpZWxkcyxcbiAgICAgIGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCxcbiAgICAgIGV4cGVyaW1lbnRhbF9vblRvb2xDYWxsLFxuICAgICAgb25Ub29sQ2FsbCxcbiAgICAgIG1heFRvb2xSb3VuZHRyaXBzLFxuICAgICAgbWVzc2FnZXNSZWYsXG4gICAgICBhYm9ydENvbnRyb2xsZXJSZWYsXG4gICAgICBnZW5lcmF0ZUlkLFxuICAgIF0sXG4gICk7XG5cbiAgY29uc3QgYXBwZW5kID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKFxuICAgICAgbWVzc2FnZTogTWVzc2FnZSB8IENyZWF0ZU1lc3NhZ2UsXG4gICAgICB7XG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGZ1bmN0aW9ucyxcbiAgICAgICAgZnVuY3Rpb25fY2FsbCxcbiAgICAgICAgdG9vbHMsXG4gICAgICAgIHRvb2xfY2hvaWNlLFxuICAgICAgICBkYXRhLFxuICAgICAgfTogQ2hhdFJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgKSA9PiB7XG4gICAgICBpZiAoIW1lc3NhZ2UuaWQpIHtcbiAgICAgICAgbWVzc2FnZS5pZCA9IGdlbmVyYXRlSWQoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hhdFJlcXVlc3Q6IENoYXRSZXF1ZXN0ID0ge1xuICAgICAgICBtZXNzYWdlczogbWVzc2FnZXNSZWYuY3VycmVudC5jb25jYXQobWVzc2FnZSBhcyBNZXNzYWdlKSxcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgLi4uKGZ1bmN0aW9ucyAhPT0gdW5kZWZpbmVkICYmIHsgZnVuY3Rpb25zIH0pLFxuICAgICAgICAuLi4oZnVuY3Rpb25fY2FsbCAhPT0gdW5kZWZpbmVkICYmIHsgZnVuY3Rpb25fY2FsbCB9KSxcbiAgICAgICAgLi4uKHRvb2xzICE9PSB1bmRlZmluZWQgJiYgeyB0b29scyB9KSxcbiAgICAgICAgLi4uKHRvb2xfY2hvaWNlICE9PSB1bmRlZmluZWQgJiYgeyB0b29sX2Nob2ljZSB9KSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0cmlnZ2VyUmVxdWVzdChjaGF0UmVxdWVzdCk7XG4gICAgfSxcbiAgICBbdHJpZ2dlclJlcXVlc3QsIGdlbmVyYXRlSWRdLFxuICApO1xuXG4gIGNvbnN0IHJlbG9hZCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh7XG4gICAgICBvcHRpb25zLFxuICAgICAgZnVuY3Rpb25zLFxuICAgICAgZnVuY3Rpb25fY2FsbCxcbiAgICAgIHRvb2xzLFxuICAgICAgdG9vbF9jaG9pY2UsXG4gICAgfTogQ2hhdFJlcXVlc3RPcHRpb25zID0ge30pID0+IHtcbiAgICAgIGlmIChtZXNzYWdlc1JlZi5jdXJyZW50Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIFJlbW92ZSBsYXN0IGFzc2lzdGFudCBtZXNzYWdlIGFuZCByZXRyeSBsYXN0IHVzZXIgbWVzc2FnZS5cbiAgICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gbWVzc2FnZXNSZWYuY3VycmVudFttZXNzYWdlc1JlZi5jdXJyZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGxhc3RNZXNzYWdlLnJvbGUgPT09ICdhc3Npc3RhbnQnKSB7XG4gICAgICAgIGNvbnN0IGNoYXRSZXF1ZXN0OiBDaGF0UmVxdWVzdCA9IHtcbiAgICAgICAgICBtZXNzYWdlczogbWVzc2FnZXNSZWYuY3VycmVudC5zbGljZSgwLCAtMSksXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAuLi4oZnVuY3Rpb25zICE9PSB1bmRlZmluZWQgJiYgeyBmdW5jdGlvbnMgfSksXG4gICAgICAgICAgLi4uKGZ1bmN0aW9uX2NhbGwgIT09IHVuZGVmaW5lZCAmJiB7IGZ1bmN0aW9uX2NhbGwgfSksXG4gICAgICAgICAgLi4uKHRvb2xzICE9PSB1bmRlZmluZWQgJiYgeyB0b29scyB9KSxcbiAgICAgICAgICAuLi4odG9vbF9jaG9pY2UgIT09IHVuZGVmaW5lZCAmJiB7IHRvb2xfY2hvaWNlIH0pLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0cmlnZ2VyUmVxdWVzdChjaGF0UmVxdWVzdCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoYXRSZXF1ZXN0OiBDaGF0UmVxdWVzdCA9IHtcbiAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzUmVmLmN1cnJlbnQsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIC4uLihmdW5jdGlvbnMgIT09IHVuZGVmaW5lZCAmJiB7IGZ1bmN0aW9ucyB9KSxcbiAgICAgICAgLi4uKGZ1bmN0aW9uX2NhbGwgIT09IHVuZGVmaW5lZCAmJiB7IGZ1bmN0aW9uX2NhbGwgfSksXG4gICAgICAgIC4uLih0b29scyAhPT0gdW5kZWZpbmVkICYmIHsgdG9vbHMgfSksXG4gICAgICAgIC4uLih0b29sX2Nob2ljZSAhPT0gdW5kZWZpbmVkICYmIHsgdG9vbF9jaG9pY2UgfSksXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdHJpZ2dlclJlcXVlc3QoY2hhdFJlcXVlc3QpO1xuICAgIH0sXG4gICAgW3RyaWdnZXJSZXF1ZXN0XSxcbiAgKTtcblxuICBjb25zdCBzdG9wID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudCkge1xuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQuYWJvcnQoKTtcbiAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXRNZXNzYWdlcyA9IHVzZUNhbGxiYWNrKFxuICAgIChtZXNzYWdlczogTWVzc2FnZVtdKSA9PiB7XG4gICAgICBtdXRhdGUobWVzc2FnZXMsIGZhbHNlKTtcbiAgICAgIG1lc3NhZ2VzUmVmLmN1cnJlbnQgPSBtZXNzYWdlcztcbiAgICB9LFxuICAgIFttdXRhdGVdLFxuICApO1xuXG4gIC8vIElucHV0IHN0YXRlIGFuZCBoYW5kbGVycy5cbiAgY29uc3QgW2lucHV0LCBzZXRJbnB1dF0gPSB1c2VTdGF0ZShpbml0aWFsSW5wdXQpO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUNhbGxiYWNrKFxuICAgIChcbiAgICAgIGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+LFxuICAgICAgb3B0aW9uczogQ2hhdFJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgICBtZXRhZGF0YT86IE9iamVjdCxcbiAgICApID0+IHtcbiAgICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgICBleHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQgPSB7XG4gICAgICAgICAgLi4uZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50LFxuICAgICAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoIWlucHV0KSByZXR1cm47XG5cbiAgICAgIGFwcGVuZChcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRlbnQ6IGlucHV0LFxuICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICApO1xuICAgICAgc2V0SW5wdXQoJycpO1xuICAgIH0sXG4gICAgW2lucHV0LCBhcHBlbmRdLFxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGU6IGFueSkgPT4ge1xuICAgIHNldElucHV0KGUudGFyZ2V0LnZhbHVlKTtcbiAgfTtcblxuICBjb25zdCBhZGRUb29sUmVzdWx0ID0gKHtcbiAgICB0b29sQ2FsbElkLFxuICAgIHJlc3VsdCxcbiAgfToge1xuICAgIHRvb2xDYWxsSWQ6IHN0cmluZztcbiAgICByZXN1bHQ6IGFueTtcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZWRNZXNzYWdlcyA9IG1lc3NhZ2VzUmVmLmN1cnJlbnQubWFwKChtZXNzYWdlLCBpbmRleCwgYXJyKSA9PlxuICAgICAgLy8gdXBkYXRlIHRoZSB0b29sIGNhbGxzIGluIHRoZSBsYXN0IGFzc2lzdGFudCBtZXNzYWdlOlxuICAgICAgaW5kZXggPT09IGFyci5sZW5ndGggLSAxICYmXG4gICAgICBtZXNzYWdlLnJvbGUgPT09ICdhc3Npc3RhbnQnICYmXG4gICAgICBtZXNzYWdlLnRvb2xJbnZvY2F0aW9uc1xuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2UsXG4gICAgICAgICAgICB0b29sSW52b2NhdGlvbnM6IG1lc3NhZ2UudG9vbEludm9jYXRpb25zLm1hcCh0b29sSW52b2NhdGlvbiA9PlxuICAgICAgICAgICAgICB0b29sSW52b2NhdGlvbi50b29sQ2FsbElkID09PSB0b29sQ2FsbElkXG4gICAgICAgICAgICAgICAgPyB7IC4uLnRvb2xJbnZvY2F0aW9uLCByZXN1bHQgfVxuICAgICAgICAgICAgICAgIDogdG9vbEludm9jYXRpb24sXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH1cbiAgICAgICAgOiBtZXNzYWdlLFxuICAgICk7XG5cbiAgICBtdXRhdGUodXBkYXRlZE1lc3NhZ2VzLCBmYWxzZSk7XG5cbiAgICAvLyBhdXRvLXN1Ym1pdCB3aGVuIGFsbCB0b29sIGNhbGxzIGluIHRoZSBsYXN0IGFzc2lzdGFudCBtZXNzYWdlIGhhdmUgcmVzdWx0czpcbiAgICBjb25zdCBsYXN0TWVzc2FnZSA9IHVwZGF0ZWRNZXNzYWdlc1t1cGRhdGVkTWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzQXNzaXN0YW50TWVzc2FnZVdpdGhDb21wbGV0ZWRUb29sQ2FsbHMobGFzdE1lc3NhZ2UpKSB7XG4gICAgICB0cmlnZ2VyUmVxdWVzdCh7IG1lc3NhZ2VzOiB1cGRhdGVkTWVzc2FnZXMgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbWVzc2FnZXM6IG1lc3NhZ2VzIHx8IFtdLFxuICAgIGVycm9yLFxuICAgIGFwcGVuZCxcbiAgICByZWxvYWQsXG4gICAgc3RvcCxcbiAgICBzZXRNZXNzYWdlcyxcbiAgICBpbnB1dCxcbiAgICBzZXRJbnB1dCxcbiAgICBoYW5kbGVJbnB1dENoYW5nZSxcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgaXNMb2FkaW5nLFxuICAgIGRhdGE6IHN0cmVhbURhdGEsXG4gICAgYWRkVG9vbFJlc3VsdCxcbiAgICBleHBlcmltZW50YWxfYWRkVG9vbFJlc3VsdDogYWRkVG9vbFJlc3VsdCxcbiAgfTtcbn1cblxuLyoqXG5DaGVjayBpZiB0aGUgbWVzc2FnZSBpcyBhbiBhc3Npc3RhbnQgbWVzc2FnZSB3aXRoIGNvbXBsZXRlZCB0b29sIGNhbGxzLiBcblRoZSBtZXNzYWdlIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgdG9vbCBpbnZvY2F0aW9uIGFuZCBhbGwgdG9vbCBpbnZvY2F0aW9uc1xubXVzdCBoYXZlIGEgcmVzdWx0LlxuICovXG5mdW5jdGlvbiBpc0Fzc2lzdGFudE1lc3NhZ2VXaXRoQ29tcGxldGVkVG9vbENhbGxzKG1lc3NhZ2U6IE1lc3NhZ2UpIHtcbiAgcmV0dXJuIChcbiAgICBtZXNzYWdlLnJvbGUgPT09ICdhc3Npc3RhbnQnICYmXG4gICAgbWVzc2FnZS50b29sSW52b2NhdGlvbnMgJiZcbiAgICBtZXNzYWdlLnRvb2xJbnZvY2F0aW9ucy5sZW5ndGggPiAwICYmXG4gICAgbWVzc2FnZS50b29sSW52b2NhdGlvbnMuZXZlcnkodG9vbEludm9jYXRpb24gPT4gJ3Jlc3VsdCcgaW4gdG9vbEludm9jYXRpb24pXG4gICk7XG59XG5cbi8qKlxuUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRyYWlsaW5nIGFzc2lzdGFudCBtZXNzYWdlcyBpbiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNvdW50VHJhaWxpbmdBc3Npc3RhbnRNZXNzYWdlcyhtZXNzYWdlczogTWVzc2FnZVtdKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGZvciAobGV0IGkgPSBtZXNzYWdlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChtZXNzYWdlc1tpXS5yb2xlID09PSAnYXNzaXN0YW50Jykge1xuICAgICAgY291bnQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3VudDtcbn1cbiIsImltcG9ydCB7IGN1c3RvbUFscGhhYmV0IH0gZnJvbSAnbmFub2lkL25vbi1zZWN1cmUnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIDctY2hhcmFjdGVyIHJhbmRvbSBzdHJpbmcgdG8gdXNlIGZvciBJRHMuIE5vdCBzZWN1cmUuXG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUlkID0gY3VzdG9tQWxwaGFiZXQoXG4gICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsXG4gIDcsXG4pO1xuIiwiaW1wb3J0IHsgVG9vbENhbGwgYXMgQ29yZVRvb2xDYWxsIH0gZnJvbSAnLi4vY29yZS9nZW5lcmF0ZS10ZXh0L3Rvb2wtY2FsbCc7XG5pbXBvcnQgeyBUb29sUmVzdWx0IGFzIENvcmVUb29sUmVzdWx0IH0gZnJvbSAnLi4vY29yZS9nZW5lcmF0ZS10ZXh0L3Rvb2wtcmVzdWx0JztcbmltcG9ydCB7XG4gIEFzc2lzdGFudE1lc3NhZ2UsXG4gIERhdGFNZXNzYWdlLFxuICBGdW5jdGlvbkNhbGwsXG4gIEpTT05WYWx1ZSxcbiAgVG9vbENhbGwsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU3RyZWFtU3RyaW5nIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtUGFydDxDT0RFIGV4dGVuZHMgc3RyaW5nLCBOQU1FIGV4dGVuZHMgc3RyaW5nLCBUWVBFPiB7XG4gIGNvZGU6IENPREU7XG4gIG5hbWU6IE5BTUU7XG4gIHBhcnNlOiAodmFsdWU6IEpTT05WYWx1ZSkgPT4geyB0eXBlOiBOQU1FOyB2YWx1ZTogVFlQRSB9O1xufVxuXG5jb25zdCB0ZXh0U3RyZWFtUGFydDogU3RyZWFtUGFydDwnMCcsICd0ZXh0Jywgc3RyaW5nPiA9IHtcbiAgY29kZTogJzAnLFxuICBuYW1lOiAndGV4dCcsXG4gIHBhcnNlOiAodmFsdWU6IEpTT05WYWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1widGV4dFwiIHBhcnRzIGV4cGVjdCBhIHN0cmluZyB2YWx1ZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9O1xuICB9LFxufTtcblxuY29uc3QgZnVuY3Rpb25DYWxsU3RyZWFtUGFydDogU3RyZWFtUGFydDxcbiAgJzEnLFxuICAnZnVuY3Rpb25fY2FsbCcsXG4gIHsgZnVuY3Rpb25fY2FsbDogRnVuY3Rpb25DYWxsIH1cbj4gPSB7XG4gIGNvZGU6ICcxJyxcbiAgbmFtZTogJ2Z1bmN0aW9uX2NhbGwnLFxuICBwYXJzZTogKHZhbHVlOiBKU09OVmFsdWUpID0+IHtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8XG4gICAgICAhKCdmdW5jdGlvbl9jYWxsJyBpbiB2YWx1ZSkgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZS5mdW5jdGlvbl9jYWxsICE9PSAnb2JqZWN0JyB8fFxuICAgICAgdmFsdWUuZnVuY3Rpb25fY2FsbCA9PSBudWxsIHx8XG4gICAgICAhKCduYW1lJyBpbiB2YWx1ZS5mdW5jdGlvbl9jYWxsKSB8fFxuICAgICAgISgnYXJndW1lbnRzJyBpbiB2YWx1ZS5mdW5jdGlvbl9jYWxsKSB8fFxuICAgICAgdHlwZW9mIHZhbHVlLmZ1bmN0aW9uX2NhbGwubmFtZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZS5mdW5jdGlvbl9jYWxsLmFyZ3VtZW50cyAhPT0gJ3N0cmluZydcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wiZnVuY3Rpb25fY2FsbFwiIHBhcnRzIGV4cGVjdCBhbiBvYmplY3Qgd2l0aCBhIFwiZnVuY3Rpb25fY2FsbFwiIHByb3BlcnR5LicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZnVuY3Rpb25fY2FsbCcsXG4gICAgICB2YWx1ZTogdmFsdWUgYXMgdW5rbm93biBhcyB7IGZ1bmN0aW9uX2NhbGw6IEZ1bmN0aW9uQ2FsbCB9LFxuICAgIH07XG4gIH0sXG59O1xuXG5jb25zdCBkYXRhU3RyZWFtUGFydDogU3RyZWFtUGFydDwnMicsICdkYXRhJywgQXJyYXk8SlNPTlZhbHVlPj4gPSB7XG4gIGNvZGU6ICcyJyxcbiAgbmFtZTogJ2RhdGEnLFxuICBwYXJzZTogKHZhbHVlOiBKU09OVmFsdWUpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZGF0YVwiIHBhcnRzIGV4cGVjdCBhbiBhcnJheSB2YWx1ZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyB0eXBlOiAnZGF0YScsIHZhbHVlIH07XG4gIH0sXG59O1xuXG5jb25zdCBlcnJvclN0cmVhbVBhcnQ6IFN0cmVhbVBhcnQ8JzMnLCAnZXJyb3InLCBzdHJpbmc+ID0ge1xuICBjb2RlOiAnMycsXG4gIG5hbWU6ICdlcnJvcicsXG4gIHBhcnNlOiAodmFsdWU6IEpTT05WYWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZXJyb3JcIiBwYXJ0cyBleHBlY3QgYSBzdHJpbmcgdmFsdWUuJyk7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6ICdlcnJvcicsIHZhbHVlIH07XG4gIH0sXG59O1xuXG5jb25zdCBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydDogU3RyZWFtUGFydDxcbiAgJzQnLFxuICAnYXNzaXN0YW50X21lc3NhZ2UnLFxuICBBc3Npc3RhbnRNZXNzYWdlXG4+ID0ge1xuICBjb2RlOiAnNCcsXG4gIG5hbWU6ICdhc3Npc3RhbnRfbWVzc2FnZScsXG4gIHBhcnNlOiAodmFsdWU6IEpTT05WYWx1ZSkgPT4ge1xuICAgIGlmIChcbiAgICAgIHZhbHVlID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHxcbiAgICAgICEoJ2lkJyBpbiB2YWx1ZSkgfHxcbiAgICAgICEoJ3JvbGUnIGluIHZhbHVlKSB8fFxuICAgICAgISgnY29udGVudCcgaW4gdmFsdWUpIHx8XG4gICAgICB0eXBlb2YgdmFsdWUuaWQgIT09ICdzdHJpbmcnIHx8XG4gICAgICB0eXBlb2YgdmFsdWUucm9sZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgIHZhbHVlLnJvbGUgIT09ICdhc3Npc3RhbnQnIHx8XG4gICAgICAhQXJyYXkuaXNBcnJheSh2YWx1ZS5jb250ZW50KSB8fFxuICAgICAgIXZhbHVlLmNvbnRlbnQuZXZlcnkoXG4gICAgICAgIGl0ZW0gPT5cbiAgICAgICAgICBpdGVtICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAndHlwZScgaW4gaXRlbSAmJlxuICAgICAgICAgIGl0ZW0udHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICAgJ3RleHQnIGluIGl0ZW0gJiZcbiAgICAgICAgICBpdGVtLnRleHQgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiBpdGVtLnRleHQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgJ3ZhbHVlJyBpbiBpdGVtLnRleHQgJiZcbiAgICAgICAgICB0eXBlb2YgaXRlbS50ZXh0LnZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wiYXNzaXN0YW50X21lc3NhZ2VcIiBwYXJ0cyBleHBlY3QgYW4gb2JqZWN0IHdpdGggYW4gXCJpZFwiLCBcInJvbGVcIiwgYW5kIFwiY29udGVudFwiIHByb3BlcnR5LicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnYXNzaXN0YW50X21lc3NhZ2UnLFxuICAgICAgdmFsdWU6IHZhbHVlIGFzIEFzc2lzdGFudE1lc3NhZ2UsXG4gICAgfTtcbiAgfSxcbn07XG5cbmNvbnN0IGFzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydDogU3RyZWFtUGFydDxcbiAgJzUnLFxuICAnYXNzaXN0YW50X2NvbnRyb2xfZGF0YScsXG4gIHtcbiAgICB0aHJlYWRJZDogc3RyaW5nO1xuICAgIG1lc3NhZ2VJZDogc3RyaW5nO1xuICB9XG4+ID0ge1xuICBjb2RlOiAnNScsXG4gIG5hbWU6ICdhc3Npc3RhbnRfY29udHJvbF9kYXRhJyxcbiAgcGFyc2U6ICh2YWx1ZTogSlNPTlZhbHVlKSA9PiB7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fFxuICAgICAgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fFxuICAgICAgISgndGhyZWFkSWQnIGluIHZhbHVlKSB8fFxuICAgICAgISgnbWVzc2FnZUlkJyBpbiB2YWx1ZSkgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZS50aHJlYWRJZCAhPT0gJ3N0cmluZycgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZS5tZXNzYWdlSWQgIT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdcImFzc2lzdGFudF9jb250cm9sX2RhdGFcIiBwYXJ0cyBleHBlY3QgYW4gb2JqZWN0IHdpdGggYSBcInRocmVhZElkXCIgYW5kIFwibWVzc2FnZUlkXCIgcHJvcGVydHkuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdhc3Npc3RhbnRfY29udHJvbF9kYXRhJyxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHRocmVhZElkOiB2YWx1ZS50aHJlYWRJZCxcbiAgICAgICAgbWVzc2FnZUlkOiB2YWx1ZS5tZXNzYWdlSWQsXG4gICAgICB9LFxuICAgIH07XG4gIH0sXG59O1xuXG5jb25zdCBkYXRhTWVzc2FnZVN0cmVhbVBhcnQ6IFN0cmVhbVBhcnQ8JzYnLCAnZGF0YV9tZXNzYWdlJywgRGF0YU1lc3NhZ2U+ID0ge1xuICBjb2RlOiAnNicsXG4gIG5hbWU6ICdkYXRhX21lc3NhZ2UnLFxuICBwYXJzZTogKHZhbHVlOiBKU09OVmFsdWUpID0+IHtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8XG4gICAgICAhKCdyb2xlJyBpbiB2YWx1ZSkgfHxcbiAgICAgICEoJ2RhdGEnIGluIHZhbHVlKSB8fFxuICAgICAgdHlwZW9mIHZhbHVlLnJvbGUgIT09ICdzdHJpbmcnIHx8XG4gICAgICB2YWx1ZS5yb2xlICE9PSAnZGF0YSdcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wiZGF0YV9tZXNzYWdlXCIgcGFydHMgZXhwZWN0IGFuIG9iamVjdCB3aXRoIGEgXCJyb2xlXCIgYW5kIFwiZGF0YVwiIHByb3BlcnR5LicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZGF0YV9tZXNzYWdlJyxcbiAgICAgIHZhbHVlOiB2YWx1ZSBhcyBEYXRhTWVzc2FnZSxcbiAgICB9O1xuICB9LFxufTtcblxuY29uc3QgdG9vbENhbGxzU3RyZWFtUGFydDogU3RyZWFtUGFydDxcbiAgJzcnLFxuICAndG9vbF9jYWxscycsXG4gIHsgdG9vbF9jYWxsczogVG9vbENhbGxbXSB9XG4+ID0ge1xuICBjb2RlOiAnNycsXG4gIG5hbWU6ICd0b29sX2NhbGxzJyxcbiAgcGFyc2U6ICh2YWx1ZTogSlNPTlZhbHVlKSA9PiB7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fFxuICAgICAgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fFxuICAgICAgISgndG9vbF9jYWxscycgaW4gdmFsdWUpIHx8XG4gICAgICB0eXBlb2YgdmFsdWUudG9vbF9jYWxscyAhPT0gJ29iamVjdCcgfHxcbiAgICAgIHZhbHVlLnRvb2xfY2FsbHMgPT0gbnVsbCB8fFxuICAgICAgIUFycmF5LmlzQXJyYXkodmFsdWUudG9vbF9jYWxscykgfHxcbiAgICAgIHZhbHVlLnRvb2xfY2FsbHMuc29tZShcbiAgICAgICAgdGMgPT5cbiAgICAgICAgICB0YyA9PSBudWxsIHx8XG4gICAgICAgICAgdHlwZW9mIHRjICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICAgICEoJ2lkJyBpbiB0YykgfHxcbiAgICAgICAgICB0eXBlb2YgdGMuaWQgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgISgndHlwZScgaW4gdGMpIHx8XG4gICAgICAgICAgdHlwZW9mIHRjLnR5cGUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgISgnZnVuY3Rpb24nIGluIHRjKSB8fFxuICAgICAgICAgIHRjLmZ1bmN0aW9uID09IG51bGwgfHxcbiAgICAgICAgICB0eXBlb2YgdGMuZnVuY3Rpb24gIT09ICdvYmplY3QnIHx8XG4gICAgICAgICAgISgnYXJndW1lbnRzJyBpbiB0Yy5mdW5jdGlvbikgfHxcbiAgICAgICAgICB0eXBlb2YgdGMuZnVuY3Rpb24ubmFtZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICB0eXBlb2YgdGMuZnVuY3Rpb24uYXJndW1lbnRzICE9PSAnc3RyaW5nJyxcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1widG9vbF9jYWxsc1wiIHBhcnRzIGV4cGVjdCBhbiBvYmplY3Qgd2l0aCBhIFRvb2xDYWxsUGF5bG9hZC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3Rvb2xfY2FsbHMnLFxuICAgICAgdmFsdWU6IHZhbHVlIGFzIHVua25vd24gYXMgeyB0b29sX2NhbGxzOiBUb29sQ2FsbFtdIH0sXG4gICAgfTtcbiAgfSxcbn07XG5cbmNvbnN0IG1lc3NhZ2VBbm5vdGF0aW9uc1N0cmVhbVBhcnQ6IFN0cmVhbVBhcnQ8XG4gICc4JyxcbiAgJ21lc3NhZ2VfYW5ub3RhdGlvbnMnLFxuICBBcnJheTxKU09OVmFsdWU+XG4+ID0ge1xuICBjb2RlOiAnOCcsXG4gIG5hbWU6ICdtZXNzYWdlX2Fubm90YXRpb25zJyxcbiAgcGFyc2U6ICh2YWx1ZTogSlNPTlZhbHVlKSA9PiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIm1lc3NhZ2VfYW5ub3RhdGlvbnNcIiBwYXJ0cyBleHBlY3QgYW4gYXJyYXkgdmFsdWUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdHlwZTogJ21lc3NhZ2VfYW5ub3RhdGlvbnMnLCB2YWx1ZSB9O1xuICB9LFxufTtcblxuY29uc3QgdG9vbENhbGxTdHJlYW1QYXJ0OiBTdHJlYW1QYXJ0PFxuICAnOScsXG4gICd0b29sX2NhbGwnLFxuICBDb3JlVG9vbENhbGw8c3RyaW5nLCBhbnk+XG4+ID0ge1xuICBjb2RlOiAnOScsXG4gIG5hbWU6ICd0b29sX2NhbGwnLFxuICBwYXJzZTogKHZhbHVlOiBKU09OVmFsdWUpID0+IHtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSA9PSBudWxsIHx8XG4gICAgICB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8XG4gICAgICAhKCd0b29sQ2FsbElkJyBpbiB2YWx1ZSkgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZS50b29sQ2FsbElkICE9PSAnc3RyaW5nJyB8fFxuICAgICAgISgndG9vbE5hbWUnIGluIHZhbHVlKSB8fFxuICAgICAgdHlwZW9mIHZhbHVlLnRvb2xOYW1lICE9PSAnc3RyaW5nJyB8fFxuICAgICAgISgnYXJncycgaW4gdmFsdWUpIHx8XG4gICAgICB0eXBlb2YgdmFsdWUuYXJncyAhPT0gJ29iamVjdCdcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1widG9vbF9jYWxsXCIgcGFydHMgZXhwZWN0IGFuIG9iamVjdCB3aXRoIGEgXCJ0b29sQ2FsbElkXCIsIFwidG9vbE5hbWVcIiwgYW5kIFwiYXJnc1wiIHByb3BlcnR5LicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndG9vbF9jYWxsJyxcbiAgICAgIHZhbHVlOiB2YWx1ZSBhcyB1bmtub3duIGFzIENvcmVUb29sQ2FsbDxzdHJpbmcsIGFueT4sXG4gICAgfTtcbiAgfSxcbn07XG5cbmNvbnN0IHRvb2xSZXN1bHRTdHJlYW1QYXJ0OiBTdHJlYW1QYXJ0PFxuICAnYScsXG4gICd0b29sX3Jlc3VsdCcsXG4gIENvcmVUb29sUmVzdWx0PHN0cmluZywgYW55LCBhbnk+XG4+ID0ge1xuICBjb2RlOiAnYScsXG4gIG5hbWU6ICd0b29sX3Jlc3VsdCcsXG4gIHBhcnNlOiAodmFsdWU6IEpTT05WYWx1ZSkgPT4ge1xuICAgIGlmIChcbiAgICAgIHZhbHVlID09IG51bGwgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHxcbiAgICAgICEoJ3Rvb2xDYWxsSWQnIGluIHZhbHVlKSB8fFxuICAgICAgdHlwZW9mIHZhbHVlLnRvb2xDYWxsSWQgIT09ICdzdHJpbmcnIHx8XG4gICAgICAhKCd0b29sTmFtZScgaW4gdmFsdWUpIHx8XG4gICAgICB0eXBlb2YgdmFsdWUudG9vbE5hbWUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAhKCdhcmdzJyBpbiB2YWx1ZSkgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZS5hcmdzICE9PSAnb2JqZWN0JyB8fFxuICAgICAgISgncmVzdWx0JyBpbiB2YWx1ZSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1widG9vbF9yZXN1bHRcIiBwYXJ0cyBleHBlY3QgYW4gb2JqZWN0IHdpdGggYSBcInRvb2xDYWxsSWRcIiwgXCJ0b29sTmFtZVwiLCBcImFyZ3NcIiwgYW5kIFwicmVzdWx0XCIgcHJvcGVydHkuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICd0b29sX3Jlc3VsdCcsXG4gICAgICB2YWx1ZTogdmFsdWUgYXMgdW5rbm93biBhcyBDb3JlVG9vbFJlc3VsdDxzdHJpbmcsIGFueSwgYW55PixcbiAgICB9O1xuICB9LFxufTtcblxuY29uc3Qgc3RyZWFtUGFydHMgPSBbXG4gIHRleHRTdHJlYW1QYXJ0LFxuICBmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0LFxuICBkYXRhU3RyZWFtUGFydCxcbiAgZXJyb3JTdHJlYW1QYXJ0LFxuICBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydCxcbiAgYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LFxuICBkYXRhTWVzc2FnZVN0cmVhbVBhcnQsXG4gIHRvb2xDYWxsc1N0cmVhbVBhcnQsXG4gIG1lc3NhZ2VBbm5vdGF0aW9uc1N0cmVhbVBhcnQsXG4gIHRvb2xDYWxsU3RyZWFtUGFydCxcbiAgdG9vbFJlc3VsdFN0cmVhbVBhcnQsXG5dIGFzIGNvbnN0O1xuXG4vLyB1bmlvbiB0eXBlIG9mIGFsbCBzdHJlYW0gcGFydHNcbnR5cGUgU3RyZWFtUGFydHMgPVxuICB8IHR5cGVvZiB0ZXh0U3RyZWFtUGFydFxuICB8IHR5cGVvZiBmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0XG4gIHwgdHlwZW9mIGRhdGFTdHJlYW1QYXJ0XG4gIHwgdHlwZW9mIGVycm9yU3RyZWFtUGFydFxuICB8IHR5cGVvZiBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydFxuICB8IHR5cGVvZiBhc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnRcbiAgfCB0eXBlb2YgZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0XG4gIHwgdHlwZW9mIHRvb2xDYWxsc1N0cmVhbVBhcnRcbiAgfCB0eXBlb2YgbWVzc2FnZUFubm90YXRpb25zU3RyZWFtUGFydFxuICB8IHR5cGVvZiB0b29sQ2FsbFN0cmVhbVBhcnRcbiAgfCB0eXBlb2YgdG9vbFJlc3VsdFN0cmVhbVBhcnQ7XG5cbi8qKlxuICogTWFwcyB0aGUgdHlwZSBvZiBhIHN0cmVhbSBwYXJ0IHRvIGl0cyB2YWx1ZSB0eXBlLlxuICovXG50eXBlIFN0cmVhbVBhcnRWYWx1ZVR5cGUgPSB7XG4gIFtQIGluIFN0cmVhbVBhcnRzIGFzIFBbJ25hbWUnXV06IFJldHVyblR5cGU8UFsncGFyc2UnXT5bJ3ZhbHVlJ107XG59O1xuXG5leHBvcnQgdHlwZSBTdHJlYW1QYXJ0VHlwZSA9XG4gIHwgUmV0dXJuVHlwZTx0eXBlb2YgdGV4dFN0cmVhbVBhcnQucGFyc2U+XG4gIHwgUmV0dXJuVHlwZTx0eXBlb2YgZnVuY3Rpb25DYWxsU3RyZWFtUGFydC5wYXJzZT5cbiAgfCBSZXR1cm5UeXBlPHR5cGVvZiBkYXRhU3RyZWFtUGFydC5wYXJzZT5cbiAgfCBSZXR1cm5UeXBlPHR5cGVvZiBlcnJvclN0cmVhbVBhcnQucGFyc2U+XG4gIHwgUmV0dXJuVHlwZTx0eXBlb2YgYXNzaXN0YW50TWVzc2FnZVN0cmVhbVBhcnQucGFyc2U+XG4gIHwgUmV0dXJuVHlwZTx0eXBlb2YgYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LnBhcnNlPlxuICB8IFJldHVyblR5cGU8dHlwZW9mIGRhdGFNZXNzYWdlU3RyZWFtUGFydC5wYXJzZT5cbiAgfCBSZXR1cm5UeXBlPHR5cGVvZiB0b29sQ2FsbHNTdHJlYW1QYXJ0LnBhcnNlPlxuICB8IFJldHVyblR5cGU8dHlwZW9mIG1lc3NhZ2VBbm5vdGF0aW9uc1N0cmVhbVBhcnQucGFyc2U+XG4gIHwgUmV0dXJuVHlwZTx0eXBlb2YgdG9vbENhbGxTdHJlYW1QYXJ0LnBhcnNlPlxuICB8IFJldHVyblR5cGU8dHlwZW9mIHRvb2xSZXN1bHRTdHJlYW1QYXJ0LnBhcnNlPjtcblxuZXhwb3J0IGNvbnN0IHN0cmVhbVBhcnRzQnlDb2RlID0ge1xuICBbdGV4dFN0cmVhbVBhcnQuY29kZV06IHRleHRTdHJlYW1QYXJ0LFxuICBbZnVuY3Rpb25DYWxsU3RyZWFtUGFydC5jb2RlXTogZnVuY3Rpb25DYWxsU3RyZWFtUGFydCxcbiAgW2RhdGFTdHJlYW1QYXJ0LmNvZGVdOiBkYXRhU3RyZWFtUGFydCxcbiAgW2Vycm9yU3RyZWFtUGFydC5jb2RlXTogZXJyb3JTdHJlYW1QYXJ0LFxuICBbYXNzaXN0YW50TWVzc2FnZVN0cmVhbVBhcnQuY29kZV06IGFzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0LFxuICBbYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0LmNvZGVdOiBhc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnQsXG4gIFtkYXRhTWVzc2FnZVN0cmVhbVBhcnQuY29kZV06IGRhdGFNZXNzYWdlU3RyZWFtUGFydCxcbiAgW3Rvb2xDYWxsc1N0cmVhbVBhcnQuY29kZV06IHRvb2xDYWxsc1N0cmVhbVBhcnQsXG4gIFttZXNzYWdlQW5ub3RhdGlvbnNTdHJlYW1QYXJ0LmNvZGVdOiBtZXNzYWdlQW5ub3RhdGlvbnNTdHJlYW1QYXJ0LFxuICBbdG9vbENhbGxTdHJlYW1QYXJ0LmNvZGVdOiB0b29sQ2FsbFN0cmVhbVBhcnQsXG4gIFt0b29sUmVzdWx0U3RyZWFtUGFydC5jb2RlXTogdG9vbFJlc3VsdFN0cmVhbVBhcnQsXG59IGFzIGNvbnN0O1xuXG4vKipcbiAqIFRoZSBtYXAgb2YgcHJlZml4ZXMgZm9yIGRhdGEgaW4gdGhlIHN0cmVhbVxuICpcbiAqIC0gMDogVGV4dCBmcm9tIHRoZSBMTE0gcmVzcG9uc2VcbiAqIC0gMTogKE9wZW5BSSkgZnVuY3Rpb25fY2FsbCByZXNwb25zZXNcbiAqIC0gMjogY3VzdG9tIEpTT04gYWRkZWQgYnkgdGhlIHVzZXIgdXNpbmcgYERhdGFgXG4gKiAtIDY6IChPcGVuQUkpIHRvb2xfY2FsbCByZXNwb25zZXNcbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgXG4gKiAwOlZlcmNlbFxuICogMDonc1xuICogMDogQUlcbiAqIDA6IEFJXG4gKiAwOiBTREtcbiAqIDA6IGlzIGdyZWF0XG4gKiAwOiFcbiAqIDI6IHsgXCJzb21lSnNvblwiOiBcInZhbHVlXCIgfVxuICogMToge1wiZnVuY3Rpb25fY2FsbFwiOiB7XCJuYW1lXCI6IFwiZ2V0X2N1cnJlbnRfd2VhdGhlclwiLCBcImFyZ3VtZW50c1wiOiBcIntcXFxcblxcXFxcImxvY2F0aW9uXFxcXFwiOiBcXFxcXCJDaGFybG90dGVzdmlsbGUsIFZpcmdpbmlhXFxcXFwiLFxcXFxuXFxcXFwiZm9ybWF0XFxcXFwiOiBcXFxcXCJjZWxzaXVzXFxcXFwiXFxcXG59XCJ9fVxuICogNjoge1widG9vbF9jYWxsXCI6IHtcImlkXCI6IFwidG9vbF8wXCIsIFwidHlwZVwiOiBcImZ1bmN0aW9uXCIsIFwiZnVuY3Rpb25cIjoge1wibmFtZVwiOiBcImdldF9jdXJyZW50X3dlYXRoZXJcIiwgXCJhcmd1bWVudHNcIjogXCJ7XFxcXG5cXFxcXCJsb2NhdGlvblxcXFxcIjogXFxcXFwiQ2hhcmxvdHRlc3ZpbGxlLCBWaXJnaW5pYVxcXFxcIixcXFxcblxcXFxcImZvcm1hdFxcXFxcIjogXFxcXFwiY2Vsc2l1c1xcXFxcIlxcXFxufVwifX19XG4gKmBgYFxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtU3RyaW5nUHJlZml4ZXMgPSB7XG4gIFt0ZXh0U3RyZWFtUGFydC5uYW1lXTogdGV4dFN0cmVhbVBhcnQuY29kZSxcbiAgW2Z1bmN0aW9uQ2FsbFN0cmVhbVBhcnQubmFtZV06IGZ1bmN0aW9uQ2FsbFN0cmVhbVBhcnQuY29kZSxcbiAgW2RhdGFTdHJlYW1QYXJ0Lm5hbWVdOiBkYXRhU3RyZWFtUGFydC5jb2RlLFxuICBbZXJyb3JTdHJlYW1QYXJ0Lm5hbWVdOiBlcnJvclN0cmVhbVBhcnQuY29kZSxcbiAgW2Fzc2lzdGFudE1lc3NhZ2VTdHJlYW1QYXJ0Lm5hbWVdOiBhc3Npc3RhbnRNZXNzYWdlU3RyZWFtUGFydC5jb2RlLFxuICBbYXNzaXN0YW50Q29udHJvbERhdGFTdHJlYW1QYXJ0Lm5hbWVdOiBhc3Npc3RhbnRDb250cm9sRGF0YVN0cmVhbVBhcnQuY29kZSxcbiAgW2RhdGFNZXNzYWdlU3RyZWFtUGFydC5uYW1lXTogZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0LmNvZGUsXG4gIFt0b29sQ2FsbHNTdHJlYW1QYXJ0Lm5hbWVdOiB0b29sQ2FsbHNTdHJlYW1QYXJ0LmNvZGUsXG4gIFttZXNzYWdlQW5ub3RhdGlvbnNTdHJlYW1QYXJ0Lm5hbWVdOiBtZXNzYWdlQW5ub3RhdGlvbnNTdHJlYW1QYXJ0LmNvZGUsXG4gIFt0b29sQ2FsbFN0cmVhbVBhcnQubmFtZV06IHRvb2xDYWxsU3RyZWFtUGFydC5jb2RlLFxuICBbdG9vbFJlc3VsdFN0cmVhbVBhcnQubmFtZV06IHRvb2xSZXN1bHRTdHJlYW1QYXJ0LmNvZGUsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgdmFsaWRDb2RlcyA9IHN0cmVhbVBhcnRzLm1hcChwYXJ0ID0+IHBhcnQuY29kZSk7XG5cbi8qKlxuUGFyc2VzIGEgc3RyZWFtIHBhcnQgZnJvbSBhIHN0cmluZy5cblxuQHBhcmFtIGxpbmUgVGhlIHN0cmluZyB0byBwYXJzZS5cbkByZXR1cm5zIFRoZSBwYXJzZWQgc3RyZWFtIHBhcnQuXG5AdGhyb3dzIEFuIGVycm9yIGlmIHRoZSBzdHJpbmcgY2Fubm90IGJlIHBhcnNlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlU3RyZWFtUGFydCA9IChsaW5lOiBzdHJpbmcpOiBTdHJlYW1QYXJ0VHlwZSA9PiB7XG4gIGNvbnN0IGZpcnN0U2VwYXJhdG9ySW5kZXggPSBsaW5lLmluZGV4T2YoJzonKTtcblxuICBpZiAoZmlyc3RTZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzdHJlYW0gc3RyaW5nLiBObyBzZXBhcmF0b3IgZm91bmQuJyk7XG4gIH1cblxuICBjb25zdCBwcmVmaXggPSBsaW5lLnNsaWNlKDAsIGZpcnN0U2VwYXJhdG9ySW5kZXgpO1xuXG4gIGlmICghdmFsaWRDb2Rlcy5pbmNsdWRlcyhwcmVmaXggYXMga2V5b2YgdHlwZW9mIHN0cmVhbVBhcnRzQnlDb2RlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIHN0cmVhbSBzdHJpbmcuIEludmFsaWQgY29kZSAke3ByZWZpeH0uYCk7XG4gIH1cblxuICBjb25zdCBjb2RlID0gcHJlZml4IGFzIGtleW9mIHR5cGVvZiBzdHJlYW1QYXJ0c0J5Q29kZTtcblxuICBjb25zdCB0ZXh0VmFsdWUgPSBsaW5lLnNsaWNlKGZpcnN0U2VwYXJhdG9ySW5kZXggKyAxKTtcbiAgY29uc3QganNvblZhbHVlOiBKU09OVmFsdWUgPSBKU09OLnBhcnNlKHRleHRWYWx1ZSk7XG5cbiAgcmV0dXJuIHN0cmVhbVBhcnRzQnlDb2RlW2NvZGVdLnBhcnNlKGpzb25WYWx1ZSk7XG59O1xuXG4vKipcblByZXBlbmRzIGEgc3RyaW5nIHdpdGggYSBwcmVmaXggZnJvbSB0aGUgYFN0cmVhbUNodW5rUHJlZml4ZXNgLCBKU09OLWlmaWVzIGl0LFxuYW5kIGFwcGVuZHMgYSBuZXcgbGluZS5cblxuSXQgZW5zdXJlcyB0eXBlLXNhZmV0eSBmb3IgdGhlIHBhcnQgdHlwZSBhbmQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRTdHJlYW1QYXJ0PFQgZXh0ZW5kcyBrZXlvZiBTdHJlYW1QYXJ0VmFsdWVUeXBlPihcbiAgdHlwZTogVCxcbiAgdmFsdWU6IFN0cmVhbVBhcnRWYWx1ZVR5cGVbVF0sXG4pOiBTdHJlYW1TdHJpbmcge1xuICBjb25zdCBzdHJlYW1QYXJ0ID0gc3RyZWFtUGFydHMuZmluZChwYXJ0ID0+IHBhcnQubmFtZSA9PT0gdHlwZSk7XG5cbiAgaWYgKCFzdHJlYW1QYXJ0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHN0cmVhbSBwYXJ0IHR5cGU6ICR7dHlwZX1gKTtcbiAgfVxuXG4gIHJldHVybiBgJHtzdHJlYW1QYXJ0LmNvZGV9OiR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfVxcbmA7XG59XG4iLCJpbXBvcnQgeyBTdHJlYW1QYXJ0VHlwZSwgcGFyc2VTdHJlYW1QYXJ0IH0gZnJvbSAnLi9zdHJlYW0tcGFydHMnO1xuXG5jb25zdCBORVdMSU5FID0gJ1xcbicuY2hhckNvZGVBdCgwKTtcblxuLy8gY29uY2F0ZW5hdGVzIGFsbCB0aGUgY2h1bmtzIGludG8gYSBzaW5nbGUgVWludDhBcnJheVxuZnVuY3Rpb24gY29uY2F0Q2h1bmtzKGNodW5rczogVWludDhBcnJheVtdLCB0b3RhbExlbmd0aDogbnVtYmVyKSB7XG4gIGNvbnN0IGNvbmNhdGVuYXRlZENodW5rcyA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBjaHVuayBvZiBjaHVua3MpIHtcbiAgICBjb25jYXRlbmF0ZWRDaHVua3Muc2V0KGNodW5rLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBjaHVuay5sZW5ndGg7XG4gIH1cbiAgY2h1bmtzLmxlbmd0aCA9IDA7XG5cbiAgcmV0dXJuIGNvbmNhdGVuYXRlZENodW5rcztcbn1cblxuLyoqXG5Db252ZXJ0cyBhIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlciBpbnRvIGFuIGFzeW5jIGdlbmVyYXRvciB0aGF0IHlpZWxkc1xuU3RyZWFtUGFydCBvYmplY3RzLlxuXG5AcGFyYW0gcmVhZGVyIFxuICAgICAgIFJlYWRlciBmb3IgdGhlIHN0cmVhbSB0byByZWFkIGZyb20uXG5AcGFyYW0gaXNBYm9ydGVkXG4gICAgICAgT3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgdGhlIHJlcXVlc3QgaGFzIGJlZW4gYWJvcnRlZC5cbiAgICAgICBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlLCB0aGUgZ2VuZXJhdG9yIHdpbGwgc3RvcCByZWFkaW5nIHRoZSBzdHJlYW0uXG4gICAgICAgSWYgdGhlIGZ1bmN0aW9uIGlzIG5vdCBwcm92aWRlZCwgdGhlIGdlbmVyYXRvciB3aWxsIG5vdCBzdG9wIHJlYWRpbmcgdGhlIHN0cmVhbS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiByZWFkRGF0YVN0cmVhbShcbiAgcmVhZGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXI8VWludDhBcnJheT4sXG4gIHtcbiAgICBpc0Fib3J0ZWQsXG4gIH06IHtcbiAgICBpc0Fib3J0ZWQ/OiAoKSA9PiBib29sZWFuO1xuICB9ID0ge30sXG4pOiBBc3luY0dlbmVyYXRvcjxTdHJlYW1QYXJ0VHlwZT4ge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBub3RlOiB0aGlzIHNsaWdodGx5IG1vcmUgY29tcGxleCBhbGdvcml0aG0gaXMgcmVxdWlyZWRcbiAgLy8gdG8gcGFzcyB0aGUgdGVzdHMgaW4gdGhlIGVkZ2UgZW52aXJvbm1lbnQuXG5cbiAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICBjb25zdCBjaHVua3M6IFVpbnQ4QXJyYXlbXSA9IFtdO1xuICBsZXQgdG90YWxMZW5ndGggPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgY2h1bmtzLnB1c2godmFsdWUpO1xuICAgICAgdG90YWxMZW5ndGggKz0gdmFsdWUubGVuZ3RoO1xuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdICE9PSBORVdMSU5FKSB7XG4gICAgICAgIC8vIGlmIHRoZSBsYXN0IGNoYXJhY3RlciBpcyBub3QgYSBuZXdsaW5lLCB3ZSBoYXZlIG5vdCByZWFkIHRoZSB3aG9sZSBKU09OIHZhbHVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaHVua3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBicmVhazsgLy8gd2UgaGF2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHN0cmVhbVxuICAgIH1cblxuICAgIGNvbnN0IGNvbmNhdGVuYXRlZENodW5rcyA9IGNvbmNhdENodW5rcyhjaHVua3MsIHRvdGFsTGVuZ3RoKTtcbiAgICB0b3RhbExlbmd0aCA9IDA7XG5cbiAgICBjb25zdCBzdHJlYW1QYXJ0cyA9IGRlY29kZXJcbiAgICAgIC5kZWNvZGUoY29uY2F0ZW5hdGVkQ2h1bmtzLCB7IHN0cmVhbTogdHJ1ZSB9KVxuICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgLmZpbHRlcihsaW5lID0+IGxpbmUgIT09ICcnKSAvLyBzcGxpdHRpbmcgbGVhdmVzIGFuIGVtcHR5IHN0cmluZyBhdCB0aGUgZW5kXG4gICAgICAubWFwKHBhcnNlU3RyZWFtUGFydCk7XG5cbiAgICBmb3IgKGNvbnN0IHN0cmVhbVBhcnQgb2Ygc3RyZWFtUGFydHMpIHtcbiAgICAgIHlpZWxkIHN0cmVhbVBhcnQ7XG4gICAgfVxuXG4gICAgLy8gVGhlIHJlcXVlc3QgaGFzIGJlZW4gYWJvcnRlZCwgc3RvcCByZWFkaW5nIHRoZSBzdHJlYW0uXG4gICAgaWYgKGlzQWJvcnRlZD8uKCkpIHtcbiAgICAgIHJlYWRlci5jYW5jZWwoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2VuZXJhdGVJZCBhcyBnZW5lcmF0ZUlkRnVuY3Rpb24gfSBmcm9tICcuL2dlbmVyYXRlLWlkJztcbmltcG9ydCB7IHJlYWREYXRhU3RyZWFtIH0gZnJvbSAnLi9yZWFkLWRhdGEtc3RyZWFtJztcbmltcG9ydCB0eXBlIHtcbiAgRnVuY3Rpb25DYWxsLFxuICBKU09OVmFsdWUsXG4gIE1lc3NhZ2UsXG4gIFRvb2xDYWxsLFxuICBVc2VDaGF0T3B0aW9ucyxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgUHJlZml4TWFwID0ge1xuICB0ZXh0PzogTWVzc2FnZTtcbiAgLy8gQGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb25fY2FsbD86IE1lc3NhZ2UgJiB7XG4gICAgcm9sZTogJ2Fzc2lzdGFudCc7XG4gICAgZnVuY3Rpb25fY2FsbDogRnVuY3Rpb25DYWxsO1xuICB9O1xuICAvLyBAZGVwcmVjYXRlZFxuICB0b29sX2NhbGxzPzogTWVzc2FnZSAmIHtcbiAgICByb2xlOiAnYXNzaXN0YW50JztcbiAgICB0b29sX2NhbGxzOiBUb29sQ2FsbFtdO1xuICB9O1xuICBkYXRhOiBKU09OVmFsdWVbXTtcbn07XG5cbmZ1bmN0aW9uIGFzc2lnbkFubm90YXRpb25zVG9NZXNzYWdlPFQgZXh0ZW5kcyBNZXNzYWdlIHwgbnVsbCB8IHVuZGVmaW5lZD4oXG4gIG1lc3NhZ2U6IFQsXG4gIGFubm90YXRpb25zOiBKU09OVmFsdWVbXSB8IHVuZGVmaW5lZCxcbik6IFQge1xuICBpZiAoIW1lc3NhZ2UgfHwgIWFubm90YXRpb25zIHx8ICFhbm5vdGF0aW9ucy5sZW5ndGgpIHJldHVybiBtZXNzYWdlO1xuICByZXR1cm4geyAuLi5tZXNzYWdlLCBhbm5vdGF0aW9uczogWy4uLmFubm90YXRpb25zXSB9IGFzIFQ7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUNvbXBsZXhSZXNwb25zZSh7XG4gIHJlYWRlcixcbiAgYWJvcnRDb250cm9sbGVyUmVmLFxuICB1cGRhdGUsXG4gIG9uVG9vbENhbGwsXG4gIG9uRmluaXNoLFxuICBnZW5lcmF0ZUlkID0gZ2VuZXJhdGVJZEZ1bmN0aW9uLFxuICBnZXRDdXJyZW50RGF0ZSA9ICgpID0+IG5ldyBEYXRlKCksXG59OiB7XG4gIHJlYWRlcjogUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyPFVpbnQ4QXJyYXk+O1xuICBhYm9ydENvbnRyb2xsZXJSZWY/OiB7XG4gICAgY3VycmVudDogQWJvcnRDb250cm9sbGVyIHwgbnVsbDtcbiAgfTtcbiAgdXBkYXRlOiAobWVyZ2VkOiBNZXNzYWdlW10sIGRhdGE6IEpTT05WYWx1ZVtdIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuICBvblRvb2xDYWxsPzogVXNlQ2hhdE9wdGlvbnNbJ29uVG9vbENhbGwnXTtcbiAgb25GaW5pc2g/OiAocHJlZml4TWFwOiBQcmVmaXhNYXApID0+IHZvaWQ7XG4gIGdlbmVyYXRlSWQ/OiAoKSA9PiBzdHJpbmc7XG4gIGdldEN1cnJlbnREYXRlPzogKCkgPT4gRGF0ZTtcbn0pIHtcbiAgY29uc3QgY3JlYXRlZEF0ID0gZ2V0Q3VycmVudERhdGUoKTtcbiAgY29uc3QgcHJlZml4TWFwOiBQcmVmaXhNYXAgPSB7XG4gICAgZGF0YTogW10sXG4gIH07XG5cbiAgLy8ga2VlcCBsaXN0IG9mIGN1cnJlbnQgbWVzc2FnZSBhbm5vdGF0aW9ucyBmb3IgbWVzc2FnZVxuICBsZXQgbWVzc2FnZV9hbm5vdGF0aW9uczogSlNPTlZhbHVlW10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgLy8gd2UgY3JlYXRlIGEgbWFwIG9mIGVhY2ggcHJlZml4LCBhbmQgZm9yIGVhY2ggcHJlZml4ZWQgbWVzc2FnZSB3ZSBwdXNoIHRvIHRoZSBtYXBcbiAgZm9yIGF3YWl0IChjb25zdCB7IHR5cGUsIHZhbHVlIH0gb2YgcmVhZERhdGFTdHJlYW0ocmVhZGVyLCB7XG4gICAgaXNBYm9ydGVkOiAoKSA9PiBhYm9ydENvbnRyb2xsZXJSZWY/LmN1cnJlbnQgPT09IG51bGwsXG4gIH0pKSB7XG4gICAgaWYgKHR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgaWYgKHByZWZpeE1hcFsndGV4dCddKSB7XG4gICAgICAgIHByZWZpeE1hcFsndGV4dCddID0ge1xuICAgICAgICAgIC4uLnByZWZpeE1hcFsndGV4dCddLFxuICAgICAgICAgIGNvbnRlbnQ6IChwcmVmaXhNYXBbJ3RleHQnXS5jb250ZW50IHx8ICcnKSArIHZhbHVlLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4TWFwWyd0ZXh0J10gPSB7XG4gICAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgICAgICBjb250ZW50OiB2YWx1ZSxcbiAgICAgICAgICBjcmVhdGVkQXQsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVG9vbCBpbnZvY2F0aW9ucyBhcmUgcGFydCBvZiBhbiBhc3Npc3RhbnQgbWVzc2FnZVxuICAgIGlmICh0eXBlID09PSAndG9vbF9jYWxsJykge1xuICAgICAgLy8gY3JlYXRlIG1lc3NhZ2UgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgICAgaWYgKHByZWZpeE1hcC50ZXh0ID09IG51bGwpIHtcbiAgICAgICAgcHJlZml4TWFwLnRleHQgPSB7XG4gICAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICBjcmVhdGVkQXQsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXhNYXAudGV4dC50b29sSW52b2NhdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICBwcmVmaXhNYXAudGV4dC50b29sSW52b2NhdGlvbnMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgcHJlZml4TWFwLnRleHQudG9vbEludm9jYXRpb25zLnB1c2godmFsdWUpO1xuXG4gICAgICAvLyBpbnZva2UgdGhlIG9uVG9vbENhbGwgY2FsbGJhY2sgaWYgaXQgZXhpc3RzLiBUaGlzIGlzIGJsb2NraW5nLlxuICAgICAgLy8gSW4gdGhlIGZ1dHVyZSB3ZSBzaG91bGQgbWFrZSB0aGlzIG5vbi1ibG9ja2luZywgd2hpY2hcbiAgICAgIC8vIHJlcXVpcmVzIGFkZGl0aW9uYWwgc3RhdGUgbWFuYWdlbWVudCBmb3IgZXJyb3IgaGFuZGxpbmcgZXRjLlxuICAgICAgaWYgKG9uVG9vbENhbGwpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb25Ub29sQ2FsbCh7IHRvb2xDYWxsOiB2YWx1ZSB9KTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gc3RvcmUgdGhlIHJlc3VsdCBpbiB0aGUgdG9vbCBpbnZvY2F0aW9uXG4gICAgICAgICAgcHJlZml4TWFwLnRleHQudG9vbEludm9jYXRpb25zW1xuICAgICAgICAgICAgcHJlZml4TWFwLnRleHQudG9vbEludm9jYXRpb25zLmxlbmd0aCAtIDFcbiAgICAgICAgICBdID0geyAuLi52YWx1ZSwgcmVzdWx0IH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0b29sX3Jlc3VsdCcpIHtcbiAgICAgIC8vIGNyZWF0ZSBtZXNzYWdlIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgIGlmIChwcmVmaXhNYXAudGV4dCA9PSBudWxsKSB7XG4gICAgICAgIHByZWZpeE1hcC50ZXh0ID0ge1xuICAgICAgICAgIGlkOiBnZW5lcmF0ZUlkKCksXG4gICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgY29udGVudDogJycsXG4gICAgICAgICAgY3JlYXRlZEF0LFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlZml4TWFwLnRleHQudG9vbEludm9jYXRpb25zID09IG51bGwpIHtcbiAgICAgICAgcHJlZml4TWFwLnRleHQudG9vbEludm9jYXRpb25zID0gW107XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbmQgaWYgdGhlcmUgaXMgYW55IHRvb2wgaW52b2NhdGlvbiB3aXRoIHRoZSBzYW1lIHRvb2xDYWxsSWRcbiAgICAgIC8vIGFuZCByZXBsYWNlIGl0IHdpdGggdGhlIHJlc3VsdFxuICAgICAgY29uc3QgdG9vbEludm9jYXRpb25JbmRleCA9IHByZWZpeE1hcC50ZXh0LnRvb2xJbnZvY2F0aW9ucy5maW5kSW5kZXgoXG4gICAgICAgIGludm9jYXRpb24gPT4gaW52b2NhdGlvbi50b29sQ2FsbElkID09PSB2YWx1ZS50b29sQ2FsbElkLFxuICAgICAgKTtcblxuICAgICAgaWYgKHRvb2xJbnZvY2F0aW9uSW5kZXggIT09IC0xKSB7XG4gICAgICAgIHByZWZpeE1hcC50ZXh0LnRvb2xJbnZvY2F0aW9uc1t0b29sSW52b2NhdGlvbkluZGV4XSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlZml4TWFwLnRleHQudG9vbEludm9jYXRpb25zLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmdW5jdGlvbkNhbGxNZXNzYWdlOiBNZXNzYWdlIHwgbnVsbCB8IHVuZGVmaW5lZCA9IG51bGw7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICBwcmVmaXhNYXBbJ2Z1bmN0aW9uX2NhbGwnXSA9IHtcbiAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICBmdW5jdGlvbl9jYWxsOiB2YWx1ZS5mdW5jdGlvbl9jYWxsLFxuICAgICAgICBuYW1lOiB2YWx1ZS5mdW5jdGlvbl9jYWxsLm5hbWUsXG4gICAgICAgIGNyZWF0ZWRBdCxcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uQ2FsbE1lc3NhZ2UgPSBwcmVmaXhNYXBbJ2Z1bmN0aW9uX2NhbGwnXTtcbiAgICB9XG5cbiAgICBsZXQgdG9vbENhbGxNZXNzYWdlOiBNZXNzYWdlIHwgbnVsbCB8IHVuZGVmaW5lZCA9IG51bGw7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3Rvb2xfY2FsbHMnKSB7XG4gICAgICBwcmVmaXhNYXBbJ3Rvb2xfY2FsbHMnXSA9IHtcbiAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgICB0b29sX2NhbGxzOiB2YWx1ZS50b29sX2NhbGxzLFxuICAgICAgICBjcmVhdGVkQXQsXG4gICAgICB9O1xuXG4gICAgICB0b29sQ2FsbE1lc3NhZ2UgPSBwcmVmaXhNYXBbJ3Rvb2xfY2FsbHMnXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ2RhdGEnKSB7XG4gICAgICBwcmVmaXhNYXBbJ2RhdGEnXS5wdXNoKC4uLnZhbHVlKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzcG9uc2VNZXNzYWdlID0gcHJlZml4TWFwWyd0ZXh0J107XG5cbiAgICBpZiAodHlwZSA9PT0gJ21lc3NhZ2VfYW5ub3RhdGlvbnMnKSB7XG4gICAgICBpZiAoIW1lc3NhZ2VfYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgbWVzc2FnZV9hbm5vdGF0aW9ucyA9IFsuLi52YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlX2Fubm90YXRpb25zLnB1c2goLi4udmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgYW55IGV4aXN0aW5nIG1lc3NhZ2Ugd2l0aCB0aGUgbGF0ZXN0IGFubm90YXRpb25zXG4gICAgICBmdW5jdGlvbkNhbGxNZXNzYWdlID0gYXNzaWduQW5ub3RhdGlvbnNUb01lc3NhZ2UoXG4gICAgICAgIHByZWZpeE1hcFsnZnVuY3Rpb25fY2FsbCddLFxuICAgICAgICBtZXNzYWdlX2Fubm90YXRpb25zLFxuICAgICAgKTtcbiAgICAgIHRvb2xDYWxsTWVzc2FnZSA9IGFzc2lnbkFubm90YXRpb25zVG9NZXNzYWdlKFxuICAgICAgICBwcmVmaXhNYXBbJ3Rvb2xfY2FsbHMnXSxcbiAgICAgICAgbWVzc2FnZV9hbm5vdGF0aW9ucyxcbiAgICAgICk7XG4gICAgICByZXNwb25zZU1lc3NhZ2UgPSBhc3NpZ25Bbm5vdGF0aW9uc1RvTWVzc2FnZShcbiAgICAgICAgcHJlZml4TWFwWyd0ZXh0J10sXG4gICAgICAgIG1lc3NhZ2VfYW5ub3RhdGlvbnMsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGtlZXBzIHRoZSBwcmVmaXhNYXAgdXAgdG8gZGF0ZSB3aXRoIHRoZSBsYXRlc3QgYW5ub3RhdGlvbnMsIGV2ZW4gaWYgYW5ub3RhdGlvbnMgcHJlY2VkZWQgdGhlIG1lc3NhZ2VcbiAgICBpZiAobWVzc2FnZV9hbm5vdGF0aW9ucz8ubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtZXNzYWdlUHJlZml4S2V5czogKGtleW9mIFByZWZpeE1hcClbXSA9IFtcbiAgICAgICAgJ3RleHQnLFxuICAgICAgICAnZnVuY3Rpb25fY2FsbCcsXG4gICAgICAgICd0b29sX2NhbGxzJyxcbiAgICAgIF07XG4gICAgICBtZXNzYWdlUHJlZml4S2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChwcmVmaXhNYXBba2V5XSkge1xuICAgICAgICAgIChwcmVmaXhNYXBba2V5XSBhcyBNZXNzYWdlKS5hbm5vdGF0aW9ucyA9IFsuLi5tZXNzYWdlX2Fubm90YXRpb25zIV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdlIGFkZCBmdW5jdGlvbiAmIHRvb2wgY2FsbHMgYW5kIHJlc3BvbnNlIG1lc3NhZ2VzIHRvIHRoZSBtZXNzYWdlc1tdLCBidXQgZGF0YSBpcyBpdHMgb3duIHRoaW5nXG4gICAgY29uc3QgbWVyZ2VkID0gW2Z1bmN0aW9uQ2FsbE1lc3NhZ2UsIHRvb2xDYWxsTWVzc2FnZSwgcmVzcG9uc2VNZXNzYWdlXVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLm1hcChtZXNzYWdlID0+ICh7XG4gICAgICAgIC4uLmFzc2lnbkFubm90YXRpb25zVG9NZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2VfYW5ub3RhdGlvbnMpLFxuICAgICAgfSkpIGFzIE1lc3NhZ2VbXTtcblxuICAgIHVwZGF0ZShtZXJnZWQsIFsuLi5wcmVmaXhNYXBbJ2RhdGEnXV0pOyAvLyBtYWtlIGEgY29weSBvZiB0aGUgZGF0YSBhcnJheVxuICB9XG5cbiAgb25GaW5pc2g/LihwcmVmaXhNYXApO1xuXG4gIHJldHVybiB7XG4gICAgbWVzc2FnZXM6IFtcbiAgICAgIHByZWZpeE1hcC50ZXh0LFxuICAgICAgcHJlZml4TWFwLmZ1bmN0aW9uX2NhbGwsXG4gICAgICBwcmVmaXhNYXAudG9vbF9jYWxscyxcbiAgICBdLmZpbHRlcihCb29sZWFuKSBhcyBNZXNzYWdlW10sXG4gICAgZGF0YTogcHJlZml4TWFwLmRhdGEsXG4gIH07XG59XG4iLCJpbXBvcnQge1xuICBTdHJlYW1QYXJ0VHlwZSxcbiAgU3RyZWFtU3RyaW5nUHJlZml4ZXMsXG4gIHBhcnNlU3RyZWFtUGFydCxcbn0gZnJvbSAnLi9zdHJlYW0tcGFydHMnO1xuXG5leHBvcnQgKiBmcm9tICcuL2dlbmVyYXRlLWlkJztcblxuLy8gVE9ETyByZW1vdmUgKGJyZWFraW5nIGNoYW5nZSlcbmV4cG9ydCB7IGdlbmVyYXRlSWQgYXMgbmFub2lkIH0gZnJvbSAnLi9nZW5lcmF0ZS1pZCc7XG5cbi8vIEV4cG9ydCBzdHJlYW0gZGF0YSB1dGlsaXRpZXMgZm9yIGN1c3RvbSBzdHJlYW0gaW1wbGVtZW50YXRpb25zLFxuLy8gYm90aCBvbiB0aGUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZS5cbmV4cG9ydCB0eXBlIHsgU3RyZWFtUGFydCB9IGZyb20gJy4vc3RyZWFtLXBhcnRzJztcbmV4cG9ydCB7IGZvcm1hdFN0cmVhbVBhcnQsIHBhcnNlU3RyZWFtUGFydCB9IGZyb20gJy4vc3RyZWFtLXBhcnRzJztcbmV4cG9ydCB7IHJlYWREYXRhU3RyZWFtIH0gZnJvbSAnLi9yZWFkLWRhdGEtc3RyZWFtJztcblxuLy8gc2ltcGxlIGRlY29kZXIgc2lnbmF0dXJlczpcbmZ1bmN0aW9uIGNyZWF0ZUNodW5rRGVjb2RlcigpOiAoY2h1bms6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQpID0+IHN0cmluZztcbmZ1bmN0aW9uIGNyZWF0ZUNodW5rRGVjb2RlcihcbiAgY29tcGxleDogZmFsc2UsXG4pOiAoY2h1bms6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQpID0+IHN0cmluZztcbi8vIGNvbXBsZXggZGVjb2RlciBzaWduYXR1cmU6XG5mdW5jdGlvbiBjcmVhdGVDaHVua0RlY29kZXIoXG4gIGNvbXBsZXg6IHRydWUsXG4pOiAoY2h1bms6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQpID0+IFN0cmVhbVBhcnRUeXBlW107XG4vLyBjb21iaW5lZCBzaWduYXR1cmUgZm9yIHdoZW4gdGhlIGNsaWVudCBjYWxscyB0aGlzIGZ1bmN0aW9uIHdpdGggYSBib29sZWFuOlxuZnVuY3Rpb24gY3JlYXRlQ2h1bmtEZWNvZGVyKFxuICBjb21wbGV4PzogYm9vbGVhbixcbik6IChjaHVuazogVWludDhBcnJheSB8IHVuZGVmaW5lZCkgPT4gU3RyZWFtUGFydFR5cGVbXSB8IHN0cmluZztcbmZ1bmN0aW9uIGNyZWF0ZUNodW5rRGVjb2Rlcihjb21wbGV4PzogYm9vbGVhbikge1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbiAgaWYgKCFjb21wbGV4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjaHVuazogVWludDhBcnJheSB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XG4gICAgICBpZiAoIWNodW5rKSByZXR1cm4gJyc7XG4gICAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoY2h1bmssIHsgc3RyZWFtOiB0cnVlIH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNodW5rOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgZGVjb2RlZCA9IGRlY29kZXJcbiAgICAgIC5kZWNvZGUoY2h1bmssIHsgc3RyZWFtOiB0cnVlIH0pXG4gICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAuZmlsdGVyKGxpbmUgPT4gbGluZSAhPT0gJycpOyAvLyBzcGxpdHRpbmcgbGVhdmVzIGFuIGVtcHR5IHN0cmluZyBhdCB0aGUgZW5kXG5cbiAgICByZXR1cm4gZGVjb2RlZC5tYXAocGFyc2VTdHJlYW1QYXJ0KS5maWx0ZXIoQm9vbGVhbik7XG4gIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNodW5rRGVjb2RlciB9O1xuXG5leHBvcnQgY29uc3QgaXNTdHJlYW1TdHJpbmdFcXVhbFRvVHlwZSA9IChcbiAgdHlwZToga2V5b2YgdHlwZW9mIFN0cmVhbVN0cmluZ1ByZWZpeGVzLFxuICB2YWx1ZTogc3RyaW5nLFxuKTogdmFsdWUgaXMgU3RyZWFtU3RyaW5nID0+XG4gIHZhbHVlLnN0YXJ0c1dpdGgoYCR7U3RyZWFtU3RyaW5nUHJlZml4ZXNbdHlwZV19OmApICYmIHZhbHVlLmVuZHNXaXRoKCdcXG4nKTtcblxuZXhwb3J0IHR5cGUgU3RyZWFtU3RyaW5nID1cbiAgYCR7KHR5cGVvZiBTdHJlYW1TdHJpbmdQcmVmaXhlcylba2V5b2YgdHlwZW9mIFN0cmVhbVN0cmluZ1ByZWZpeGVzXX06JHtzdHJpbmd9XFxuYDtcbiIsImltcG9ydCB7IHBhcnNlQ29tcGxleFJlc3BvbnNlIH0gZnJvbSAnLi9wYXJzZS1jb21wbGV4LXJlc3BvbnNlJztcbmltcG9ydCB7IElkR2VuZXJhdG9yLCBKU09OVmFsdWUsIE1lc3NhZ2UsIFVzZUNoYXRPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVDaHVua0RlY29kZXIgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbGxDaGF0QXBpKHtcbiAgYXBpLFxuICBtZXNzYWdlcyxcbiAgYm9keSxcbiAgc3RyZWFtTW9kZSA9ICdzdHJlYW0tZGF0YScsXG4gIGNyZWRlbnRpYWxzLFxuICBoZWFkZXJzLFxuICBhYm9ydENvbnRyb2xsZXIsXG4gIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSxcbiAgb25SZXNwb25zZSxcbiAgb25VcGRhdGUsXG4gIG9uRmluaXNoLFxuICBvblRvb2xDYWxsLFxuICBnZW5lcmF0ZUlkLFxufToge1xuICBhcGk6IHN0cmluZztcbiAgbWVzc2FnZXM6IE9taXQ8TWVzc2FnZSwgJ2lkJz5bXTtcbiAgYm9keTogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgc3RyZWFtTW9kZT86ICdzdHJlYW0tZGF0YScgfCAndGV4dCc7XG4gIGNyZWRlbnRpYWxzPzogUmVxdWVzdENyZWRlbnRpYWxzO1xuICBoZWFkZXJzPzogSGVhZGVyc0luaXQ7XG4gIGFib3J0Q29udHJvbGxlcj86ICgpID0+IEFib3J0Q29udHJvbGxlciB8IG51bGw7XG4gIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZTogKCkgPT4gdm9pZDtcbiAgb25SZXNwb25zZT86IChyZXNwb25zZTogUmVzcG9uc2UpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xuICBvblVwZGF0ZTogKG1lcmdlZDogTWVzc2FnZVtdLCBkYXRhOiBKU09OVmFsdWVbXSB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgb25GaW5pc2g/OiAobWVzc2FnZTogTWVzc2FnZSkgPT4gdm9pZDtcbiAgb25Ub29sQ2FsbD86IFVzZUNoYXRPcHRpb25zWydvblRvb2xDYWxsJ107XG4gIGdlbmVyYXRlSWQ6IElkR2VuZXJhdG9yO1xufSkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaSwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIG1lc3NhZ2VzLFxuICAgICAgLi4uYm9keSxcbiAgICB9KSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgLi4uaGVhZGVycyxcbiAgICB9LFxuICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyPy4oKT8uc2lnbmFsLFxuICAgIGNyZWRlbnRpYWxzLFxuICB9KS5jYXRjaChlcnIgPT4ge1xuICAgIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSgpO1xuICAgIHRocm93IGVycjtcbiAgfSk7XG5cbiAgaWYgKG9uUmVzcG9uc2UpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgb25SZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHJlc3RvcmVNZXNzYWdlc09uRmFpbHVyZSgpO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIChhd2FpdCByZXNwb25zZS50ZXh0KCkpIHx8ICdGYWlsZWQgdG8gZmV0Y2ggdGhlIGNoYXQgcmVzcG9uc2UuJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKCFyZXNwb25zZS5ib2R5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcmVzcG9uc2UgYm9keSBpcyBlbXB0eS4nKTtcbiAgfVxuXG4gIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG5cbiAgc3dpdGNoIChzdHJlYW1Nb2RlKSB7XG4gICAgY2FzZSAndGV4dCc6IHtcbiAgICAgIGNvbnN0IGRlY29kZXIgPSBjcmVhdGVDaHVua0RlY29kZXIoKTtcblxuICAgICAgY29uc3QgcmVzdWx0TWVzc2FnZSA9IHtcbiAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICByb2xlOiAnYXNzaXN0YW50JyBhcyBjb25zdCxcbiAgICAgICAgY29udGVudDogJycsXG4gICAgICB9O1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0TWVzc2FnZS5jb250ZW50ICs9IGRlY29kZXIodmFsdWUpO1xuICAgICAgICByZXN1bHRNZXNzYWdlLmlkID0gZ2VuZXJhdGVJZCgpO1xuXG4gICAgICAgIC8vIG5vdGU6IGNyZWF0aW5nIGEgbmV3IG1lc3NhZ2Ugb2JqZWN0IGlzIHJlcXVpcmVkIGZvciBTb2xpZC5qcyBzdHJlYW1pbmdcbiAgICAgICAgb25VcGRhdGUoW3sgLi4ucmVzdWx0TWVzc2FnZSB9XSwgW10pO1xuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGhhcyBiZWVuIGFib3J0ZWQsIHN0b3AgcmVhZGluZyB0aGUgc3RyZWFtLlxuICAgICAgICBpZiAoYWJvcnRDb250cm9sbGVyPy4oKSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbkZpbmlzaD8uKHJlc3VsdE1lc3NhZ2UpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlczogW3Jlc3VsdE1lc3NhZ2VdLFxuICAgICAgICBkYXRhOiBbXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSAnc3RyZWFtLWRhdGEnOiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGFyc2VDb21wbGV4UmVzcG9uc2Uoe1xuICAgICAgICByZWFkZXIsXG4gICAgICAgIGFib3J0Q29udHJvbGxlclJlZjpcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXIgIT0gbnVsbCA/IHsgY3VycmVudDogYWJvcnRDb250cm9sbGVyKCkgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgdXBkYXRlOiBvblVwZGF0ZSxcbiAgICAgICAgb25Ub29sQ2FsbCxcbiAgICAgICAgb25GaW5pc2gocHJlZml4TWFwKSB7XG4gICAgICAgICAgaWYgKG9uRmluaXNoICYmIHByZWZpeE1hcC50ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG9uRmluaXNoKHByZWZpeE1hcC50ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdlbmVyYXRlSWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OiB7XG4gICAgICBjb25zdCBleGhhdXN0aXZlQ2hlY2s6IG5ldmVyID0gc3RyZWFtTW9kZTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBzdHJlYW0gbW9kZTogJHtleGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBDaGF0UmVxdWVzdCxcbiAgRnVuY3Rpb25DYWxsLFxuICBKU09OVmFsdWUsXG4gIE1lc3NhZ2UsXG4gIFRvb2xDYWxsLFxufSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NDaGF0U3RyZWFtKHtcbiAgZ2V0U3RyZWFtZWRSZXNwb25zZSxcbiAgZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsLFxuICBleHBlcmltZW50YWxfb25Ub29sQ2FsbCxcbiAgdXBkYXRlQ2hhdFJlcXVlc3QsXG4gIGdldEN1cnJlbnRNZXNzYWdlcyxcbn06IHtcbiAgZ2V0U3RyZWFtZWRSZXNwb25zZTogKCkgPT4gUHJvbWlzZTxcbiAgICBNZXNzYWdlIHwgeyBtZXNzYWdlczogTWVzc2FnZVtdOyBkYXRhOiBKU09OVmFsdWVbXSB9XG4gID47XG4gIGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbD86IChcbiAgICBjaGF0TWVzc2FnZXM6IE1lc3NhZ2VbXSxcbiAgICBmdW5jdGlvbkNhbGw6IEZ1bmN0aW9uQ2FsbCxcbiAgKSA9PiBQcm9taXNlPHZvaWQgfCBDaGF0UmVxdWVzdD47XG4gIGV4cGVyaW1lbnRhbF9vblRvb2xDYWxsPzogKFxuICAgIGNoYXRNZXNzYWdlczogTWVzc2FnZVtdLFxuICAgIHRvb2xDYWxsczogVG9vbENhbGxbXSxcbiAgKSA9PiBQcm9taXNlPHZvaWQgfCBDaGF0UmVxdWVzdD47XG4gIHVwZGF0ZUNoYXRSZXF1ZXN0OiAoY2hhdFJlcXVlc3Q6IENoYXRSZXF1ZXN0KSA9PiB2b2lkO1xuICBnZXRDdXJyZW50TWVzc2FnZXM6ICgpID0+IE1lc3NhZ2VbXTtcbn0pIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBUT0RPLVNUUkVBTURBVEE6IFRoaXMgc2hvdWxkIGJlIHsgIGNvbnN0IHsgbWVzc2FnZXM6IHN0cmVhbWVkUmVzcG9uc2VNZXNzYWdlcywgZGF0YSB9ID1cbiAgICAvLyBhd2FpdCBnZXRTdHJlYW1lZFJlc3BvbnNlKH0gb25jZSBTdHJlYW0gRGF0YSBpcyBub3QgZXhwZXJpbWVudGFsXG4gICAgY29uc3QgbWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZSA9IGF3YWl0IGdldFN0cmVhbWVkUmVzcG9uc2UoKTtcblxuICAgIC8vIFVzaW5nIGV4cGVyaW1lbnRhbCBzdHJlYW0gZGF0YVxuICAgIGlmICgnbWVzc2FnZXMnIGluIG1lc3NhZ2VzQW5kRGF0YU9ySnVzdE1lc3NhZ2UpIHtcbiAgICAgIGxldCBoYXNGb2xsb3dpbmdSZXNwb25zZSA9IGZhbHNlO1xuXG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZS5tZXNzYWdlcykge1xuICAgICAgICAvLyBTZWUgaWYgdGhlIG1lc3NhZ2UgaGFzIGEgY29tcGxldGUgZnVuY3Rpb24gY2FsbCBvciB0b29sIGNhbGxcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdHlwZW9mIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbCA9PT0gJ3N0cmluZycpICYmXG4gICAgICAgICAgKG1lc3NhZ2UudG9vbF9jYWxscyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICB0eXBlb2YgbWVzc2FnZS50b29sX2NhbGxzID09PSAnc3RyaW5nJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBoYXNGb2xsb3dpbmdSZXNwb25zZSA9IHRydWU7XG4gICAgICAgIC8vIFRyeSB0byBoYW5kbGUgZnVuY3Rpb24gY2FsbFxuICAgICAgICBpZiAoZXhwZXJpbWVudGFsX29uRnVuY3Rpb25DYWxsKSB7XG4gICAgICAgICAgY29uc3QgZnVuY3Rpb25DYWxsID0gbWVzc2FnZS5mdW5jdGlvbl9jYWxsO1xuICAgICAgICAgIC8vIE1ha2Ugc3VyZSBmdW5jdGlvbkNhbGwgaXMgYW4gb2JqZWN0XG4gICAgICAgICAgLy8gSWYgbm90LCB3ZSBnb3QgdG9vbCBjYWxscyBpbnN0ZWFkIG9mIGZ1bmN0aW9uIGNhbGxzXG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbkNhbGwgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwgc2hvdWxkIG5vdCBiZSBkZWZpbmVkIHdoZW4gdXNpbmcgdG9vbHMnLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFVzZXIgaGFuZGxlcyB0aGUgZnVuY3Rpb24gY2FsbCBpbiB0aGVpciBvd24gZnVuY3Rpb25DYWxsSGFuZGxlci5cbiAgICAgICAgICAvLyBUaGUgXCJhcmd1bWVudHNcIiBrZXkgb2YgdGhlIGZ1bmN0aW9uIGNhbGwgb2JqZWN0IHdpbGwgc3RpbGwgYmUgYSBzdHJpbmcgd2hpY2ggd2lsbCBoYXZlIHRvIGJlIHBhcnNlZCBpbiB0aGUgZnVuY3Rpb24gaGFuZGxlci5cbiAgICAgICAgICAvLyBJZiB0aGUgXCJhcmd1bWVudHNcIiBKU09OIGlzIG1hbGZvcm1lZCBkdWUgdG8gbW9kZWwgZXJyb3IgdGhlIHVzZXIgd2lsbCBoYXZlIHRvIGhhbmRsZSB0aGF0IHRoZW1zZWx2ZXMuXG5cbiAgICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGxSZXNwb25zZTogQ2hhdFJlcXVlc3QgfCB2b2lkID1cbiAgICAgICAgICAgIGF3YWl0IGV4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbChcbiAgICAgICAgICAgICAgZ2V0Q3VycmVudE1lc3NhZ2VzKCksXG4gICAgICAgICAgICAgIGZ1bmN0aW9uQ2FsbCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgdXNlciBkb2VzIG5vdCByZXR1cm4gYW55dGhpbmcgYXMgYSByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGNhbGwsIHRoZSBsb29wIHdpbGwgYnJlYWsuXG4gICAgICAgICAgaWYgKGZ1bmN0aW9uQ2FsbFJlc3BvbnNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhhc0ZvbGxvd2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBIGZ1bmN0aW9uIGNhbGwgcmVzcG9uc2Ugd2FzIHJldHVybmVkLlxuICAgICAgICAgIC8vIFRoZSB1cGRhdGVkIGNoYXQgd2l0aCBmdW5jdGlvbiBjYWxsIHJlc3BvbnNlIHdpbGwgYmUgc2VudCB0byB0aGUgQVBJIGluIHRoZSBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgbG9vcC5cbiAgICAgICAgICB1cGRhdGVDaGF0UmVxdWVzdChmdW5jdGlvbkNhbGxSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJ5IHRvIGhhbmRsZSB0b29sIGNhbGxcbiAgICAgICAgaWYgKGV4cGVyaW1lbnRhbF9vblRvb2xDYWxsKSB7XG4gICAgICAgICAgY29uc3QgdG9vbENhbGxzID0gbWVzc2FnZS50b29sX2NhbGxzO1xuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0b29sQ2FsbHMgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0c1xuICAgICAgICAgIC8vIElmIG5vdCwgd2UgZ290IGZ1bmN0aW9uIGNhbGxzIGluc3RlYWQgb2YgdG9vbCBjYWxsc1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHRvb2xDYWxscykgfHxcbiAgICAgICAgICAgIHRvb2xDYWxscy5zb21lKHRvb2xDYWxsID0+IHR5cGVvZiB0b29sQ2FsbCAhPT0gJ29iamVjdCcpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdleHBlcmltZW50YWxfb25Ub29sQ2FsbCBzaG91bGQgbm90IGJlIGRlZmluZWQgd2hlbiB1c2luZyB0b29scycsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXNlciBoYW5kbGVzIHRoZSBmdW5jdGlvbiBjYWxsIGluIHRoZWlyIG93biBmdW5jdGlvbkNhbGxIYW5kbGVyLlxuICAgICAgICAgIC8vIFRoZSBcImFyZ3VtZW50c1wiIGtleSBvZiB0aGUgZnVuY3Rpb24gY2FsbCBvYmplY3Qgd2lsbCBzdGlsbCBiZSBhIHN0cmluZyB3aGljaCB3aWxsIGhhdmUgdG8gYmUgcGFyc2VkIGluIHRoZSBmdW5jdGlvbiBoYW5kbGVyLlxuICAgICAgICAgIC8vIElmIHRoZSBcImFyZ3VtZW50c1wiIEpTT04gaXMgbWFsZm9ybWVkIGR1ZSB0byBtb2RlbCBlcnJvciB0aGUgdXNlciB3aWxsIGhhdmUgdG8gaGFuZGxlIHRoYXQgdGhlbXNlbHZlcy5cbiAgICAgICAgICBjb25zdCB0b29sQ2FsbFJlc3BvbnNlOiBDaGF0UmVxdWVzdCB8IHZvaWQgPVxuICAgICAgICAgICAgYXdhaXQgZXhwZXJpbWVudGFsX29uVG9vbENhbGwoZ2V0Q3VycmVudE1lc3NhZ2VzKCksIHRvb2xDYWxscyk7XG5cbiAgICAgICAgICAvLyBJZiB0aGUgdXNlciBkb2VzIG5vdCByZXR1cm4gYW55dGhpbmcgYXMgYSByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGNhbGwsIHRoZSBsb29wIHdpbGwgYnJlYWsuXG4gICAgICAgICAgaWYgKHRvb2xDYWxsUmVzcG9uc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGFzRm9sbG93aW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEEgZnVuY3Rpb24gY2FsbCByZXNwb25zZSB3YXMgcmV0dXJuZWQuXG4gICAgICAgICAgLy8gVGhlIHVwZGF0ZWQgY2hhdCB3aXRoIGZ1bmN0aW9uIGNhbGwgcmVzcG9uc2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBBUEkgaW4gdGhlIG5leHQgaXRlcmF0aW9uIG9mIHRoZSBsb29wLlxuICAgICAgICAgIHVwZGF0ZUNoYXRSZXF1ZXN0KHRvb2xDYWxsUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWhhc0ZvbGxvd2luZ1Jlc3BvbnNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZSA9IG1lc3NhZ2VzQW5kRGF0YU9ySnVzdE1lc3NhZ2U7XG5cbiAgICAgIC8vIFRPRE8tU1RSRUFNREFUQTogUmVtb3ZlIHRoaXMgb25jZSBTdHJlYW0gRGF0YSBpcyBub3QgZXhwZXJpbWVudGFsXG4gICAgICBpZiAoXG4gICAgICAgIChzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS5mdW5jdGlvbl9jYWxsID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICB0eXBlb2Ygc3RyZWFtZWRSZXNwb25zZU1lc3NhZ2UuZnVuY3Rpb25fY2FsbCA9PT0gJ3N0cmluZycpICYmXG4gICAgICAgIChzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZS50b29sX2NhbGxzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICB0eXBlb2Ygc3RyZWFtZWRSZXNwb25zZU1lc3NhZ2UudG9vbF9jYWxscyA9PT0gJ3N0cmluZycpXG4gICAgICApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGdldCBoZXJlIGFuZCBhcmUgZXhwZWN0aW5nIGEgZnVuY3Rpb24gY2FsbCwgdGhlIG1lc3NhZ2Ugc2hvdWxkIGhhdmUgb25lLCBpZiBub3Qgd2FybiBhbmQgY29udGludWVcbiAgICAgIGlmIChleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwpIHtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25DYWxsID0gc3RyZWFtZWRSZXNwb25zZU1lc3NhZ2UuZnVuY3Rpb25fY2FsbDtcbiAgICAgICAgaWYgKCEodHlwZW9mIGZ1bmN0aW9uQ2FsbCA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2V4cGVyaW1lbnRhbF9vbkZ1bmN0aW9uQ2FsbCBzaG91bGQgbm90IGJlIGRlZmluZWQgd2hlbiB1c2luZyB0b29scycsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGxSZXNwb25zZTogQ2hhdFJlcXVlc3QgfCB2b2lkID1cbiAgICAgICAgICBhd2FpdCBleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwoZ2V0Q3VycmVudE1lc3NhZ2VzKCksIGZ1bmN0aW9uQ2FsbCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZG9lcyBub3QgcmV0dXJuIGFueXRoaW5nIGFzIGEgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiBjYWxsLCB0aGUgbG9vcCB3aWxsIGJyZWFrLlxuICAgICAgICBpZiAoZnVuY3Rpb25DYWxsUmVzcG9uc2UgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG4gICAgICAgIC8vIEEgZnVuY3Rpb24gY2FsbCByZXNwb25zZSB3YXMgcmV0dXJuZWQuXG4gICAgICAgIC8vIFRoZSB1cGRhdGVkIGNoYXQgd2l0aCBmdW5jdGlvbiBjYWxsIHJlc3BvbnNlIHdpbGwgYmUgc2VudCB0byB0aGUgQVBJIGluIHRoZSBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgbG9vcC5cbiAgICAgICAgZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzKGZ1bmN0aW9uQ2FsbFJlc3BvbnNlKTtcbiAgICAgICAgdXBkYXRlQ2hhdFJlcXVlc3QoZnVuY3Rpb25DYWxsUmVzcG9uc2UpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgZ2V0IGhlcmUgYW5kIGFyZSBleHBlY3RpbmcgYSB0b29sIGNhbGwsIHRoZSBtZXNzYWdlIHNob3VsZCBoYXZlIG9uZSwgaWYgbm90IHdhcm4gYW5kIGNvbnRpbnVlXG4gICAgICBpZiAoZXhwZXJpbWVudGFsX29uVG9vbENhbGwpIHtcbiAgICAgICAgY29uc3QgdG9vbENhbGxzID0gc3RyZWFtZWRSZXNwb25zZU1lc3NhZ2UudG9vbF9jYWxscztcbiAgICAgICAgaWYgKCEodHlwZW9mIHRvb2xDYWxscyA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2V4cGVyaW1lbnRhbF9vblRvb2xDYWxsIHNob3VsZCBub3QgYmUgZGVmaW5lZCB3aGVuIHVzaW5nIGZ1bmN0aW9ucycsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b29sQ2FsbFJlc3BvbnNlOiBDaGF0UmVxdWVzdCB8IHZvaWQgPVxuICAgICAgICAgIGF3YWl0IGV4cGVyaW1lbnRhbF9vblRvb2xDYWxsKGdldEN1cnJlbnRNZXNzYWdlcygpLCB0b29sQ2FsbHMpO1xuXG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRvZXMgbm90IHJldHVybiBhbnl0aGluZyBhcyBhIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gY2FsbCwgdGhlIGxvb3Agd2lsbCBicmVhay5cbiAgICAgICAgaWYgKHRvb2xDYWxsUmVzcG9uc2UgPT09IHVuZGVmaW5lZCkgYnJlYWs7XG4gICAgICAgIC8vIEEgZnVuY3Rpb24gY2FsbCByZXNwb25zZSB3YXMgcmV0dXJuZWQuXG4gICAgICAgIC8vIFRoZSB1cGRhdGVkIGNoYXQgd2l0aCBmdW5jdGlvbiBjYWxsIHJlc3BvbnNlIHdpbGwgYmUgc2VudCB0byB0aGUgQVBJIGluIHRoZSBuZXh0IGl0ZXJhdGlvbiBvZiB0aGUgbG9vcC5cbiAgICAgICAgZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzKHRvb2xDYWxsUmVzcG9uc2UpO1xuICAgICAgICB1cGRhdGVDaGF0UmVxdWVzdCh0b29sQ2FsbFJlc3BvbnNlKTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFrZSBzdXJlIGZ1bmN0aW9uIGNhbGwgYXJndW1lbnRzIGFyZSBzZW50IGJhY2sgdG8gdGhlIEFQSSBhcyBhIHN0cmluZ1xuICAgICAgZnVuY3Rpb24gZml4RnVuY3Rpb25DYWxsQXJndW1lbnRzKHJlc3BvbnNlOiBDaGF0UmVxdWVzdCkge1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgcmVzcG9uc2UubWVzc2FnZXMpIHtcbiAgICAgICAgICBpZiAobWVzc2FnZS50b29sX2NhbGxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9vbENhbGwgb2YgbWVzc2FnZS50b29sX2NhbGxzKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9vbENhbGwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzICYmXG4gICAgICAgICAgICAgICAgICB0eXBlb2YgdG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzICE9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgIT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMgPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbC5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlSWQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU1dSIGZyb20gJ3N3cic7XG5pbXBvcnQgeyBjYWxsQ29tcGxldGlvbkFwaSB9IGZyb20gJy4uL3NoYXJlZC9jYWxsLWNvbXBsZXRpb24tYXBpJztcbmltcG9ydCB7XG4gIEpTT05WYWx1ZSxcbiAgUmVxdWVzdE9wdGlvbnMsXG4gIFVzZUNvbXBsZXRpb25PcHRpb25zLFxufSBmcm9tICcuLi9zaGFyZWQvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSB7IFVzZUNvbXBsZXRpb25PcHRpb25zIH07XG5cbmV4cG9ydCB0eXBlIFVzZUNvbXBsZXRpb25IZWxwZXJzID0ge1xuICAvKiogVGhlIGN1cnJlbnQgY29tcGxldGlvbiByZXN1bHQgKi9cbiAgY29tcGxldGlvbjogc3RyaW5nO1xuICAvKipcbiAgICogU2VuZCBhIG5ldyBwcm9tcHQgdG8gdGhlIEFQSSBlbmRwb2ludCBhbmQgdXBkYXRlIHRoZSBjb21wbGV0aW9uIHN0YXRlLlxuICAgKi9cbiAgY29tcGxldGU6IChcbiAgICBwcm9tcHQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMsXG4gICkgPT4gUHJvbWlzZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPjtcbiAgLyoqIFRoZSBlcnJvciBvYmplY3Qgb2YgdGhlIEFQSSByZXF1ZXN0ICovXG4gIGVycm9yOiB1bmRlZmluZWQgfCBFcnJvcjtcbiAgLyoqXG4gICAqIEFib3J0IHRoZSBjdXJyZW50IEFQSSByZXF1ZXN0IGJ1dCBrZWVwIHRoZSBnZW5lcmF0ZWQgdG9rZW5zLlxuICAgKi9cbiAgc3RvcDogKCkgPT4gdm9pZDtcbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYGNvbXBsZXRpb25gIHN0YXRlIGxvY2FsbHkuXG4gICAqL1xuICBzZXRDb21wbGV0aW9uOiAoY29tcGxldGlvbjogc3RyaW5nKSA9PiB2b2lkO1xuICAvKiogVGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0ICovXG4gIGlucHV0OiBzdHJpbmc7XG4gIC8qKiBzZXRTdGF0ZS1wb3dlcmVkIG1ldGhvZCB0byB1cGRhdGUgdGhlIGlucHV0IHZhbHVlICovXG4gIHNldElucHV0OiBSZWFjdC5EaXNwYXRjaDxSZWFjdC5TZXRTdGF0ZUFjdGlvbjxzdHJpbmc+PjtcbiAgLyoqXG4gICAqIEFuIGlucHV0L3RleHRhcmVhLXJlYWR5IG9uQ2hhbmdlIGhhbmRsZXIgdG8gY29udHJvbCB0aGUgdmFsdWUgb2YgdGhlIGlucHV0XG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGpzeFxuICAgKiA8aW5wdXQgb25DaGFuZ2U9e2hhbmRsZUlucHV0Q2hhbmdlfSB2YWx1ZT17aW5wdXR9IC8+XG4gICAqIGBgYFxuICAgKi9cbiAgaGFuZGxlSW5wdXRDaGFuZ2U6IChcbiAgICBlOlxuICAgICAgfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PlxuICAgICAgfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PixcbiAgKSA9PiB2b2lkO1xuICAvKipcbiAgICogRm9ybSBzdWJtaXNzaW9uIGhhbmRsZXIgdG8gYXV0b21hdGljYWxseSByZXNldCBpbnB1dCBhbmQgYXBwZW5kIGEgdXNlciBtZXNzYWdlXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGpzeFxuICAgKiA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0fT5cbiAgICogIDxpbnB1dCBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9IHZhbHVlPXtpbnB1dH0gLz5cbiAgICogPC9mb3JtPlxuICAgKiBgYGBcbiAgICovXG4gIGhhbmRsZVN1Ym1pdDogKGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB2b2lkO1xuICAvKiogV2hldGhlciB0aGUgQVBJIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MgKi9cbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICAvKiogQWRkaXRpb25hbCBkYXRhIGFkZGVkIG9uIHRoZSBzZXJ2ZXIgdmlhIFN0cmVhbURhdGEgKi9cbiAgZGF0YT86IEpTT05WYWx1ZVtdO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbXBsZXRpb24oe1xuICBhcGkgPSAnL2FwaS9jb21wbGV0aW9uJyxcbiAgaWQsXG4gIGluaXRpYWxDb21wbGV0aW9uID0gJycsXG4gIGluaXRpYWxJbnB1dCA9ICcnLFxuICBjcmVkZW50aWFscyxcbiAgaGVhZGVycyxcbiAgYm9keSxcbiAgc3RyZWFtTW9kZSxcbiAgb25SZXNwb25zZSxcbiAgb25GaW5pc2gsXG4gIG9uRXJyb3IsXG59OiBVc2VDb21wbGV0aW9uT3B0aW9ucyA9IHt9KTogVXNlQ29tcGxldGlvbkhlbHBlcnMge1xuICAvLyBHZW5lcmF0ZSBhbiB1bmlxdWUgaWQgZm9yIHRoZSBjb21wbGV0aW9uIGlmIG5vdCBwcm92aWRlZC5cbiAgY29uc3QgaG9va0lkID0gdXNlSWQoKTtcbiAgY29uc3QgY29tcGxldGlvbklkID0gaWQgfHwgaG9va0lkO1xuXG4gIC8vIFN0b3JlIHRoZSBjb21wbGV0aW9uIHN0YXRlIGluIFNXUiwgdXNpbmcgdGhlIGNvbXBsZXRpb25JZCBhcyB0aGUga2V5IHRvIHNoYXJlIHN0YXRlcy5cbiAgY29uc3QgeyBkYXRhLCBtdXRhdGUgfSA9IHVzZVNXUjxzdHJpbmc+KFthcGksIGNvbXBsZXRpb25JZF0sIG51bGwsIHtcbiAgICBmYWxsYmFja0RhdGE6IGluaXRpYWxDb21wbGV0aW9uLFxuICB9KTtcblxuICBjb25zdCB7IGRhdGE6IGlzTG9hZGluZyA9IGZhbHNlLCBtdXRhdGU6IG11dGF0ZUxvYWRpbmcgfSA9IHVzZVNXUjxib29sZWFuPihcbiAgICBbY29tcGxldGlvbklkLCAnbG9hZGluZyddLFxuICAgIG51bGwsXG4gICk7XG5cbiAgY29uc3QgeyBkYXRhOiBzdHJlYW1EYXRhLCBtdXRhdGU6IG11dGF0ZVN0cmVhbURhdGEgfSA9IHVzZVNXUjxcbiAgICBKU09OVmFsdWVbXSB8IHVuZGVmaW5lZFxuICA+KFtjb21wbGV0aW9uSWQsICdzdHJlYW1EYXRhJ10sIG51bGwpO1xuXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8dW5kZWZpbmVkIHwgRXJyb3I+KHVuZGVmaW5lZCk7XG4gIGNvbnN0IGNvbXBsZXRpb24gPSBkYXRhITtcblxuICAvLyBBYm9ydCBjb250cm9sbGVyIHRvIGNhbmNlbCB0aGUgY3VycmVudCBBUEkgY2FsbC5cbiAgY29uc3QgW2Fib3J0Q29udHJvbGxlciwgc2V0QWJvcnRDb250cm9sbGVyXSA9XG4gICAgdXNlU3RhdGU8QWJvcnRDb250cm9sbGVyIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgZXh0cmFNZXRhZGF0YVJlZiA9IHVzZVJlZih7XG4gICAgY3JlZGVudGlhbHMsXG4gICAgaGVhZGVycyxcbiAgICBib2R5LFxuICB9KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBleHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQgPSB7XG4gICAgICBjcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBib2R5LFxuICAgIH07XG4gIH0sIFtjcmVkZW50aWFscywgaGVhZGVycywgYm9keV0pO1xuXG4gIGNvbnN0IHRyaWdnZXJSZXF1ZXN0ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHByb21wdDogc3RyaW5nLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpID0+XG4gICAgICBjYWxsQ29tcGxldGlvbkFwaSh7XG4gICAgICAgIGFwaSxcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICBjcmVkZW50aWFsczogZXh0cmFNZXRhZGF0YVJlZi5jdXJyZW50LmNyZWRlbnRpYWxzLFxuICAgICAgICBoZWFkZXJzOiB7IC4uLmV4dHJhTWV0YWRhdGFSZWYuY3VycmVudC5oZWFkZXJzLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAuLi5leHRyYU1ldGFkYXRhUmVmLmN1cnJlbnQuYm9keSxcbiAgICAgICAgICAuLi5vcHRpb25zPy5ib2R5LFxuICAgICAgICB9LFxuICAgICAgICBzdHJlYW1Nb2RlLFxuICAgICAgICBzZXRDb21wbGV0aW9uOiBjb21wbGV0aW9uID0+IG11dGF0ZShjb21wbGV0aW9uLCBmYWxzZSksXG4gICAgICAgIHNldExvYWRpbmc6IG11dGF0ZUxvYWRpbmcsXG4gICAgICAgIHNldEVycm9yLFxuICAgICAgICBzZXRBYm9ydENvbnRyb2xsZXIsXG4gICAgICAgIG9uUmVzcG9uc2UsXG4gICAgICAgIG9uRmluaXNoLFxuICAgICAgICBvbkVycm9yLFxuICAgICAgICBvbkRhdGE6IGRhdGEgPT4ge1xuICAgICAgICAgIG11dGF0ZVN0cmVhbURhdGEoWy4uLihzdHJlYW1EYXRhIHx8IFtdKSwgLi4uKGRhdGEgfHwgW10pXSwgZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgW1xuICAgICAgbXV0YXRlLFxuICAgICAgbXV0YXRlTG9hZGluZyxcbiAgICAgIGFwaSxcbiAgICAgIGV4dHJhTWV0YWRhdGFSZWYsXG4gICAgICBzZXRBYm9ydENvbnRyb2xsZXIsXG4gICAgICBvblJlc3BvbnNlLFxuICAgICAgb25GaW5pc2gsXG4gICAgICBvbkVycm9yLFxuICAgICAgc2V0RXJyb3IsXG4gICAgICBzdHJlYW1EYXRhLFxuICAgICAgc3RyZWFtTW9kZSxcbiAgICAgIG11dGF0ZVN0cmVhbURhdGEsXG4gICAgXSxcbiAgKTtcblxuICBjb25zdCBzdG9wID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2V0QWJvcnRDb250cm9sbGVyKG51bGwpO1xuICAgIH1cbiAgfSwgW2Fib3J0Q29udHJvbGxlcl0pO1xuXG4gIGNvbnN0IHNldENvbXBsZXRpb24gPSB1c2VDYWxsYmFjayhcbiAgICAoY29tcGxldGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICBtdXRhdGUoY29tcGxldGlvbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgW211dGF0ZV0sXG4gICk7XG5cbiAgY29uc3QgY29tcGxldGUgPSB1c2VDYWxsYmFjazxVc2VDb21wbGV0aW9uSGVscGVyc1snY29tcGxldGUnXT4oXG4gICAgYXN5bmMgKHByb21wdCwgb3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHRyaWdnZXJSZXF1ZXN0KHByb21wdCwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBbdHJpZ2dlclJlcXVlc3RdLFxuICApO1xuXG4gIGNvbnN0IFtpbnB1dCwgc2V0SW5wdXRdID0gdXNlU3RhdGUoaW5pdGlhbElucHV0KTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSB1c2VDYWxsYmFjayhcbiAgICAoZTogUmVhY3QuRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD4pID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICghaW5wdXQpIHJldHVybjtcbiAgICAgIHJldHVybiBjb21wbGV0ZShpbnB1dCk7XG4gICAgfSxcbiAgICBbaW5wdXQsIGNvbXBsZXRlXSxcbiAgKTtcblxuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChlOiBhbnkpID0+IHtcbiAgICBzZXRJbnB1dChlLnRhcmdldC52YWx1ZSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjb21wbGV0aW9uLFxuICAgIGNvbXBsZXRlLFxuICAgIGVycm9yLFxuICAgIHNldENvbXBsZXRpb24sXG4gICAgc3RvcCxcbiAgICBpbnB1dCxcbiAgICBzZXRJbnB1dCxcbiAgICBoYW5kbGVJbnB1dENoYW5nZSxcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgaXNMb2FkaW5nLFxuICAgIGRhdGE6IHN0cmVhbURhdGEsXG4gIH07XG59XG4iLCJpbXBvcnQgeyByZWFkRGF0YVN0cmVhbSB9IGZyb20gJy4vcmVhZC1kYXRhLXN0cmVhbSc7XG5pbXBvcnQgeyBKU09OVmFsdWUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUNodW5rRGVjb2RlciB9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FsbENvbXBsZXRpb25BcGkoe1xuICBhcGksXG4gIHByb21wdCxcbiAgY3JlZGVudGlhbHMsXG4gIGhlYWRlcnMsXG4gIGJvZHksXG4gIHN0cmVhbU1vZGUgPSAnc3RyZWFtLWRhdGEnLFxuICBzZXRDb21wbGV0aW9uLFxuICBzZXRMb2FkaW5nLFxuICBzZXRFcnJvcixcbiAgc2V0QWJvcnRDb250cm9sbGVyLFxuICBvblJlc3BvbnNlLFxuICBvbkZpbmlzaCxcbiAgb25FcnJvcixcbiAgb25EYXRhLFxufToge1xuICBhcGk6IHN0cmluZztcbiAgcHJvbXB0OiBzdHJpbmc7XG4gIGNyZWRlbnRpYWxzPzogUmVxdWVzdENyZWRlbnRpYWxzO1xuICBoZWFkZXJzPzogSGVhZGVyc0luaXQ7XG4gIGJvZHk6IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIHN0cmVhbU1vZGU/OiAnc3RyZWFtLWRhdGEnIHwgJ3RleHQnO1xuICBzZXRDb21wbGV0aW9uOiAoY29tcGxldGlvbjogc3RyaW5nKSA9PiB2b2lkO1xuICBzZXRMb2FkaW5nOiAobG9hZGluZzogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0RXJyb3I6IChlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gIHNldEFib3J0Q29udHJvbGxlcjogKGFib3J0Q29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyIHwgbnVsbCkgPT4gdm9pZDtcbiAgb25SZXNwb25zZT86IChyZXNwb25zZTogUmVzcG9uc2UpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xuICBvbkZpbmlzaD86IChwcm9tcHQ6IHN0cmluZywgY29tcGxldGlvbjogc3RyaW5nKSA9PiB2b2lkO1xuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcbiAgb25EYXRhPzogKGRhdGE6IEpTT05WYWx1ZVtdKSA9PiB2b2lkO1xufSkge1xuICB0cnkge1xuICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgc2V0RXJyb3IodW5kZWZpbmVkKTtcblxuICAgIGNvbnN0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBzZXRBYm9ydENvbnRyb2xsZXIoYWJvcnRDb250cm9sbGVyKTtcblxuICAgIC8vIEVtcHR5IHRoZSBjb21wbGV0aW9uIGltbWVkaWF0ZWx5LlxuICAgIHNldENvbXBsZXRpb24oJycpO1xuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYXBpLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICAuLi5ib2R5LFxuICAgICAgfSksXG4gICAgICBjcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgLi4uaGVhZGVycyxcbiAgICAgIH0sXG4gICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9KTtcblxuICAgIGlmIChvblJlc3BvbnNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBvblJlc3BvbnNlKHJlcyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVzLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIChhd2FpdCByZXMudGV4dCgpKSB8fCAnRmFpbGVkIHRvIGZldGNoIHRoZSBjaGF0IHJlc3BvbnNlLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghcmVzLmJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHJlc3BvbnNlIGJvZHkgaXMgZW1wdHkuJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGNvbnN0IHJlYWRlciA9IHJlcy5ib2R5LmdldFJlYWRlcigpO1xuXG4gICAgc3dpdGNoIChzdHJlYW1Nb2RlKSB7XG4gICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gY3JlYXRlQ2h1bmtEZWNvZGVyKCk7XG5cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIGNvbXBsZXRpb24gc3RhdGUgd2l0aCB0aGUgbmV3IG1lc3NhZ2UgdG9rZW5zLlxuICAgICAgICAgIHJlc3VsdCArPSBkZWNvZGVyKHZhbHVlKTtcbiAgICAgICAgICBzZXRDb21wbGV0aW9uKHJlc3VsdCk7XG5cbiAgICAgICAgICAvLyBUaGUgcmVxdWVzdCBoYXMgYmVlbiBhYm9ydGVkLCBzdG9wIHJlYWRpbmcgdGhlIHN0cmVhbS5cbiAgICAgICAgICBpZiAoYWJvcnRDb250cm9sbGVyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZWFkZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSAnc3RyZWFtLWRhdGEnOiB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgeyB0eXBlLCB2YWx1ZSB9IG9mIHJlYWREYXRhU3RyZWFtKHJlYWRlciwge1xuICAgICAgICAgIGlzQWJvcnRlZDogKCkgPT4gYWJvcnRDb250cm9sbGVyID09PSBudWxsLFxuICAgICAgICB9KSkge1xuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAndGV4dCc6IHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhbHVlO1xuICAgICAgICAgICAgICBzZXRDb21wbGV0aW9uKHJlc3VsdCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZGF0YSc6IHtcbiAgICAgICAgICAgICAgb25EYXRhPy4odmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgZXhoYXVzdGl2ZUNoZWNrOiBuZXZlciA9IHN0cmVhbU1vZGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBzdHJlYW0gbW9kZTogJHtleGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRmluaXNoKSB7XG4gICAgICBvbkZpbmlzaChwcm9tcHQsIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgc2V0QWJvcnRDb250cm9sbGVyKG51bGwpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElnbm9yZSBhYm9ydCBlcnJvcnMgYXMgdGhleSBhcmUgZXhwZWN0ZWQuXG4gICAgaWYgKChlcnIgYXMgYW55KS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgIHNldEFib3J0Q29udHJvbGxlcihudWxsKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldEVycm9yKGVyciBhcyBFcnJvcik7XG4gIH0gZmluYWxseSB7XG4gICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzICovXG5cbmltcG9ydCB7IGlzQWJvcnRFcnJvciB9IGZyb20gJ0BhaS1zZGsvcHJvdmlkZXItdXRpbHMnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZW5lcmF0ZUlkIH0gZnJvbSAnLi4vc2hhcmVkL2dlbmVyYXRlLWlkJztcbmltcG9ydCB7IHJlYWREYXRhU3RyZWFtIH0gZnJvbSAnLi4vc2hhcmVkL3JlYWQtZGF0YS1zdHJlYW0nO1xuaW1wb3J0IHtcbiAgQXNzaXN0YW50U3RhdHVzLFxuICBDcmVhdGVNZXNzYWdlLFxuICBNZXNzYWdlLFxuICBVc2VBc3Npc3RhbnRPcHRpb25zLFxufSBmcm9tICcuLi9zaGFyZWQvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBVc2VBc3Npc3RhbnRIZWxwZXJzID0ge1xuICAvKipcbiAgICogVGhlIGN1cnJlbnQgYXJyYXkgb2YgY2hhdCBtZXNzYWdlcy5cbiAgICovXG4gIG1lc3NhZ2VzOiBNZXNzYWdlW107XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgbWVzc2FnZSBzdG9yZSB3aXRoIGEgbmV3IGFycmF5IG9mIG1lc3NhZ2VzLlxuICAgKi9cbiAgc2V0TWVzc2FnZXM6IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPE1lc3NhZ2VbXT4+O1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB0aHJlYWQgSUQuXG4gICAqL1xuICB0aHJlYWRJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgZmllbGQuXG4gICAqL1xuICBpbnB1dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBcHBlbmQgYSB1c2VyIG1lc3NhZ2UgdG8gdGhlIGNoYXQgbGlzdC4gVGhpcyB0cmlnZ2VycyB0aGUgQVBJIGNhbGwgdG8gZmV0Y2hcbiAgICogdGhlIGFzc2lzdGFudCdzIHJlc3BvbnNlLlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBhcHBlbmRcbiAgICogQHBhcmFtIHJlcXVlc3RPcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBwYXNzIHRvIHRoZSBBUEkgY2FsbFxuICAgKi9cbiAgYXBwZW5kOiAoXG4gICAgbWVzc2FnZTogTWVzc2FnZSB8IENyZWF0ZU1lc3NhZ2UsXG4gICAgcmVxdWVzdE9wdGlvbnM/OiB7XG4gICAgICBkYXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgICB9LFxuICApID0+IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG5BYm9ydCB0aGUgY3VycmVudCByZXF1ZXN0IGltbWVkaWF0ZWx5LCBrZWVwIHRoZSBnZW5lcmF0ZWQgdG9rZW5zIGlmIGFueS5cbiAgICovXG4gIHN0b3A6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIHNldFN0YXRlLXBvd2VyZWQgbWV0aG9kIHRvIHVwZGF0ZSB0aGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICBzZXRJbnB1dDogUmVhY3QuRGlzcGF0Y2g8UmVhY3QuU2V0U3RhdGVBY3Rpb248c3RyaW5nPj47XG5cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIHRoZSBgb25DaGFuZ2VgIGV2ZW50IG9mIHRoZSBpbnB1dCBmaWVsZCB0byBjb250cm9sIHRoZSBpbnB1dCdzIHZhbHVlLlxuICAgKi9cbiAgaGFuZGxlSW5wdXRDaGFuZ2U6IChcbiAgICBldmVudDpcbiAgICAgIHwgUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD5cbiAgICAgIHwgUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudD4sXG4gICkgPT4gdm9pZDtcblxuICAvKipcbiAgICogRm9ybSBzdWJtaXNzaW9uIGhhbmRsZXIgdGhhdCBhdXRvbWF0aWNhbGx5IHJlc2V0cyB0aGUgaW5wdXQgZmllbGQgYW5kIGFwcGVuZHMgYSB1c2VyIG1lc3NhZ2UuXG4gICAqL1xuICBzdWJtaXRNZXNzYWdlOiAoXG4gICAgZXZlbnQ/OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PixcbiAgICByZXF1ZXN0T3B0aW9ucz86IHtcbiAgICAgIGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAgIH0sXG4gICkgPT4gUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBhc3Npc3RhbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gc2hvdyBhIGxvYWRpbmcgaW5kaWNhdG9yLlxuICAgKi9cbiAgc3RhdHVzOiBBc3Npc3RhbnRTdGF0dXM7XG5cbiAgLyoqXG4gICAqIFRoZSBlcnJvciB0aHJvd24gZHVyaW5nIHRoZSBhc3Npc3RhbnQgbWVzc2FnZSBwcm9jZXNzaW5nLCBpZiBhbnkuXG4gICAqL1xuICBlcnJvcjogdW5kZWZpbmVkIHwgdW5rbm93bjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VBc3Npc3RhbnQoe1xuICBhcGksXG4gIHRocmVhZElkOiB0aHJlYWRJZFBhcmFtLFxuICBjcmVkZW50aWFscyxcbiAgaGVhZGVycyxcbiAgYm9keSxcbiAgb25FcnJvcixcbn06IFVzZUFzc2lzdGFudE9wdGlvbnMpOiBVc2VBc3Npc3RhbnRIZWxwZXJzIHtcbiAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZTxNZXNzYWdlW10+KFtdKTtcbiAgY29uc3QgW2lucHV0LCBzZXRJbnB1dF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFt0aHJlYWRJZCwgc2V0VGhyZWFkSWRdID0gdXNlU3RhdGU8c3RyaW5nIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGU8QXNzaXN0YW50U3RhdHVzPignYXdhaXRpbmdfbWVzc2FnZScpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHVuZGVmaW5lZCB8IEVycm9yPih1bmRlZmluZWQpO1xuXG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKFxuICAgIGV2ZW50OlxuICAgICAgfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PlxuICAgICAgfCBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PixcbiAgKSA9PiB7XG4gICAgc2V0SW5wdXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfTtcblxuICAvLyBBYm9ydCBjb250cm9sbGVyIHRvIGNhbmNlbCB0aGUgY3VycmVudCBBUEkgY2FsbC5cbiAgY29uc3QgYWJvcnRDb250cm9sbGVyUmVmID0gdXNlUmVmPEFib3J0Q29udHJvbGxlciB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IHN0b3AgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50KSB7XG4gICAgICBhYm9ydENvbnRyb2xsZXJSZWYuY3VycmVudC5hYm9ydCgpO1xuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IGFwcGVuZCA9IGFzeW5jIChcbiAgICBtZXNzYWdlOiBNZXNzYWdlIHwgQ3JlYXRlTWVzc2FnZSxcbiAgICByZXF1ZXN0T3B0aW9ucz86IHtcbiAgICAgIGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAgIH0sXG4gICkgPT4ge1xuICAgIHNldFN0YXR1cygnaW5fcHJvZ3Jlc3MnKTtcblxuICAgIHNldE1lc3NhZ2VzKG1lc3NhZ2VzID0+IFtcbiAgICAgIC4uLm1lc3NhZ2VzLFxuICAgICAge1xuICAgICAgICAuLi5tZXNzYWdlLFxuICAgICAgICBpZDogbWVzc2FnZS5pZCA/PyBnZW5lcmF0ZUlkKCksXG4gICAgICB9LFxuICAgIF0pO1xuXG4gICAgc2V0SW5wdXQoJycpO1xuXG4gICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGFib3J0Q29udHJvbGxlclJlZi5jdXJyZW50ID0gYWJvcnRDb250cm9sbGVyO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaChhcGksIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgLi4uaGVhZGVycyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgLi4uYm9keSxcbiAgICAgICAgICAvLyBhbHdheXMgdXNlIHVzZXItcHJvdmlkZWQgdGhyZWFkSWQgd2hlbiBhdmFpbGFibGU6XG4gICAgICAgICAgdGhyZWFkSWQ6IHRocmVhZElkUGFyYW0gPz8gdGhyZWFkSWQgPz8gbnVsbCxcbiAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLmNvbnRlbnQsXG5cbiAgICAgICAgICAvLyBvcHRpb25hbCByZXF1ZXN0IGRhdGE6XG4gICAgICAgICAgZGF0YTogcmVxdWVzdE9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQuYm9keSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHJlc3BvbnNlIGJvZHkgaXMgZW1wdHkuJyk7XG4gICAgICB9XG5cbiAgICAgIGZvciBhd2FpdCAoY29uc3QgeyB0eXBlLCB2YWx1ZSB9IG9mIHJlYWREYXRhU3RyZWFtKFxuICAgICAgICByZXN1bHQuYm9keS5nZXRSZWFkZXIoKSxcbiAgICAgICkpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAnYXNzaXN0YW50X21lc3NhZ2UnOiB7XG4gICAgICAgICAgICBzZXRNZXNzYWdlcyhtZXNzYWdlcyA9PiBbXG4gICAgICAgICAgICAgIC4uLm1lc3NhZ2VzLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IHZhbHVlLmlkLFxuICAgICAgICAgICAgICAgIHJvbGU6IHZhbHVlLnJvbGUsXG4gICAgICAgICAgICAgICAgY29udGVudDogdmFsdWUuY29udGVudFswXS50ZXh0LnZhbHVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICd0ZXh0Jzoge1xuICAgICAgICAgICAgLy8gdGV4dCBkZWx0YSAtIGFkZCB0byBsYXN0IG1lc3NhZ2U6XG4gICAgICAgICAgICBzZXRNZXNzYWdlcyhtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLi4ubWVzc2FnZXMuc2xpY2UoMCwgbWVzc2FnZXMubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IGxhc3RNZXNzYWdlLmlkLFxuICAgICAgICAgICAgICAgICAgcm9sZTogbGFzdE1lc3NhZ2Uucm9sZSxcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxhc3RNZXNzYWdlLmNvbnRlbnQgKyB2YWx1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2RhdGFfbWVzc2FnZSc6IHtcbiAgICAgICAgICAgIHNldE1lc3NhZ2VzKG1lc3NhZ2VzID0+IFtcbiAgICAgICAgICAgICAgLi4ubWVzc2FnZXMsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogdmFsdWUuaWQgPz8gZ2VuZXJhdGVJZCgpLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdkYXRhJyxcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB2YWx1ZS5kYXRhLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlICdhc3Npc3RhbnRfY29udHJvbF9kYXRhJzoge1xuICAgICAgICAgICAgc2V0VGhyZWFkSWQodmFsdWUudGhyZWFkSWQpO1xuXG4gICAgICAgICAgICAvLyBzZXQgaWQgb2YgbGFzdCBtZXNzYWdlOlxuICAgICAgICAgICAgc2V0TWVzc2FnZXMobWVzc2FnZXMgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBsYXN0TWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICBsYXN0TWVzc2FnZS5pZCA9IHZhbHVlLm1lc3NhZ2VJZDtcbiAgICAgICAgICAgICAgcmV0dXJuIFsuLi5tZXNzYWdlcy5zbGljZSgwLCBtZXNzYWdlcy5sZW5ndGggLSAxKSwgbGFzdE1lc3NhZ2VdO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgJ2Vycm9yJzoge1xuICAgICAgICAgICAgc2V0RXJyb3IobmV3IEVycm9yKHZhbHVlKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWdub3JlIGFib3J0IGVycm9ycyBhcyB0aGV5IGFyZSBleHBlY3RlZCB3aGVuIHRoZSB1c2VyIGNhbmNlbHMgdGhlIHJlcXVlc3Q6XG4gICAgICBpZiAoaXNBYm9ydEVycm9yKGVycm9yKSAmJiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChvbkVycm9yICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHNldEVycm9yKGVycm9yIGFzIEVycm9yKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYWJvcnRDb250cm9sbGVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgc2V0U3RhdHVzKCdhd2FpdGluZ19tZXNzYWdlJyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHN1Ym1pdE1lc3NhZ2UgPSBhc3luYyAoXG4gICAgZXZlbnQ/OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PixcbiAgICByZXF1ZXN0T3B0aW9ucz86IHtcbiAgICAgIGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAgIH0sXG4gICkgPT4ge1xuICAgIGV2ZW50Py5wcmV2ZW50RGVmYXVsdD8uKCk7XG5cbiAgICBpZiAoaW5wdXQgPT09ICcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXBwZW5kKHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiBpbnB1dCB9LCByZXF1ZXN0T3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhcHBlbmQsXG4gICAgbWVzc2FnZXMsXG4gICAgc2V0TWVzc2FnZXMsXG4gICAgdGhyZWFkSWQsXG4gICAgaW5wdXQsXG4gICAgc2V0SW5wdXQsXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgc3VibWl0TWVzc2FnZSxcbiAgICBzdGF0dXMsXG4gICAgZXJyb3IsXG4gICAgc3RvcCxcbiAgfTtcbn1cblxuLyoqXG5AZGVwcmVjYXRlZCBVc2UgYHVzZUFzc2lzdGFudGAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGV4cGVyaW1lbnRhbF91c2VBc3Npc3RhbnQgPSB1c2VBc3Npc3RhbnQ7XG4iXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJ1c2VFZmZlY3QiLCJ1c2VJZCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlU1dSIiwiY3VzdG9tQWxwaGFiZXQiLCJnZW5lcmF0ZUlkIiwidGV4dFN0cmVhbVBhcnQiLCJjb2RlIiwibmFtZSIsInBhcnNlIiwidmFsdWUiLCJFcnJvciIsInR5cGUiLCJmdW5jdGlvbkNhbGxTdHJlYW1QYXJ0IiwiZnVuY3Rpb25fY2FsbCIsImFyZ3VtZW50cyIsImRhdGFTdHJlYW1QYXJ0IiwiQXJyYXkiLCJpc0FycmF5IiwiZXJyb3JTdHJlYW1QYXJ0IiwiYXNzaXN0YW50TWVzc2FnZVN0cmVhbVBhcnQiLCJpZCIsInJvbGUiLCJjb250ZW50IiwiZXZlcnkiLCJpdGVtIiwidGV4dCIsImFzc2lzdGFudENvbnRyb2xEYXRhU3RyZWFtUGFydCIsInRocmVhZElkIiwibWVzc2FnZUlkIiwiZGF0YU1lc3NhZ2VTdHJlYW1QYXJ0IiwidG9vbENhbGxzU3RyZWFtUGFydCIsInRvb2xfY2FsbHMiLCJzb21lIiwidGMiLCJmdW5jdGlvbiIsIm1lc3NhZ2VBbm5vdGF0aW9uc1N0cmVhbVBhcnQiLCJ0b29sQ2FsbFN0cmVhbVBhcnQiLCJ0b29sQ2FsbElkIiwidG9vbE5hbWUiLCJhcmdzIiwidG9vbFJlc3VsdFN0cmVhbVBhcnQiLCJzdHJlYW1QYXJ0cyIsInN0cmVhbVBhcnRzQnlDb2RlIiwiU3RyZWFtU3RyaW5nUHJlZml4ZXMiLCJ2YWxpZENvZGVzIiwibWFwIiwicGFydCIsInBhcnNlU3RyZWFtUGFydCIsImxpbmUiLCJmaXJzdFNlcGFyYXRvckluZGV4IiwiaW5kZXhPZiIsInByZWZpeCIsInNsaWNlIiwiaW5jbHVkZXMiLCJ0ZXh0VmFsdWUiLCJqc29uVmFsdWUiLCJKU09OIiwiTkVXTElORSIsImNoYXJDb2RlQXQiLCJjb25jYXRDaHVua3MiLCJjaHVua3MiLCJ0b3RhbExlbmd0aCIsImNvbmNhdGVuYXRlZENodW5rcyIsIlVpbnQ4QXJyYXkiLCJvZmZzZXQiLCJjaHVuayIsInNldCIsImxlbmd0aCIsInJlYWREYXRhU3RyZWFtIiwicmVhZGVyIiwiaXNBYm9ydGVkIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwicmVhZCIsInB1c2giLCJkZWNvZGUiLCJzdHJlYW0iLCJzcGxpdCIsImZpbHRlciIsInN0cmVhbVBhcnQiLCJjYW5jZWwiLCJhc3NpZ25Bbm5vdGF0aW9uc1RvTWVzc2FnZSIsIm1lc3NhZ2UiLCJhbm5vdGF0aW9ucyIsInBhcnNlQ29tcGxleFJlc3BvbnNlIiwiYWJvcnRDb250cm9sbGVyUmVmIiwidXBkYXRlIiwib25Ub29sQ2FsbCIsIm9uRmluaXNoIiwiZ2V0Q3VycmVudERhdGUiLCJEYXRlIiwiY3JlYXRlZEF0IiwicHJlZml4TWFwIiwiZGF0YSIsIm1lc3NhZ2VfYW5ub3RhdGlvbnMiLCJjdXJyZW50IiwidG9vbEludm9jYXRpb25zIiwicmVzdWx0IiwidG9vbENhbGwiLCJ0b29sSW52b2NhdGlvbkluZGV4IiwiZmluZEluZGV4IiwiaW52b2NhdGlvbiIsImZ1bmN0aW9uQ2FsbE1lc3NhZ2UiLCJ0b29sQ2FsbE1lc3NhZ2UiLCJyZXNwb25zZU1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4S2V5cyIsImZvckVhY2giLCJrZXkiLCJtZXJnZWQiLCJCb29sZWFuIiwibWVzc2FnZXMiLCJjcmVhdGVDaHVua0RlY29kZXIiLCJjb21wbGV4IiwiZGVjb2RlZCIsImNhbGxDaGF0QXBpIiwiYXBpIiwiYm9keSIsInN0cmVhbU1vZGUiLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJhYm9ydENvbnRyb2xsZXIiLCJyZXN0b3JlTWVzc2FnZXNPbkZhaWx1cmUiLCJvblJlc3BvbnNlIiwib25VcGRhdGUiLCJfYSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJzdHJpbmdpZnkiLCJzaWduYWwiLCJjYXRjaCIsImVyciIsIm9rIiwiZ2V0UmVhZGVyIiwicmVzdWx0TWVzc2FnZSIsImRvbmUiLCJleGhhdXN0aXZlQ2hlY2siLCJwcm9jZXNzQ2hhdFN0cmVhbSIsImdldFN0cmVhbWVkUmVzcG9uc2UiLCJleHBlcmltZW50YWxfb25GdW5jdGlvbkNhbGwiLCJleHBlcmltZW50YWxfb25Ub29sQ2FsbCIsInVwZGF0ZUNoYXRSZXF1ZXN0IiwiZ2V0Q3VycmVudE1lc3NhZ2VzIiwibWVzc2FnZXNBbmREYXRhT3JKdXN0TWVzc2FnZSIsImhhc0ZvbGxvd2luZ1Jlc3BvbnNlIiwiZnVuY3Rpb25DYWxsIiwiY29uc29sZSIsIndhcm4iLCJmdW5jdGlvbkNhbGxSZXNwb25zZSIsInRvb2xDYWxscyIsInRvb2xDYWxsUmVzcG9uc2UiLCJmaXhGdW5jdGlvbkNhbGxBcmd1bWVudHMiLCJzdHJlYW1lZFJlc3BvbnNlTWVzc2FnZSIsImNoYXRSZXF1ZXN0IiwibXV0YXRlIiwibXV0YXRlU3RyZWFtRGF0YSIsImV4aXN0aW5nRGF0YSIsImV4dHJhTWV0YWRhdGFSZWYiLCJtZXNzYWdlc1JlZiIsInNlbmRFeHRyYU1lc3NhZ2VGaWVsZHMiLCJfYiIsInByZXZpb3VzTWVzc2FnZXMiLCJjb25zdHJ1Y3RlZE1lc3NhZ2VzUGF5bG9hZCIsInRvb2xfY2FsbF9pZCIsInJlcGx5SWQiLCJyZWFkUm93IiwicHJvbWlzZSIsInVpIiwibmV4dCIsImUiLCJvcHRpb25zIiwiZnVuY3Rpb25zIiwidG9vbHMiLCJ0b29sX2Nob2ljZSIsInVzZUNoYXQiLCJpbml0aWFsTWVzc2FnZXMiLCJpbml0aWFsSW5wdXQiLCJleHBlcmltZW50YWxfbWF4QXV0b21hdGljUm91bmR0cmlwcyIsIm1heEF1dG9tYXRpY1JvdW5kdHJpcHMiLCJtYXhUb29sUm91bmR0cmlwcyIsIm9uRXJyb3IiLCJob29rSWQiLCJpZEtleSIsImNoYXRLZXkiLCJpbml0aWFsTWVzc2FnZXNGYWxsYmFjayIsImZhbGxiYWNrRGF0YSIsImlzTG9hZGluZyIsIm11dGF0ZUxvYWRpbmciLCJzdHJlYW1EYXRhIiwiZXJyb3IiLCJzZXRFcnJvciIsInRyaWdnZXJSZXF1ZXN0IiwiQWJvcnRDb250cm9sbGVyIiwiY2hhdFJlcXVlc3RQYXJhbSIsImxhc3RNZXNzYWdlIiwiaXNBc3Npc3RhbnRNZXNzYWdlV2l0aENvbXBsZXRlZFRvb2xDYWxscyIsImNvdW50VHJhaWxpbmdBc3Npc3RhbnRNZXNzYWdlcyIsImFwcGVuZCIsImNvbmNhdCIsInJlbG9hZCIsInN0b3AiLCJhYm9ydCIsInNldE1lc3NhZ2VzIiwiaW5wdXQiLCJzZXRJbnB1dCIsImhhbmRsZVN1Ym1pdCIsIm1ldGFkYXRhIiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVJbnB1dENoYW5nZSIsInRhcmdldCIsImFkZFRvb2xSZXN1bHQiLCJ1cGRhdGVkTWVzc2FnZXMiLCJpbmRleCIsImFyciIsInRvb2xJbnZvY2F0aW9uIiwiZXhwZXJpbWVudGFsX2FkZFRvb2xSZXN1bHQiLCJjb3VudCIsImkiLCJjYWxsQ29tcGxldGlvbkFwaSIsInByb21wdCIsInNldENvbXBsZXRpb24iLCJzZXRMb2FkaW5nIiwic2V0QWJvcnRDb250cm9sbGVyIiwib25EYXRhIiwicmVzIiwidXNlQ29tcGxldGlvbiIsImluaXRpYWxDb21wbGV0aW9uIiwiY29tcGxldGlvbklkIiwiY29tcGxldGlvbiIsImNvbXBsZXRlIiwiaXNBYm9ydEVycm9yIiwidXNlQXNzaXN0YW50IiwidGhyZWFkSWRQYXJhbSIsInNldFRocmVhZElkIiwic3RhdHVzIiwic2V0U3RhdHVzIiwiZXZlbnQiLCJyZXF1ZXN0T3B0aW9ucyIsImFib3J0ZWQiLCJzdWJtaXRNZXNzYWdlIiwiY2FsbCIsImV4cGVyaW1lbnRhbF91c2VBc3Npc3RhbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ai/react/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/dist/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/ai/dist/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIStream: () => (/* binding */ AIStream),\n/* harmony export */   APICallError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError),\n/* harmony export */   AWSBedrockAnthropicMessagesStream: () => (/* binding */ AWSBedrockAnthropicMessagesStream),\n/* harmony export */   AWSBedrockAnthropicStream: () => (/* binding */ AWSBedrockAnthropicStream),\n/* harmony export */   AWSBedrockCohereStream: () => (/* binding */ AWSBedrockCohereStream),\n/* harmony export */   AWSBedrockLlama2Stream: () => (/* binding */ AWSBedrockLlama2Stream),\n/* harmony export */   AWSBedrockStream: () => (/* binding */ AWSBedrockStream),\n/* harmony export */   AnthropicStream: () => (/* binding */ AnthropicStream),\n/* harmony export */   AssistantResponse: () => (/* binding */ AssistantResponse),\n/* harmony export */   CohereStream: () => (/* binding */ CohereStream),\n/* harmony export */   EmbedManyResult: () => (/* binding */ EmbedManyResult),\n/* harmony export */   EmbedResult: () => (/* binding */ EmbedResult),\n/* harmony export */   EmptyResponseBodyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.EmptyResponseBodyError),\n/* harmony export */   GenerateObjectResult: () => (/* binding */ GenerateObjectResult),\n/* harmony export */   GenerateTextResult: () => (/* binding */ GenerateTextResult),\n/* harmony export */   GoogleGenerativeAIStream: () => (/* binding */ GoogleGenerativeAIStream),\n/* harmony export */   HuggingFaceStream: () => (/* binding */ HuggingFaceStream),\n/* harmony export */   InkeepStream: () => (/* binding */ InkeepStream),\n/* harmony export */   InvalidArgumentError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError),\n/* harmony export */   InvalidDataContentError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidDataContentError),\n/* harmony export */   InvalidPromptError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError),\n/* harmony export */   InvalidResponseDataError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidResponseDataError),\n/* harmony export */   InvalidToolArgumentsError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidToolArgumentsError),\n/* harmony export */   JSONParseError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.JSONParseError),\n/* harmony export */   LangChainAdapter: () => (/* binding */ langchain_adapter_exports),\n/* harmony export */   LangChainStream: () => (/* binding */ LangChainStream),\n/* harmony export */   LoadAPIKeyError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.LoadAPIKeyError),\n/* harmony export */   MistralStream: () => (/* binding */ MistralStream),\n/* harmony export */   NoObjectGeneratedError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoObjectGeneratedError),\n/* harmony export */   NoSuchToolError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchToolError),\n/* harmony export */   OpenAIStream: () => (/* binding */ OpenAIStream),\n/* harmony export */   ReplicateStream: () => (/* binding */ ReplicateStream),\n/* harmony export */   RetryError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.RetryError),\n/* harmony export */   StreamData: () => (/* binding */ StreamData),\n/* harmony export */   StreamObjectResult: () => (/* binding */ StreamObjectResult),\n/* harmony export */   StreamTextResult: () => (/* binding */ StreamTextResult),\n/* harmony export */   StreamingTextResponse: () => (/* binding */ StreamingTextResponse),\n/* harmony export */   ToolCallParseError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.ToolCallParseError),\n/* harmony export */   TypeValidationError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.TypeValidationError),\n/* harmony export */   UnsupportedFunctionalityError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedFunctionalityError),\n/* harmony export */   UnsupportedJSONSchemaError: () => (/* reexport safe */ _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.UnsupportedJSONSchemaError),\n/* harmony export */   convertDataContentToBase64String: () => (/* binding */ convertDataContentToBase64String),\n/* harmony export */   convertDataContentToUint8Array: () => (/* binding */ convertDataContentToUint8Array),\n/* harmony export */   convertToCoreMessages: () => (/* binding */ convertToCoreMessages),\n/* harmony export */   createCallbacksTransformer: () => (/* binding */ createCallbacksTransformer),\n/* harmony export */   createChunkDecoder: () => (/* binding */ createChunkDecoder),\n/* harmony export */   createEventStreamTransformer: () => (/* binding */ createEventStreamTransformer),\n/* harmony export */   createStreamDataTransformer: () => (/* binding */ createStreamDataTransformer),\n/* harmony export */   embed: () => (/* binding */ embed),\n/* harmony export */   embedMany: () => (/* binding */ embedMany),\n/* harmony export */   experimental_AssistantResponse: () => (/* binding */ experimental_AssistantResponse),\n/* harmony export */   experimental_StreamData: () => (/* binding */ experimental_StreamData),\n/* harmony export */   experimental_StreamingReactResponse: () => (/* binding */ experimental_StreamingReactResponse),\n/* harmony export */   experimental_generateObject: () => (/* binding */ experimental_generateObject),\n/* harmony export */   experimental_generateText: () => (/* binding */ experimental_generateText),\n/* harmony export */   experimental_streamObject: () => (/* binding */ experimental_streamObject),\n/* harmony export */   experimental_streamText: () => (/* binding */ experimental_streamText),\n/* harmony export */   formatStreamPart: () => (/* binding */ formatStreamPart),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   generateObject: () => (/* binding */ generateObject),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   isStreamStringEqualToType: () => (/* binding */ isStreamStringEqualToType),\n/* harmony export */   nanoid: () => (/* binding */ generateId),\n/* harmony export */   parseStreamPart: () => (/* binding */ parseStreamPart),\n/* harmony export */   readDataStream: () => (/* binding */ readDataStream),\n/* harmony export */   readableFromAsyncIterable: () => (/* binding */ readableFromAsyncIterable),\n/* harmony export */   streamObject: () => (/* binding */ streamObject),\n/* harmony export */   streamText: () => (/* binding */ streamText),\n/* harmony export */   streamToResponse: () => (/* binding */ streamToResponse),\n/* harmony export */   tool: () => (/* binding */ tool),\n/* harmony export */   trimStartOfStreamHelper: () => (/* binding */ trimStartOfStreamHelper)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var secure_json_parse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! secure-json-parse */ \"(rsc)/./node_modules/secure-json-parse/index.js\");\n/* harmony import */ var nanoid_non_secure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid/non-secure */ \"(rsc)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\");\n/* harmony import */ var eventsource_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventsource-parser */ \"(rsc)/./node_modules/eventsource-parser/dist/index.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// core/util/retry-with-exponential-backoff.ts\n\n\n\n// core/util/delay.ts\nasync function delay(delayInMs) {\n  return new Promise((resolve) => setTimeout(resolve, delayInMs));\n}\n\n// core/util/retry-with-exponential-backoff.ts\nvar retryWithExponentialBackoff = ({\n  maxRetries = 2,\n  initialDelayInMs = 2e3,\n  backoffFactor = 2\n} = {}) => async (f) => _retryWithExponentialBackoff(f, {\n  maxRetries,\n  delayInMs: initialDelayInMs,\n  backoffFactor\n});\nasync function _retryWithExponentialBackoff(f, {\n  maxRetries,\n  delayInMs,\n  backoffFactor\n}, errors = []) {\n  try {\n    return await f();\n  } catch (error) {\n    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.isAbortError)(error)) {\n      throw error;\n    }\n    if (maxRetries === 0) {\n      throw error;\n    }\n    const errorMessage = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.getErrorMessage)(error);\n    const newErrors = [...errors, error];\n    const tryNumber = newErrors.length;\n    if (tryNumber > maxRetries) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.RetryError({\n        message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,\n        reason: \"maxRetriesExceeded\",\n        errors: newErrors\n      });\n    }\n    if (error instanceof Error && _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.APICallError.isAPICallError(error) && error.isRetryable === true && tryNumber <= maxRetries) {\n      await delay(delayInMs);\n      return _retryWithExponentialBackoff(\n        f,\n        { maxRetries, delayInMs: backoffFactor * delayInMs, backoffFactor },\n        newErrors\n      );\n    }\n    if (tryNumber === 1) {\n      throw error;\n    }\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.RetryError({\n      message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,\n      reason: \"errorNotRetryable\",\n      errors: newErrors\n    });\n  }\n}\n\n// core/embed/embed.ts\nasync function embed({\n  model,\n  value,\n  maxRetries,\n  abortSignal\n}) {\n  const retry = retryWithExponentialBackoff({ maxRetries });\n  const modelResponse = await retry(\n    () => model.doEmbed({\n      values: [value],\n      abortSignal\n    })\n  );\n  return new EmbedResult({\n    value,\n    embedding: modelResponse.embeddings[0],\n    rawResponse: modelResponse.rawResponse\n  });\n}\nvar EmbedResult = class {\n  constructor(options) {\n    this.value = options.value;\n    this.embedding = options.embedding;\n    this.rawResponse = options.rawResponse;\n  }\n};\n\n// core/util/split-array.ts\nfunction splitArray(array, chunkSize) {\n  if (chunkSize <= 0) {\n    throw new Error(\"chunkSize must be greater than 0\");\n  }\n  const result = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n  return result;\n}\n\n// core/embed/embed-many.ts\nasync function embedMany({\n  model,\n  values,\n  maxRetries,\n  abortSignal\n}) {\n  const retry = retryWithExponentialBackoff({ maxRetries });\n  const maxEmbeddingsPerCall = model.maxEmbeddingsPerCall;\n  if (maxEmbeddingsPerCall == null) {\n    const modelResponse = await retry(\n      () => model.doEmbed({ values, abortSignal })\n    );\n    return new EmbedManyResult({\n      values,\n      embeddings: modelResponse.embeddings\n    });\n  }\n  const valueChunks = splitArray(values, maxEmbeddingsPerCall);\n  const embeddings = [];\n  for (const chunk of valueChunks) {\n    const modelResponse = await retry(\n      () => model.doEmbed({ values: chunk, abortSignal })\n    );\n    embeddings.push(...modelResponse.embeddings);\n  }\n  return new EmbedManyResult({ values, embeddings });\n}\nvar EmbedManyResult = class {\n  constructor(options) {\n    this.values = options.values;\n    this.embeddings = options.embeddings;\n  }\n};\n\n// core/generate-object/generate-object.ts\n\n\n\n// core/generate-text/token-usage.ts\nfunction calculateTokenUsage(usage) {\n  return {\n    promptTokens: usage.promptTokens,\n    completionTokens: usage.completionTokens,\n    totalTokens: usage.promptTokens + usage.completionTokens\n  };\n}\n\n// core/util/detect-image-mimetype.ts\nvar mimeTypeSignatures = [\n  { mimeType: \"image/gif\", bytes: [71, 73, 70] },\n  { mimeType: \"image/png\", bytes: [137, 80, 78, 71] },\n  { mimeType: \"image/jpeg\", bytes: [255, 216] },\n  { mimeType: \"image/webp\", bytes: [82, 73, 70, 70] }\n];\nfunction detectImageMimeType(image) {\n  for (const { bytes, mimeType } of mimeTypeSignatures) {\n    if (image.length >= bytes.length && bytes.every((byte, index) => image[index] === byte)) {\n      return mimeType;\n    }\n  }\n  return void 0;\n}\n\n// core/prompt/data-content.ts\n\n\nfunction convertDataContentToBase64String(content) {\n  if (typeof content === \"string\") {\n    return content;\n  }\n  if (content instanceof ArrayBuffer) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.convertUint8ArrayToBase64)(new Uint8Array(content));\n  }\n  return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.convertUint8ArrayToBase64)(content);\n}\nfunction convertDataContentToUint8Array(content) {\n  if (content instanceof Uint8Array) {\n    return content;\n  }\n  if (typeof content === \"string\") {\n    try {\n      return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.convertBase64ToUint8Array)(content);\n    } catch (error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidDataContentError({\n        message: \"Invalid data content. Content string is not a base64-encoded image.\",\n        content,\n        cause: error\n      });\n    }\n  }\n  if (content instanceof ArrayBuffer) {\n    return new Uint8Array(content);\n  }\n  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidDataContentError({ content });\n}\n\n// core/prompt/convert-to-language-model-prompt.ts\nfunction convertToLanguageModelPrompt(prompt) {\n  const languageModelMessages = [];\n  if (prompt.system != null) {\n    languageModelMessages.push({ role: \"system\", content: prompt.system });\n  }\n  const promptType = prompt.type;\n  switch (promptType) {\n    case \"prompt\": {\n      languageModelMessages.push({\n        role: \"user\",\n        content: [{ type: \"text\", text: prompt.prompt }]\n      });\n      break;\n    }\n    case \"messages\": {\n      languageModelMessages.push(\n        ...prompt.messages.map(convertToLanguageModelMessage)\n      );\n      break;\n    }\n    default: {\n      const _exhaustiveCheck = promptType;\n      throw new Error(`Unsupported prompt type: ${_exhaustiveCheck}`);\n    }\n  }\n  return languageModelMessages;\n}\nfunction convertToLanguageModelMessage(message) {\n  switch (message.role) {\n    case \"system\": {\n      return { role: \"system\", content: message.content };\n    }\n    case \"user\": {\n      if (typeof message.content === \"string\") {\n        return {\n          role: \"user\",\n          content: [{ type: \"text\", text: message.content }]\n        };\n      }\n      return {\n        role: \"user\",\n        content: message.content.map(\n          (part) => {\n            var _a;\n            switch (part.type) {\n              case \"text\": {\n                return part;\n              }\n              case \"image\": {\n                if (part.image instanceof URL) {\n                  return {\n                    type: \"image\",\n                    image: part.image,\n                    mimeType: part.mimeType\n                  };\n                }\n                const imageUint8 = convertDataContentToUint8Array(part.image);\n                return {\n                  type: \"image\",\n                  image: imageUint8,\n                  mimeType: (_a = part.mimeType) != null ? _a : detectImageMimeType(imageUint8)\n                };\n              }\n            }\n          }\n        )\n      };\n    }\n    case \"assistant\": {\n      if (typeof message.content === \"string\") {\n        return {\n          role: \"assistant\",\n          content: [{ type: \"text\", text: message.content }]\n        };\n      }\n      return { role: \"assistant\", content: message.content };\n    }\n    case \"tool\": {\n      return message;\n    }\n    default: {\n      const _exhaustiveCheck = message;\n      throw new Error(`Unsupported message role: ${_exhaustiveCheck}`);\n    }\n  }\n}\n\n// core/prompt/get-validated-prompt.ts\n\nfunction getValidatedPrompt(prompt) {\n  if (prompt.prompt == null && prompt.messages == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n      prompt,\n      message: \"prompt or messages must be defined\"\n    });\n  }\n  if (prompt.prompt != null && prompt.messages != null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidPromptError({\n      prompt,\n      message: \"prompt and messages cannot be defined at the same time\"\n    });\n  }\n  return prompt.prompt != null ? {\n    type: \"prompt\",\n    prompt: prompt.prompt,\n    messages: void 0,\n    system: prompt.system\n  } : {\n    type: \"messages\",\n    prompt: void 0,\n    messages: prompt.messages,\n    // only possible case bc of checks above\n    system: prompt.system\n  };\n}\n\n// core/prompt/prepare-call-settings.ts\n\nfunction prepareCallSettings({\n  maxTokens,\n  temperature,\n  topP,\n  presencePenalty,\n  frequencyPenalty,\n  seed,\n  maxRetries\n}) {\n  if (maxTokens != null) {\n    if (!Number.isInteger(maxTokens)) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"maxTokens\",\n        value: maxTokens,\n        message: \"maxTokens must be an integer\"\n      });\n    }\n    if (maxTokens < 1) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"maxTokens\",\n        value: maxTokens,\n        message: \"maxTokens must be >= 1\"\n      });\n    }\n  }\n  if (temperature != null) {\n    if (typeof temperature !== \"number\") {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"temperature\",\n        value: temperature,\n        message: \"temperature must be a number\"\n      });\n    }\n  }\n  if (topP != null) {\n    if (typeof topP !== \"number\") {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"topP\",\n        value: topP,\n        message: \"topP must be a number\"\n      });\n    }\n  }\n  if (presencePenalty != null) {\n    if (typeof presencePenalty !== \"number\") {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"presencePenalty\",\n        value: presencePenalty,\n        message: \"presencePenalty must be a number\"\n      });\n    }\n  }\n  if (frequencyPenalty != null) {\n    if (typeof frequencyPenalty !== \"number\") {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"frequencyPenalty\",\n        value: frequencyPenalty,\n        message: \"frequencyPenalty must be a number\"\n      });\n    }\n  }\n  if (seed != null) {\n    if (!Number.isInteger(seed)) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"seed\",\n        value: seed,\n        message: \"seed must be an integer\"\n      });\n    }\n  }\n  if (maxRetries != null) {\n    if (!Number.isInteger(maxRetries)) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"maxRetries\",\n        value: maxRetries,\n        message: \"maxRetries must be an integer\"\n      });\n    }\n    if (maxRetries < 0) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidArgumentError({\n        parameter: \"maxRetries\",\n        value: maxRetries,\n        message: \"maxRetries must be >= 0\"\n      });\n    }\n  }\n  return {\n    maxTokens,\n    temperature: temperature != null ? temperature : 0,\n    topP,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    maxRetries: maxRetries != null ? maxRetries : 2\n  };\n}\n\n// core/util/convert-zod-to-json-schema.ts\n\nfunction convertZodToJSONSchema(zodSchema) {\n  return (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(zodSchema);\n}\n\n// core/generate-object/inject-json-schema-into-system.ts\nvar DEFAULT_SCHEMA_PREFIX = \"JSON schema:\";\nvar DEFAULT_SCHEMA_SUFFIX = \"You MUST answer with a JSON object that matches the JSON schema above.\";\nfunction injectJsonSchemaIntoSystem({\n  system,\n  schema,\n  schemaPrefix = DEFAULT_SCHEMA_PREFIX,\n  schemaSuffix = DEFAULT_SCHEMA_SUFFIX\n}) {\n  return [\n    system,\n    system != null ? \"\" : null,\n    // add a newline if system is not null\n    schemaPrefix,\n    JSON.stringify(schema),\n    schemaSuffix\n  ].filter((line) => line != null).join(\"\\n\");\n}\n\n// core/generate-object/generate-object.ts\nasync function generateObject({\n  model,\n  schema,\n  mode,\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  ...settings\n}) {\n  var _a, _b;\n  const retry = retryWithExponentialBackoff({ maxRetries });\n  const jsonSchema = convertZodToJSONSchema(schema);\n  if (mode === \"auto\" || mode == null) {\n    mode = model.defaultObjectGenerationMode;\n  }\n  let result;\n  let finishReason;\n  let usage;\n  let warnings;\n  let rawResponse;\n  let logprobs;\n  switch (mode) {\n    case \"json\": {\n      const validatedPrompt = getValidatedPrompt({\n        system: injectJsonSchemaIntoSystem({ system, schema: jsonSchema }),\n        prompt,\n        messages\n      });\n      const generateResult = await retry(() => {\n        return model.doGenerate({\n          mode: { type: \"object-json\" },\n          ...prepareCallSettings(settings),\n          inputFormat: validatedPrompt.type,\n          prompt: convertToLanguageModelPrompt(validatedPrompt),\n          abortSignal\n        });\n      });\n      if (generateResult.text === void 0) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoObjectGeneratedError();\n      }\n      result = generateResult.text;\n      finishReason = generateResult.finishReason;\n      usage = generateResult.usage;\n      warnings = generateResult.warnings;\n      rawResponse = generateResult.rawResponse;\n      logprobs = generateResult.logprobs;\n      break;\n    }\n    case \"grammar\": {\n      const validatedPrompt = getValidatedPrompt({\n        system: injectJsonSchemaIntoSystem({ system, schema: jsonSchema }),\n        prompt,\n        messages\n      });\n      const generateResult = await retry(\n        () => model.doGenerate({\n          mode: { type: \"object-grammar\", schema: jsonSchema },\n          ...settings,\n          inputFormat: validatedPrompt.type,\n          prompt: convertToLanguageModelPrompt(validatedPrompt),\n          abortSignal\n        })\n      );\n      if (generateResult.text === void 0) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoObjectGeneratedError();\n      }\n      result = generateResult.text;\n      finishReason = generateResult.finishReason;\n      usage = generateResult.usage;\n      warnings = generateResult.warnings;\n      rawResponse = generateResult.rawResponse;\n      logprobs = generateResult.logprobs;\n      break;\n    }\n    case \"tool\": {\n      const validatedPrompt = getValidatedPrompt({\n        system,\n        prompt,\n        messages\n      });\n      const generateResult = await retry(\n        () => model.doGenerate({\n          mode: {\n            type: \"object-tool\",\n            tool: {\n              type: \"function\",\n              name: \"json\",\n              description: \"Respond with a JSON object.\",\n              parameters: jsonSchema\n            }\n          },\n          ...settings,\n          inputFormat: validatedPrompt.type,\n          prompt: convertToLanguageModelPrompt(validatedPrompt),\n          abortSignal\n        })\n      );\n      const functionArgs = (_b = (_a = generateResult.toolCalls) == null ? void 0 : _a[0]) == null ? void 0 : _b.args;\n      if (functionArgs === void 0) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoObjectGeneratedError();\n      }\n      result = functionArgs;\n      finishReason = generateResult.finishReason;\n      usage = generateResult.usage;\n      warnings = generateResult.warnings;\n      rawResponse = generateResult.rawResponse;\n      logprobs = generateResult.logprobs;\n      break;\n    }\n    case void 0: {\n      throw new Error(\"Model does not have a default object generation mode.\");\n    }\n    default: {\n      const _exhaustiveCheck = mode;\n      throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n    }\n  }\n  const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)({ text: result, schema });\n  if (!parseResult.success) {\n    throw parseResult.error;\n  }\n  return new GenerateObjectResult({\n    object: parseResult.value,\n    finishReason,\n    usage: calculateTokenUsage(usage),\n    warnings,\n    rawResponse,\n    logprobs\n  });\n}\nvar GenerateObjectResult = class {\n  constructor(options) {\n    this.object = options.object;\n    this.finishReason = options.finishReason;\n    this.usage = options.usage;\n    this.warnings = options.warnings;\n    this.rawResponse = options.rawResponse;\n    this.logprobs = options.logprobs;\n  }\n};\nvar experimental_generateObject = generateObject;\n\n// core/util/async-iterable-stream.ts\nfunction createAsyncIterableStream(source, transformer) {\n  const transformedStream = source.pipeThrough(\n    new TransformStream(transformer)\n  );\n  transformedStream[Symbol.asyncIterator] = () => {\n    const reader = transformedStream.getReader();\n    return {\n      async next() {\n        const { done, value } = await reader.read();\n        return done ? { done: true, value: void 0 } : { done: false, value };\n      }\n    };\n  };\n  return transformedStream;\n}\n\n// core/util/is-deep-equal-data.ts\nfunction isDeepEqualData(obj1, obj2) {\n  if (obj1 === obj2)\n    return true;\n  if (obj1 == null || obj2 == null)\n    return false;\n  if (typeof obj1 !== \"object\" && typeof obj2 !== \"object\")\n    return obj1 === obj2;\n  if (obj1.constructor !== obj2.constructor)\n    return false;\n  if (obj1 instanceof Date && obj2 instanceof Date) {\n    return obj1.getTime() === obj2.getTime();\n  }\n  if (Array.isArray(obj1)) {\n    if (obj1.length !== obj2.length)\n      return false;\n    for (let i = 0; i < obj1.length; i++) {\n      if (!isDeepEqualData(obj1[i], obj2[i]))\n        return false;\n    }\n    return true;\n  }\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length)\n    return false;\n  for (const key of keys1) {\n    if (!keys2.includes(key))\n      return false;\n    if (!isDeepEqualData(obj1[key], obj2[key]))\n      return false;\n  }\n  return true;\n}\n\n// core/util/parse-partial-json.ts\n\n\n// core/util/fix-json.ts\nfunction fixJson(input) {\n  const stack = [\"ROOT\"];\n  let lastValidIndex = -1;\n  let literalStart = null;\n  function processValueStart(char, i, swapState) {\n    {\n      switch (char) {\n        case '\"': {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push(\"INSIDE_STRING\");\n          break;\n        }\n        case \"f\":\n        case \"t\":\n        case \"n\": {\n          lastValidIndex = i;\n          literalStart = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push(\"INSIDE_LITERAL\");\n          break;\n        }\n        case \"-\": {\n          stack.pop();\n          stack.push(swapState);\n          stack.push(\"INSIDE_NUMBER\");\n          break;\n        }\n        case \"0\":\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n        case \"9\": {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push(\"INSIDE_NUMBER\");\n          break;\n        }\n        case \"{\": {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push(\"INSIDE_OBJECT_START\");\n          break;\n        }\n        case \"[\": {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push(\"INSIDE_ARRAY_START\");\n          break;\n        }\n      }\n    }\n  }\n  function processAfterObjectValue(char, i) {\n    switch (char) {\n      case \",\": {\n        stack.pop();\n        stack.push(\"INSIDE_OBJECT_AFTER_COMMA\");\n        break;\n      }\n      case \"}\": {\n        lastValidIndex = i;\n        stack.pop();\n        break;\n      }\n    }\n  }\n  function processAfterArrayValue(char, i) {\n    switch (char) {\n      case \",\": {\n        stack.pop();\n        stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n        break;\n      }\n      case \"]\": {\n        lastValidIndex = i;\n        stack.pop();\n        break;\n      }\n    }\n  }\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n    const currentState = stack[stack.length - 1];\n    switch (currentState) {\n      case \"ROOT\":\n        processValueStart(char, i, \"FINISH\");\n        break;\n      case \"INSIDE_OBJECT_START\": {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            stack.push(\"INSIDE_OBJECT_KEY\");\n            break;\n          }\n          case \"}\": {\n            lastValidIndex = i;\n            stack.pop();\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_OBJECT_AFTER_COMMA\": {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            stack.push(\"INSIDE_OBJECT_KEY\");\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_OBJECT_KEY\": {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            stack.push(\"INSIDE_OBJECT_AFTER_KEY\");\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_OBJECT_AFTER_KEY\": {\n        switch (char) {\n          case \":\": {\n            stack.pop();\n            stack.push(\"INSIDE_OBJECT_BEFORE_VALUE\");\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_OBJECT_BEFORE_VALUE\": {\n        processValueStart(char, i, \"INSIDE_OBJECT_AFTER_VALUE\");\n        break;\n      }\n      case \"INSIDE_OBJECT_AFTER_VALUE\": {\n        processAfterObjectValue(char, i);\n        break;\n      }\n      case \"INSIDE_STRING\": {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            lastValidIndex = i;\n            break;\n          }\n          case \"\\\\\": {\n            stack.push(\"INSIDE_STRING_ESCAPE\");\n            break;\n          }\n          default: {\n            lastValidIndex = i;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_ARRAY_START\": {\n        switch (char) {\n          case \"]\": {\n            lastValidIndex = i;\n            stack.pop();\n            break;\n          }\n          default: {\n            lastValidIndex = i;\n            processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_ARRAY_AFTER_VALUE\": {\n        switch (char) {\n          case \",\": {\n            stack.pop();\n            stack.push(\"INSIDE_ARRAY_AFTER_COMMA\");\n            break;\n          }\n          case \"]\": {\n            lastValidIndex = i;\n            stack.pop();\n            break;\n          }\n          default: {\n            lastValidIndex = i;\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_ARRAY_AFTER_COMMA\": {\n        processValueStart(char, i, \"INSIDE_ARRAY_AFTER_VALUE\");\n        break;\n      }\n      case \"INSIDE_STRING_ESCAPE\": {\n        stack.pop();\n        lastValidIndex = i;\n        break;\n      }\n      case \"INSIDE_NUMBER\": {\n        switch (char) {\n          case \"0\":\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\": {\n            lastValidIndex = i;\n            break;\n          }\n          case \"e\":\n          case \"E\":\n          case \"-\":\n          case \".\": {\n            break;\n          }\n          case \",\": {\n            stack.pop();\n            if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n              processAfterArrayValue(char, i);\n            }\n            if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n              processAfterObjectValue(char, i);\n            }\n            break;\n          }\n          case \"}\": {\n            stack.pop();\n            if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n              processAfterObjectValue(char, i);\n            }\n            break;\n          }\n          case \"]\": {\n            stack.pop();\n            if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n              processAfterArrayValue(char, i);\n            }\n            break;\n          }\n          default: {\n            stack.pop();\n            break;\n          }\n        }\n        break;\n      }\n      case \"INSIDE_LITERAL\": {\n        const partialLiteral = input.substring(literalStart, i + 1);\n        if (!\"false\".startsWith(partialLiteral) && !\"true\".startsWith(partialLiteral) && !\"null\".startsWith(partialLiteral)) {\n          stack.pop();\n          if (stack[stack.length - 1] === \"INSIDE_OBJECT_AFTER_VALUE\") {\n            processAfterObjectValue(char, i);\n          } else if (stack[stack.length - 1] === \"INSIDE_ARRAY_AFTER_VALUE\") {\n            processAfterArrayValue(char, i);\n          }\n        } else {\n          lastValidIndex = i;\n        }\n        break;\n      }\n    }\n  }\n  let result = input.slice(0, lastValidIndex + 1);\n  for (let i = stack.length - 1; i >= 0; i--) {\n    const state = stack[i];\n    switch (state) {\n      case \"INSIDE_STRING\": {\n        result += '\"';\n        break;\n      }\n      case \"INSIDE_OBJECT_KEY\":\n      case \"INSIDE_OBJECT_AFTER_KEY\":\n      case \"INSIDE_OBJECT_AFTER_COMMA\":\n      case \"INSIDE_OBJECT_START\":\n      case \"INSIDE_OBJECT_BEFORE_VALUE\":\n      case \"INSIDE_OBJECT_AFTER_VALUE\": {\n        result += \"}\";\n        break;\n      }\n      case \"INSIDE_ARRAY_START\":\n      case \"INSIDE_ARRAY_AFTER_COMMA\":\n      case \"INSIDE_ARRAY_AFTER_VALUE\": {\n        result += \"]\";\n        break;\n      }\n      case \"INSIDE_LITERAL\": {\n        const partialLiteral = input.substring(literalStart, input.length);\n        if (\"true\".startsWith(partialLiteral)) {\n          result += \"true\".slice(partialLiteral.length);\n        } else if (\"false\".startsWith(partialLiteral)) {\n          result += \"false\".slice(partialLiteral.length);\n        } else if (\"null\".startsWith(partialLiteral)) {\n          result += \"null\".slice(partialLiteral.length);\n        }\n      }\n    }\n  }\n  return result;\n}\n\n// core/util/parse-partial-json.ts\nfunction parsePartialJson(jsonText) {\n  if (jsonText == null) {\n    return void 0;\n  }\n  try {\n    return secure_json_parse__WEBPACK_IMPORTED_MODULE_3__.parse(jsonText);\n  } catch (ignored) {\n    try {\n      const fixedJsonText = fixJson(jsonText);\n      return secure_json_parse__WEBPACK_IMPORTED_MODULE_3__.parse(fixedJsonText);\n    } catch (ignored2) {\n    }\n  }\n  return void 0;\n}\n\n// core/generate-object/stream-object.ts\n\nasync function streamObject({\n  model,\n  schema,\n  mode,\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  ...settings\n}) {\n  const retry = retryWithExponentialBackoff({ maxRetries });\n  const jsonSchema = convertZodToJSONSchema(schema);\n  if (mode === \"auto\" || mode == null) {\n    mode = model.defaultObjectGenerationMode;\n  }\n  let callOptions;\n  let transformer;\n  switch (mode) {\n    case \"json\": {\n      const validatedPrompt = getValidatedPrompt({\n        system: injectJsonSchemaIntoSystem({ system, schema: jsonSchema }),\n        prompt,\n        messages\n      });\n      callOptions = {\n        mode: { type: \"object-json\" },\n        ...prepareCallSettings(settings),\n        inputFormat: validatedPrompt.type,\n        prompt: convertToLanguageModelPrompt(validatedPrompt),\n        abortSignal\n      };\n      transformer = {\n        transform: (chunk, controller) => {\n          switch (chunk.type) {\n            case \"text-delta\":\n              controller.enqueue(chunk.textDelta);\n              break;\n            case \"finish\":\n            case \"error\":\n              controller.enqueue(chunk);\n              break;\n          }\n        }\n      };\n      break;\n    }\n    case \"grammar\": {\n      const validatedPrompt = getValidatedPrompt({\n        system: injectJsonSchemaIntoSystem({ system, schema: jsonSchema }),\n        prompt,\n        messages\n      });\n      callOptions = {\n        mode: { type: \"object-grammar\", schema: jsonSchema },\n        ...settings,\n        inputFormat: validatedPrompt.type,\n        prompt: convertToLanguageModelPrompt(validatedPrompt),\n        abortSignal\n      };\n      transformer = {\n        transform: (chunk, controller) => {\n          switch (chunk.type) {\n            case \"text-delta\":\n              controller.enqueue(chunk.textDelta);\n              break;\n            case \"finish\":\n            case \"error\":\n              controller.enqueue(chunk);\n              break;\n          }\n        }\n      };\n      break;\n    }\n    case \"tool\": {\n      const validatedPrompt = getValidatedPrompt({\n        system,\n        prompt,\n        messages\n      });\n      callOptions = {\n        mode: {\n          type: \"object-tool\",\n          tool: {\n            type: \"function\",\n            name: \"json\",\n            description: \"Respond with a JSON object.\",\n            parameters: jsonSchema\n          }\n        },\n        ...settings,\n        inputFormat: validatedPrompt.type,\n        prompt: convertToLanguageModelPrompt(validatedPrompt),\n        abortSignal\n      };\n      transformer = {\n        transform(chunk, controller) {\n          switch (chunk.type) {\n            case \"tool-call-delta\":\n              controller.enqueue(chunk.argsTextDelta);\n              break;\n            case \"finish\":\n            case \"error\":\n              controller.enqueue(chunk);\n              break;\n          }\n        }\n      };\n      break;\n    }\n    case void 0: {\n      throw new Error(\"Model does not have a default object generation mode.\");\n    }\n    default: {\n      const _exhaustiveCheck = mode;\n      throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);\n    }\n  }\n  const result = await retry(() => model.doStream(callOptions));\n  return new StreamObjectResult({\n    stream: result.stream.pipeThrough(new TransformStream(transformer)),\n    warnings: result.warnings,\n    rawResponse: result.rawResponse,\n    schema\n  });\n}\nvar StreamObjectResult = class {\n  constructor({\n    stream,\n    warnings,\n    rawResponse,\n    schema\n  }) {\n    this.warnings = warnings;\n    this.rawResponse = rawResponse;\n    let resolveObject;\n    let rejectObject;\n    this.object = new Promise((resolve, reject) => {\n      resolveObject = resolve;\n      rejectObject = reject;\n    });\n    let resolveUsage;\n    this.usage = new Promise((resolve) => {\n      resolveUsage = resolve;\n    });\n    let usage;\n    let accumulatedText = \"\";\n    let latestObject = void 0;\n    this.originalStream = stream.pipeThrough(\n      new TransformStream({\n        async transform(chunk, controller) {\n          if (typeof chunk === \"string\") {\n            accumulatedText += chunk;\n            const currentObject = parsePartialJson(\n              accumulatedText\n            );\n            if (!isDeepEqualData(latestObject, currentObject)) {\n              latestObject = currentObject;\n              controller.enqueue({ type: \"object\", object: currentObject });\n            }\n            return;\n          }\n          switch (chunk.type) {\n            case \"finish\": {\n              usage = calculateTokenUsage(chunk.usage);\n              controller.enqueue({ ...chunk, usage });\n              resolveUsage(usage);\n              const validationResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeValidateTypes)({\n                value: latestObject,\n                schema\n              });\n              if (validationResult.success) {\n                resolveObject(validationResult.value);\n              } else {\n                rejectObject(validationResult.error);\n              }\n              break;\n            }\n            default: {\n              controller.enqueue(chunk);\n              break;\n            }\n          }\n        }\n      })\n    );\n  }\n  get partialObjectStream() {\n    return createAsyncIterableStream(this.originalStream, {\n      transform(chunk, controller) {\n        switch (chunk.type) {\n          case \"object\":\n            controller.enqueue(chunk.object);\n            break;\n          case \"finish\":\n            break;\n          case \"error\":\n            controller.error(chunk.error);\n            break;\n          default: {\n            const _exhaustiveCheck = chunk;\n            throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n          }\n        }\n      }\n    });\n  }\n  get fullStream() {\n    return createAsyncIterableStream(this.originalStream, {\n      transform(chunk, controller) {\n        controller.enqueue(chunk);\n      }\n    });\n  }\n};\nvar experimental_streamObject = streamObject;\n\n// core/util/is-non-empty-object.ts\nfunction isNonEmptyObject(object) {\n  return object != null && Object.keys(object).length > 0;\n}\n\n// core/prompt/prepare-tools-and-tool-choice.ts\nfunction prepareToolsAndToolChoice({\n  tools,\n  toolChoice\n}) {\n  if (!isNonEmptyObject(tools)) {\n    return {\n      tools: void 0,\n      toolChoice: void 0\n    };\n  }\n  return {\n    tools: Object.entries(tools).map(([name, tool2]) => ({\n      type: \"function\",\n      name,\n      description: tool2.description,\n      parameters: convertZodToJSONSchema(tool2.parameters)\n    })),\n    toolChoice: toolChoice == null ? { type: \"auto\" } : typeof toolChoice === \"string\" ? { type: toolChoice } : { type: \"tool\", toolName: toolChoice.toolName }\n  };\n}\n\n// core/generate-text/tool-call.ts\n\n\nfunction parseToolCall({\n  toolCall,\n  tools\n}) {\n  const toolName = toolCall.toolName;\n  if (tools == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchToolError({ toolName: toolCall.toolName });\n  }\n  const tool2 = tools[toolName];\n  if (tool2 == null) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchToolError({\n      toolName: toolCall.toolName,\n      availableTools: Object.keys(tools)\n    });\n  }\n  const parseResult = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)({\n    text: toolCall.args,\n    schema: tool2.parameters\n  });\n  if (parseResult.success === false) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.InvalidToolArgumentsError({\n      toolName,\n      toolArgs: toolCall.args,\n      cause: parseResult.error\n    });\n  }\n  return {\n    type: \"tool-call\",\n    toolCallId: toolCall.toolCallId,\n    toolName,\n    args: parseResult.value\n  };\n}\n\n// core/generate-text/generate-text.ts\nasync function generateText({\n  model,\n  tools,\n  toolChoice,\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  maxAutomaticRoundtrips = 0,\n  maxToolRoundtrips = maxAutomaticRoundtrips,\n  ...settings\n}) {\n  var _a, _b, _c;\n  const retry = retryWithExponentialBackoff({ maxRetries });\n  const validatedPrompt = getValidatedPrompt({ system, prompt, messages });\n  const mode = {\n    type: \"regular\",\n    ...prepareToolsAndToolChoice({ tools, toolChoice })\n  };\n  const callSettings = prepareCallSettings(settings);\n  const promptMessages = convertToLanguageModelPrompt(validatedPrompt);\n  let currentModelResponse;\n  let currentToolCalls = [];\n  let currentToolResults = [];\n  let roundtrips = 0;\n  const responseMessages = [];\n  do {\n    currentModelResponse = await retry(() => {\n      return model.doGenerate({\n        mode,\n        ...callSettings,\n        // once we have a roundtrip, we need to switch to messages format:\n        inputFormat: roundtrips === 0 ? validatedPrompt.type : \"messages\",\n        prompt: promptMessages,\n        abortSignal\n      });\n    });\n    currentToolCalls = ((_a = currentModelResponse.toolCalls) != null ? _a : []).map(\n      (modelToolCall) => parseToolCall({ toolCall: modelToolCall, tools })\n    );\n    currentToolResults = tools == null ? [] : await executeTools({ toolCalls: currentToolCalls, tools });\n    const newResponseMessages = toResponseMessages({\n      text: (_b = currentModelResponse.text) != null ? _b : \"\",\n      toolCalls: currentToolCalls,\n      toolResults: currentToolResults\n    });\n    responseMessages.push(...newResponseMessages);\n    promptMessages.push(\n      ...newResponseMessages.map(convertToLanguageModelMessage)\n    );\n  } while (\n    // there are tool calls:\n    currentToolCalls.length > 0 && // all current tool calls have results:\n    currentToolResults.length === currentToolCalls.length && // the number of roundtrips is less than the maximum:\n    roundtrips++ < maxToolRoundtrips\n  );\n  return new GenerateTextResult({\n    // Always return a string so that the caller doesn't have to check for undefined.\n    // If they need to check if the model did not return any text,\n    // they can check the length of the string:\n    text: (_c = currentModelResponse.text) != null ? _c : \"\",\n    toolCalls: currentToolCalls,\n    toolResults: currentToolResults,\n    finishReason: currentModelResponse.finishReason,\n    usage: calculateTokenUsage(currentModelResponse.usage),\n    warnings: currentModelResponse.warnings,\n    rawResponse: currentModelResponse.rawResponse,\n    logprobs: currentModelResponse.logprobs,\n    responseMessages\n  });\n}\nasync function executeTools({\n  toolCalls,\n  tools\n}) {\n  const toolResults = await Promise.all(\n    toolCalls.map(async (toolCall) => {\n      const tool2 = tools[toolCall.toolName];\n      if ((tool2 == null ? void 0 : tool2.execute) == null) {\n        return void 0;\n      }\n      const result = await tool2.execute(toolCall.args);\n      return {\n        toolCallId: toolCall.toolCallId,\n        toolName: toolCall.toolName,\n        args: toolCall.args,\n        result\n      };\n    })\n  );\n  return toolResults.filter(\n    (result) => result != null\n  );\n}\nvar GenerateTextResult = class {\n  constructor(options) {\n    this.text = options.text;\n    this.toolCalls = options.toolCalls;\n    this.toolResults = options.toolResults;\n    this.finishReason = options.finishReason;\n    this.usage = options.usage;\n    this.warnings = options.warnings;\n    this.rawResponse = options.rawResponse;\n    this.logprobs = options.logprobs;\n    this.responseMessages = options.responseMessages;\n  }\n};\nfunction toResponseMessages({\n  text,\n  toolCalls,\n  toolResults\n}) {\n  const responseMessages = [];\n  responseMessages.push({\n    role: \"assistant\",\n    content: [{ type: \"text\", text }, ...toolCalls]\n  });\n  if (toolResults.length > 0) {\n    responseMessages.push({\n      role: \"tool\",\n      content: toolResults.map((result) => ({\n        type: \"tool-result\",\n        toolCallId: result.toolCallId,\n        toolName: result.toolName,\n        result: result.result\n      }))\n    });\n  }\n  return responseMessages;\n}\nvar experimental_generateText = generateText;\n\n// core/util/prepare-response-headers.ts\nfunction prepareResponseHeaders(init, { contentType }) {\n  var _a;\n  const headers = new Headers((_a = init == null ? void 0 : init.headers) != null ? _a : {});\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", contentType);\n  }\n  return headers;\n}\n\n// core/generate-text/run-tools-transformation.ts\n\n\n// shared/generate-id.ts\n\nvar generateId = (0,nanoid_non_secure__WEBPACK_IMPORTED_MODULE_4__.customAlphabet)(\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  7\n);\n\n// core/generate-text/run-tools-transformation.ts\nfunction runToolsTransformation({\n  tools,\n  generatorStream\n}) {\n  let canClose = false;\n  const outstandingToolCalls = /* @__PURE__ */ new Set();\n  let toolResultsStreamController = null;\n  const toolResultsStream = new ReadableStream({\n    start(controller) {\n      toolResultsStreamController = controller;\n    }\n  });\n  const forwardStream = new TransformStream({\n    transform(chunk, controller) {\n      const chunkType = chunk.type;\n      switch (chunkType) {\n        case \"text-delta\":\n        case \"error\": {\n          controller.enqueue(chunk);\n          break;\n        }\n        case \"tool-call\": {\n          const toolName = chunk.toolName;\n          if (tools == null) {\n            toolResultsStreamController.enqueue({\n              type: \"error\",\n              error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchToolError({ toolName: chunk.toolName })\n            });\n            break;\n          }\n          const tool2 = tools[toolName];\n          if (tool2 == null) {\n            toolResultsStreamController.enqueue({\n              type: \"error\",\n              error: new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_1__.NoSuchToolError({\n                toolName: chunk.toolName,\n                availableTools: Object.keys(tools)\n              })\n            });\n            break;\n          }\n          try {\n            const toolCall = parseToolCall({\n              toolCall: chunk,\n              tools\n            });\n            controller.enqueue(toolCall);\n            if (tool2.execute != null) {\n              const toolExecutionId = generateId();\n              outstandingToolCalls.add(toolExecutionId);\n              tool2.execute(toolCall.args).then(\n                (result) => {\n                  toolResultsStreamController.enqueue({\n                    ...toolCall,\n                    type: \"tool-result\",\n                    result\n                  });\n                  outstandingToolCalls.delete(toolExecutionId);\n                  if (canClose && outstandingToolCalls.size === 0) {\n                    toolResultsStreamController.close();\n                  }\n                },\n                (error) => {\n                  toolResultsStreamController.enqueue({\n                    type: \"error\",\n                    error\n                  });\n                  outstandingToolCalls.delete(toolExecutionId);\n                  if (canClose && outstandingToolCalls.size === 0) {\n                    toolResultsStreamController.close();\n                  }\n                }\n              );\n            }\n          } catch (error) {\n            toolResultsStreamController.enqueue({\n              type: \"error\",\n              error\n            });\n          }\n          break;\n        }\n        case \"finish\": {\n          controller.enqueue({\n            type: \"finish\",\n            finishReason: chunk.finishReason,\n            logprobs: chunk.logprobs,\n            usage: calculateTokenUsage(chunk.usage)\n          });\n          break;\n        }\n        case \"tool-call-delta\": {\n          break;\n        }\n        default: {\n          const _exhaustiveCheck = chunkType;\n          throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);\n        }\n      }\n    },\n    flush() {\n      canClose = true;\n      if (outstandingToolCalls.size === 0) {\n        toolResultsStreamController.close();\n      }\n    }\n  });\n  return new ReadableStream({\n    async start(controller) {\n      return Promise.all([\n        generatorStream.pipeThrough(forwardStream).pipeTo(\n          new WritableStream({\n            write(chunk) {\n              controller.enqueue(chunk);\n            },\n            close() {\n            }\n          })\n        ),\n        toolResultsStream.pipeTo(\n          new WritableStream({\n            write(chunk) {\n              controller.enqueue(chunk);\n            },\n            close() {\n              controller.close();\n            }\n          })\n        )\n      ]);\n    }\n  });\n}\n\n// core/generate-text/stream-text.ts\nasync function streamText({\n  model,\n  tools,\n  toolChoice,\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  onFinish,\n  ...settings\n}) {\n  const retry = retryWithExponentialBackoff({ maxRetries });\n  const validatedPrompt = getValidatedPrompt({ system, prompt, messages });\n  const { stream, warnings, rawResponse } = await retry(\n    () => model.doStream({\n      mode: {\n        type: \"regular\",\n        ...prepareToolsAndToolChoice({ tools, toolChoice })\n      },\n      ...prepareCallSettings(settings),\n      inputFormat: validatedPrompt.type,\n      prompt: convertToLanguageModelPrompt(validatedPrompt),\n      abortSignal\n    })\n  );\n  return new StreamTextResult({\n    stream: runToolsTransformation({\n      tools,\n      generatorStream: stream\n    }),\n    warnings,\n    rawResponse,\n    onFinish\n  });\n}\nvar StreamTextResult = class {\n  constructor({\n    stream,\n    warnings,\n    rawResponse,\n    onFinish\n  }) {\n    this.warnings = warnings;\n    this.rawResponse = rawResponse;\n    this.onFinish = onFinish;\n    let resolveUsage;\n    this.usage = new Promise((resolve) => {\n      resolveUsage = resolve;\n    });\n    let resolveFinishReason;\n    this.finishReason = new Promise((resolve) => {\n      resolveFinishReason = resolve;\n    });\n    let resolveText;\n    this.text = new Promise((resolve) => {\n      resolveText = resolve;\n    });\n    let resolveToolCalls;\n    this.toolCalls = new Promise((resolve) => {\n      resolveToolCalls = resolve;\n    });\n    let resolveToolResults;\n    this.toolResults = new Promise((resolve) => {\n      resolveToolResults = resolve;\n    });\n    let finishReason;\n    let usage;\n    let text = \"\";\n    const toolCalls = [];\n    const toolResults = [];\n    const self = this;\n    this.originalStream = stream.pipeThrough(\n      new TransformStream({\n        async transform(chunk, controller) {\n          controller.enqueue(chunk);\n          if (chunk.type === \"text-delta\") {\n            text += chunk.textDelta;\n          }\n          if (chunk.type === \"tool-call\") {\n            toolCalls.push(chunk);\n          }\n          if (chunk.type === \"tool-result\") {\n            toolResults.push(chunk);\n          }\n          if (chunk.type === \"finish\") {\n            usage = chunk.usage;\n            finishReason = chunk.finishReason;\n            resolveUsage(usage);\n            resolveFinishReason(finishReason);\n            resolveText(text);\n            resolveToolCalls(toolCalls);\n          }\n        },\n        // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n        async flush(controller) {\n          var _a;\n          try {\n            resolveToolResults(toolResults);\n            await ((_a = self.onFinish) == null ? void 0 : _a.call(self, {\n              finishReason: finishReason != null ? finishReason : \"unknown\",\n              usage: usage != null ? usage : {\n                promptTokens: NaN,\n                completionTokens: NaN,\n                totalTokens: NaN\n              },\n              text,\n              toolCalls,\n              // The tool results are inferred as a never[] type, because they are\n              // optional and the execute method with an inferred result type is\n              // optional as well. Therefore we need to cast the toolResults to any.\n              // The type exposed to the users will be correctly inferred.\n              toolResults,\n              rawResponse,\n              warnings\n            }));\n          } catch (error) {\n            controller.error(error);\n          }\n        }\n      })\n    );\n  }\n  /**\n  Split out a new stream from the original stream.\n  The original stream is replaced to allow for further splitting,\n  since we do not know how many times the stream will be split.\n  \n  Note: this leads to buffering the stream content on the server.\n  However, the LLM results are expected to be small enough to not cause issues.\n     */\n  teeStream() {\n    const [stream1, stream2] = this.originalStream.tee();\n    this.originalStream = stream2;\n    return stream1;\n  }\n  /**\n  A text stream that returns only the generated text deltas. You can use it\n  as either an AsyncIterable or a ReadableStream. When an error occurs, the\n  stream will throw the error.\n     */\n  get textStream() {\n    return createAsyncIterableStream(this.teeStream(), {\n      transform(chunk, controller) {\n        if (chunk.type === \"text-delta\") {\n          if (chunk.textDelta.length > 0) {\n            controller.enqueue(chunk.textDelta);\n          }\n        } else if (chunk.type === \"error\") {\n          throw chunk.error;\n        }\n      }\n    });\n  }\n  /**\n  A stream with all events, including text deltas, tool calls, tool results, and\n  errors.\n  You can use it as either an AsyncIterable or a ReadableStream. When an error occurs, the\n  stream will throw the error.\n     */\n  get fullStream() {\n    return createAsyncIterableStream(this.teeStream(), {\n      transform(chunk, controller) {\n        if (chunk.type === \"text-delta\") {\n          if (chunk.textDelta.length > 0) {\n            controller.enqueue(chunk);\n          }\n        } else {\n          controller.enqueue(chunk);\n        }\n      }\n    });\n  }\n  /**\n  Converts the result to an `AIStream` object that is compatible with `StreamingTextResponse`.\n  It can be used with the `useChat` and `useCompletion` hooks.\n  \n  @param callbacks \n  Stream callbacks that will be called when the stream emits events.\n  \n  @returns an `AIStream` object.\n     */\n  toAIStream(callbacks = {}) {\n    let aggregatedResponse = \"\";\n    const callbackTransformer = new TransformStream({\n      async start() {\n        if (callbacks.onStart)\n          await callbacks.onStart();\n      },\n      async transform(chunk, controller) {\n        controller.enqueue(chunk);\n        if (chunk.type === \"text-delta\") {\n          const textDelta = chunk.textDelta;\n          aggregatedResponse += textDelta;\n          if (callbacks.onToken)\n            await callbacks.onToken(textDelta);\n          if (callbacks.onText)\n            await callbacks.onText(textDelta);\n        }\n      },\n      async flush() {\n        if (callbacks.onCompletion)\n          await callbacks.onCompletion(aggregatedResponse);\n        if (callbacks.onFinal)\n          await callbacks.onFinal(aggregatedResponse);\n      }\n    });\n    const streamDataTransformer = new TransformStream({\n      transform: async (chunk, controller) => {\n        switch (chunk.type) {\n          case \"text-delta\":\n            controller.enqueue(formatStreamPart(\"text\", chunk.textDelta));\n            break;\n          case \"tool-call\":\n            controller.enqueue(\n              formatStreamPart(\"tool_call\", {\n                toolCallId: chunk.toolCallId,\n                toolName: chunk.toolName,\n                args: chunk.args\n              })\n            );\n            break;\n          case \"tool-result\":\n            controller.enqueue(\n              formatStreamPart(\"tool_result\", {\n                toolCallId: chunk.toolCallId,\n                toolName: chunk.toolName,\n                args: chunk.args,\n                result: chunk.result\n              })\n            );\n            break;\n          case \"error\":\n            controller.enqueue(\n              formatStreamPart(\"error\", JSON.stringify(chunk.error))\n            );\n            break;\n        }\n      }\n    });\n    return this.fullStream.pipeThrough(callbackTransformer).pipeThrough(streamDataTransformer).pipeThrough(new TextEncoderStream());\n  }\n  /**\n  Writes stream data output to a Node.js response-like object.\n  It sets a `Content-Type` header to `text/plain; charset=utf-8` and \n  writes each stream data part as a separate chunk.\n  \n  @param response A Node.js response-like object (ServerResponse).\n  @param init Optional headers and status code.\n     */\n  pipeAIStreamToResponse(response, init) {\n    var _a;\n    response.writeHead((_a = init == null ? void 0 : init.status) != null ? _a : 200, {\n      \"Content-Type\": \"text/plain; charset=utf-8\",\n      ...init == null ? void 0 : init.headers\n    });\n    const reader = this.toAIStream().getReader();\n    const read = async () => {\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done)\n            break;\n          response.write(value);\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        response.end();\n      }\n    };\n    read();\n  }\n  /**\n  Writes text delta output to a Node.js response-like object.\n  It sets a `Content-Type` header to `text/plain; charset=utf-8` and \n  writes each text delta as a separate chunk.\n  \n  @param response A Node.js response-like object (ServerResponse).\n  @param init Optional headers and status code.\n     */\n  pipeTextStreamToResponse(response, init) {\n    var _a;\n    response.writeHead((_a = init == null ? void 0 : init.status) != null ? _a : 200, {\n      \"Content-Type\": \"text/plain; charset=utf-8\",\n      ...init == null ? void 0 : init.headers\n    });\n    const reader = this.textStream.pipeThrough(new TextEncoderStream()).getReader();\n    const read = async () => {\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done)\n            break;\n          response.write(value);\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        response.end();\n      }\n    };\n    read();\n  }\n  /**\n  Converts the result to a streamed response object with a stream data part stream.\n  It can be used with the `useChat` and `useCompletion` hooks.\n  \n  @param init Optional headers.\n  \n  @return A response object.\n     */\n  toAIStreamResponse(init) {\n    return new StreamingTextResponse(this.toAIStream(), init);\n  }\n  /**\n  Creates a simple text stream response.\n  Each text delta is encoded as UTF-8 and sent as a separate chunk.\n  Non-text-delta events are ignored.\n  \n  @param init Optional headers and status code.\n     */\n  toTextStreamResponse(init) {\n    var _a;\n    return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {\n      status: (_a = init == null ? void 0 : init.status) != null ? _a : 200,\n      headers: prepareResponseHeaders(init, {\n        contentType: \"text/plain; charset=utf-8\"\n      })\n    });\n  }\n};\nvar experimental_streamText = streamText;\n\n// core/prompt/convert-to-core-messages.ts\nfunction convertToCoreMessages(messages) {\n  const coreMessages = [];\n  for (const { role, content, toolInvocations } of messages) {\n    switch (role) {\n      case \"user\": {\n        coreMessages.push({ role: \"user\", content });\n        break;\n      }\n      case \"assistant\": {\n        if (toolInvocations == null) {\n          coreMessages.push({ role: \"assistant\", content });\n          break;\n        }\n        coreMessages.push({\n          role: \"assistant\",\n          content: [\n            { type: \"text\", text: content },\n            ...toolInvocations.map(({ toolCallId, toolName, args }) => ({\n              type: \"tool-call\",\n              toolCallId,\n              toolName,\n              args\n            }))\n          ]\n        });\n        coreMessages.push({\n          role: \"tool\",\n          content: toolInvocations.map(\n            ({ toolCallId, toolName, args, result }) => ({\n              type: \"tool-result\",\n              toolCallId,\n              toolName,\n              args,\n              result\n            })\n          )\n        });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unhandled role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return coreMessages;\n}\n\n// core/tool/tool.ts\nfunction tool(tool2) {\n  return tool2;\n}\n\n// core/types/errors.ts\n\n\n// shared/stream-parts.ts\nvar textStreamPart = {\n  code: \"0\",\n  name: \"text\",\n  parse: (value) => {\n    if (typeof value !== \"string\") {\n      throw new Error('\"text\" parts expect a string value.');\n    }\n    return { type: \"text\", value };\n  }\n};\nvar functionCallStreamPart = {\n  code: \"1\",\n  name: \"function_call\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"function_call\" in value) || typeof value.function_call !== \"object\" || value.function_call == null || !(\"name\" in value.function_call) || !(\"arguments\" in value.function_call) || typeof value.function_call.name !== \"string\" || typeof value.function_call.arguments !== \"string\") {\n      throw new Error(\n        '\"function_call\" parts expect an object with a \"function_call\" property.'\n      );\n    }\n    return {\n      type: \"function_call\",\n      value\n    };\n  }\n};\nvar dataStreamPart = {\n  code: \"2\",\n  name: \"data\",\n  parse: (value) => {\n    if (!Array.isArray(value)) {\n      throw new Error('\"data\" parts expect an array value.');\n    }\n    return { type: \"data\", value };\n  }\n};\nvar errorStreamPart = {\n  code: \"3\",\n  name: \"error\",\n  parse: (value) => {\n    if (typeof value !== \"string\") {\n      throw new Error('\"error\" parts expect a string value.');\n    }\n    return { type: \"error\", value };\n  }\n};\nvar assistantMessageStreamPart = {\n  code: \"4\",\n  name: \"assistant_message\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every(\n      (item) => item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\"\n    )) {\n      throw new Error(\n        '\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.'\n      );\n    }\n    return {\n      type: \"assistant_message\",\n      value\n    };\n  }\n};\nvar assistantControlDataStreamPart = {\n  code: \"5\",\n  name: \"assistant_control_data\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n      throw new Error(\n        '\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.'\n      );\n    }\n    return {\n      type: \"assistant_control_data\",\n      value: {\n        threadId: value.threadId,\n        messageId: value.messageId\n      }\n    };\n  }\n};\nvar dataMessageStreamPart = {\n  code: \"6\",\n  name: \"data_message\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"role\" in value) || !(\"data\" in value) || typeof value.role !== \"string\" || value.role !== \"data\") {\n      throw new Error(\n        '\"data_message\" parts expect an object with a \"role\" and \"data\" property.'\n      );\n    }\n    return {\n      type: \"data_message\",\n      value\n    };\n  }\n};\nvar toolCallsStreamPart = {\n  code: \"7\",\n  name: \"tool_calls\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"tool_calls\" in value) || typeof value.tool_calls !== \"object\" || value.tool_calls == null || !Array.isArray(value.tool_calls) || value.tool_calls.some(\n      (tc) => tc == null || typeof tc !== \"object\" || !(\"id\" in tc) || typeof tc.id !== \"string\" || !(\"type\" in tc) || typeof tc.type !== \"string\" || !(\"function\" in tc) || tc.function == null || typeof tc.function !== \"object\" || !(\"arguments\" in tc.function) || typeof tc.function.name !== \"string\" || typeof tc.function.arguments !== \"string\"\n    )) {\n      throw new Error(\n        '\"tool_calls\" parts expect an object with a ToolCallPayload.'\n      );\n    }\n    return {\n      type: \"tool_calls\",\n      value\n    };\n  }\n};\nvar messageAnnotationsStreamPart = {\n  code: \"8\",\n  name: \"message_annotations\",\n  parse: (value) => {\n    if (!Array.isArray(value)) {\n      throw new Error('\"message_annotations\" parts expect an array value.');\n    }\n    return { type: \"message_annotations\", value };\n  }\n};\nvar toolCallStreamPart = {\n  code: \"9\",\n  name: \"tool_call\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\" || !(\"args\" in value) || typeof value.args !== \"object\") {\n      throw new Error(\n        '\"tool_call\" parts expect an object with a \"toolCallId\", \"toolName\", and \"args\" property.'\n      );\n    }\n    return {\n      type: \"tool_call\",\n      value\n    };\n  }\n};\nvar toolResultStreamPart = {\n  code: \"a\",\n  name: \"tool_result\",\n  parse: (value) => {\n    if (value == null || typeof value !== \"object\" || !(\"toolCallId\" in value) || typeof value.toolCallId !== \"string\" || !(\"toolName\" in value) || typeof value.toolName !== \"string\" || !(\"args\" in value) || typeof value.args !== \"object\" || !(\"result\" in value)) {\n      throw new Error(\n        '\"tool_result\" parts expect an object with a \"toolCallId\", \"toolName\", \"args\", and \"result\" property.'\n      );\n    }\n    return {\n      type: \"tool_result\",\n      value\n    };\n  }\n};\nvar streamParts = [\n  textStreamPart,\n  functionCallStreamPart,\n  dataStreamPart,\n  errorStreamPart,\n  assistantMessageStreamPart,\n  assistantControlDataStreamPart,\n  dataMessageStreamPart,\n  toolCallsStreamPart,\n  messageAnnotationsStreamPart,\n  toolCallStreamPart,\n  toolResultStreamPart\n];\nvar streamPartsByCode = {\n  [textStreamPart.code]: textStreamPart,\n  [functionCallStreamPart.code]: functionCallStreamPart,\n  [dataStreamPart.code]: dataStreamPart,\n  [errorStreamPart.code]: errorStreamPart,\n  [assistantMessageStreamPart.code]: assistantMessageStreamPart,\n  [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,\n  [dataMessageStreamPart.code]: dataMessageStreamPart,\n  [toolCallsStreamPart.code]: toolCallsStreamPart,\n  [messageAnnotationsStreamPart.code]: messageAnnotationsStreamPart,\n  [toolCallStreamPart.code]: toolCallStreamPart,\n  [toolResultStreamPart.code]: toolResultStreamPart\n};\nvar StreamStringPrefixes = {\n  [textStreamPart.name]: textStreamPart.code,\n  [functionCallStreamPart.name]: functionCallStreamPart.code,\n  [dataStreamPart.name]: dataStreamPart.code,\n  [errorStreamPart.name]: errorStreamPart.code,\n  [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,\n  [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,\n  [dataMessageStreamPart.name]: dataMessageStreamPart.code,\n  [toolCallsStreamPart.name]: toolCallsStreamPart.code,\n  [messageAnnotationsStreamPart.name]: messageAnnotationsStreamPart.code,\n  [toolCallStreamPart.name]: toolCallStreamPart.code,\n  [toolResultStreamPart.name]: toolResultStreamPart.code\n};\nvar validCodes = streamParts.map((part) => part.code);\nvar parseStreamPart = (line) => {\n  const firstSeparatorIndex = line.indexOf(\":\");\n  if (firstSeparatorIndex === -1) {\n    throw new Error(\"Failed to parse stream string. No separator found.\");\n  }\n  const prefix = line.slice(0, firstSeparatorIndex);\n  if (!validCodes.includes(prefix)) {\n    throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n  }\n  const code = prefix;\n  const textValue = line.slice(firstSeparatorIndex + 1);\n  const jsonValue = JSON.parse(textValue);\n  return streamPartsByCode[code].parse(jsonValue);\n};\nfunction formatStreamPart(type, value) {\n  const streamPart = streamParts.find((part) => part.name === type);\n  if (!streamPart) {\n    throw new Error(`Invalid stream part type: ${type}`);\n  }\n  return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\n\n// shared/read-data-stream.ts\nvar NEWLINE = \"\\n\".charCodeAt(0);\nfunction concatChunks(chunks, totalLength) {\n  const concatenatedChunks = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const chunk of chunks) {\n    concatenatedChunks.set(chunk, offset);\n    offset += chunk.length;\n  }\n  chunks.length = 0;\n  return concatenatedChunks;\n}\nasync function* readDataStream(reader, {\n  isAborted\n} = {}) {\n  const decoder = new TextDecoder();\n  const chunks = [];\n  let totalLength = 0;\n  while (true) {\n    const { value } = await reader.read();\n    if (value) {\n      chunks.push(value);\n      totalLength += value.length;\n      if (value[value.length - 1] !== NEWLINE) {\n        continue;\n      }\n    }\n    if (chunks.length === 0) {\n      break;\n    }\n    const concatenatedChunks = concatChunks(chunks, totalLength);\n    totalLength = 0;\n    const streamParts2 = decoder.decode(concatenatedChunks, { stream: true }).split(\"\\n\").filter((line) => line !== \"\").map(parseStreamPart);\n    for (const streamPart of streamParts2) {\n      yield streamPart;\n    }\n    if (isAborted == null ? void 0 : isAborted()) {\n      reader.cancel();\n      break;\n    }\n  }\n}\n\n// shared/utils.ts\nfunction createChunkDecoder(complex) {\n  const decoder = new TextDecoder();\n  if (!complex) {\n    return function(chunk) {\n      if (!chunk)\n        return \"\";\n      return decoder.decode(chunk, { stream: true });\n    };\n  }\n  return function(chunk) {\n    const decoded = decoder.decode(chunk, { stream: true }).split(\"\\n\").filter((line) => line !== \"\");\n    return decoded.map(parseStreamPart).filter(Boolean);\n  };\n}\nvar isStreamStringEqualToType = (type, value) => value.startsWith(`${StreamStringPrefixes[type]}:`) && value.endsWith(\"\\n\");\n\n// streams/ai-stream.ts\n\nfunction createEventStreamTransformer(customParser) {\n  const textDecoder = new TextDecoder();\n  let eventSourceParser;\n  return new TransformStream({\n    async start(controller) {\n      eventSourceParser = (0,eventsource_parser__WEBPACK_IMPORTED_MODULE_5__.createParser)(\n        (event) => {\n          if (\"data\" in event && event.type === \"event\" && event.data === \"[DONE]\" || // Replicate doesn't send [DONE] but does send a 'done' event\n          // @see https://replicate.com/docs/streaming\n          event.event === \"done\") {\n            controller.terminate();\n            return;\n          }\n          if (\"data\" in event) {\n            const parsedMessage = customParser ? customParser(event.data, {\n              event: event.event\n            }) : event.data;\n            if (parsedMessage)\n              controller.enqueue(parsedMessage);\n          }\n        }\n      );\n    },\n    transform(chunk) {\n      eventSourceParser.feed(textDecoder.decode(chunk));\n    }\n  });\n}\nfunction createCallbacksTransformer(cb) {\n  const textEncoder = new TextEncoder();\n  let aggregatedResponse = \"\";\n  const callbacks = cb || {};\n  return new TransformStream({\n    async start() {\n      if (callbacks.onStart)\n        await callbacks.onStart();\n    },\n    async transform(message, controller) {\n      const content = typeof message === \"string\" ? message : message.content;\n      controller.enqueue(textEncoder.encode(content));\n      aggregatedResponse += content;\n      if (callbacks.onToken)\n        await callbacks.onToken(content);\n      if (callbacks.onText && typeof message === \"string\") {\n        await callbacks.onText(message);\n      }\n    },\n    async flush() {\n      const isOpenAICallbacks = isOfTypeOpenAIStreamCallbacks(callbacks);\n      if (callbacks.onCompletion) {\n        await callbacks.onCompletion(aggregatedResponse);\n      }\n      if (callbacks.onFinal && !isOpenAICallbacks) {\n        await callbacks.onFinal(aggregatedResponse);\n      }\n    }\n  });\n}\nfunction isOfTypeOpenAIStreamCallbacks(callbacks) {\n  return \"experimental_onFunctionCall\" in callbacks;\n}\nfunction trimStartOfStreamHelper() {\n  let isStreamStart = true;\n  return (text) => {\n    if (isStreamStart) {\n      text = text.trimStart();\n      if (text)\n        isStreamStart = false;\n    }\n    return text;\n  };\n}\nfunction AIStream(response, customParser, callbacks) {\n  if (!response.ok) {\n    if (response.body) {\n      const reader = response.body.getReader();\n      return new ReadableStream({\n        async start(controller) {\n          const { done, value } = await reader.read();\n          if (!done) {\n            const errorText = new TextDecoder().decode(value);\n            controller.error(new Error(`Response error: ${errorText}`));\n          }\n        }\n      });\n    } else {\n      return new ReadableStream({\n        start(controller) {\n          controller.error(new Error(\"Response error: No response body\"));\n        }\n      });\n    }\n  }\n  const responseBodyStream = response.body || createEmptyReadableStream();\n  return responseBodyStream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));\n}\nfunction createEmptyReadableStream() {\n  return new ReadableStream({\n    start(controller) {\n      controller.close();\n    }\n  });\n}\nfunction readableFromAsyncIterable(iterable) {\n  let it = iterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    async pull(controller) {\n      const { done, value } = await it.next();\n      if (done)\n        controller.close();\n      else\n        controller.enqueue(value);\n    },\n    async cancel(reason) {\n      var _a;\n      await ((_a = it.return) == null ? void 0 : _a.call(it, reason));\n    }\n  });\n}\n\n// streams/stream-data.ts\nvar StreamData = class {\n  constructor() {\n    this.encoder = new TextEncoder();\n    this.controller = null;\n    this.isClosed = false;\n    this.warningTimeout = null;\n    const self = this;\n    this.stream = new ReadableStream({\n      start: async (controller) => {\n        self.controller = controller;\n        if (true) {\n          self.warningTimeout = setTimeout(() => {\n            console.warn(\n              \"The data stream is hanging. Did you forget to close it with `data.close()`?\"\n            );\n          }, 3e3);\n        }\n      },\n      pull: (controller) => {\n      },\n      cancel: (reason) => {\n        this.isClosed = true;\n      }\n    });\n  }\n  async close() {\n    if (this.isClosed) {\n      throw new Error(\"Data Stream has already been closed.\");\n    }\n    if (!this.controller) {\n      throw new Error(\"Stream controller is not initialized.\");\n    }\n    this.controller.close();\n    this.isClosed = true;\n    if (this.warningTimeout) {\n      clearTimeout(this.warningTimeout);\n    }\n  }\n  append(value) {\n    if (this.isClosed) {\n      throw new Error(\"Data Stream has already been closed.\");\n    }\n    if (!this.controller) {\n      throw new Error(\"Stream controller is not initialized.\");\n    }\n    this.controller.enqueue(\n      this.encoder.encode(formatStreamPart(\"data\", [value]))\n    );\n  }\n  appendMessageAnnotation(value) {\n    if (this.isClosed) {\n      throw new Error(\"Data Stream has already been closed.\");\n    }\n    if (!this.controller) {\n      throw new Error(\"Stream controller is not initialized.\");\n    }\n    this.controller.enqueue(\n      this.encoder.encode(formatStreamPart(\"message_annotations\", [value]))\n    );\n  }\n};\nfunction createStreamDataTransformer() {\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n  return new TransformStream({\n    transform: async (chunk, controller) => {\n      const message = decoder.decode(chunk);\n      controller.enqueue(encoder.encode(formatStreamPart(\"text\", message)));\n    }\n  });\n}\nvar experimental_StreamData = class extends StreamData {\n};\n\n// streams/anthropic-stream.ts\nfunction parseAnthropicStream() {\n  let previous = \"\";\n  return (data) => {\n    const json = JSON.parse(data);\n    if (\"error\" in json) {\n      throw new Error(`${json.error.type}: ${json.error.message}`);\n    }\n    if (!(\"completion\" in json)) {\n      return;\n    }\n    const text = json.completion;\n    if (!previous || text.length > previous.length && text.startsWith(previous)) {\n      const delta = text.slice(previous.length);\n      previous = text;\n      return delta;\n    }\n    return text;\n  };\n}\nasync function* streamable(stream) {\n  for await (const chunk of stream) {\n    if (\"completion\" in chunk) {\n      const text = chunk.completion;\n      if (text)\n        yield text;\n    } else if (\"delta\" in chunk) {\n      const { delta } = chunk;\n      if (\"text\" in delta) {\n        const text = delta.text;\n        if (text)\n          yield text;\n      }\n    }\n  }\n}\nfunction AnthropicStream(res, cb) {\n  if (Symbol.asyncIterator in res) {\n    return readableFromAsyncIterable(streamable(res)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer());\n  } else {\n    return AIStream(res, parseAnthropicStream(), cb).pipeThrough(\n      createStreamDataTransformer()\n    );\n  }\n}\n\n// streams/assistant-response.ts\nfunction AssistantResponse({ threadId, messageId }, process2) {\n  const stream = new ReadableStream({\n    async start(controller) {\n      var _a;\n      const textEncoder = new TextEncoder();\n      const sendMessage = (message) => {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"assistant_message\", message))\n        );\n      };\n      const sendDataMessage = (message) => {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"data_message\", message))\n        );\n      };\n      const sendError = (errorMessage) => {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"error\", errorMessage))\n        );\n      };\n      const forwardStream = async (stream2) => {\n        var _a2, _b;\n        let result = void 0;\n        for await (const value of stream2) {\n          switch (value.event) {\n            case \"thread.message.created\": {\n              controller.enqueue(\n                textEncoder.encode(\n                  formatStreamPart(\"assistant_message\", {\n                    id: value.data.id,\n                    role: \"assistant\",\n                    content: [{ type: \"text\", text: { value: \"\" } }]\n                  })\n                )\n              );\n              break;\n            }\n            case \"thread.message.delta\": {\n              const content = (_a2 = value.data.delta.content) == null ? void 0 : _a2[0];\n              if ((content == null ? void 0 : content.type) === \"text\" && ((_b = content.text) == null ? void 0 : _b.value) != null) {\n                controller.enqueue(\n                  textEncoder.encode(\n                    formatStreamPart(\"text\", content.text.value)\n                  )\n                );\n              }\n              break;\n            }\n            case \"thread.run.completed\":\n            case \"thread.run.requires_action\": {\n              result = value.data;\n              break;\n            }\n          }\n        }\n        return result;\n      };\n      controller.enqueue(\n        textEncoder.encode(\n          formatStreamPart(\"assistant_control_data\", {\n            threadId,\n            messageId\n          })\n        )\n      );\n      try {\n        await process2({\n          threadId,\n          messageId,\n          sendMessage,\n          sendDataMessage,\n          forwardStream\n        });\n      } catch (error) {\n        sendError((_a = error.message) != null ? _a : `${error}`);\n      } finally {\n        controller.close();\n      }\n    },\n    pull(controller) {\n    },\n    cancel() {\n    }\n  });\n  return new Response(stream, {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"text/plain; charset=utf-8\"\n    }\n  });\n}\nvar experimental_AssistantResponse = AssistantResponse;\n\n// streams/aws-bedrock-stream.ts\nasync function* asDeltaIterable(response, extractTextDeltaFromChunk) {\n  var _a, _b;\n  const decoder = new TextDecoder();\n  for await (const chunk of (_a = response.body) != null ? _a : []) {\n    const bytes = (_b = chunk.chunk) == null ? void 0 : _b.bytes;\n    if (bytes != null) {\n      const chunkText = decoder.decode(bytes);\n      const chunkJSON = JSON.parse(chunkText);\n      const delta = extractTextDeltaFromChunk(chunkJSON);\n      if (delta != null) {\n        yield delta;\n      }\n    }\n  }\n}\nfunction AWSBedrockAnthropicMessagesStream(response, callbacks) {\n  return AWSBedrockStream(response, callbacks, (chunk) => {\n    var _a;\n    return (_a = chunk.delta) == null ? void 0 : _a.text;\n  });\n}\nfunction AWSBedrockAnthropicStream(response, callbacks) {\n  return AWSBedrockStream(response, callbacks, (chunk) => chunk.completion);\n}\nfunction AWSBedrockCohereStream(response, callbacks) {\n  return AWSBedrockStream(response, callbacks, (chunk) => chunk == null ? void 0 : chunk.text);\n}\nfunction AWSBedrockLlama2Stream(response, callbacks) {\n  return AWSBedrockStream(response, callbacks, (chunk) => chunk.generation);\n}\nfunction AWSBedrockStream(response, callbacks, extractTextDeltaFromChunk) {\n  return readableFromAsyncIterable(\n    asDeltaIterable(response, extractTextDeltaFromChunk)\n  ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n\n// streams/cohere-stream.ts\nvar utf8Decoder = new TextDecoder(\"utf-8\");\nasync function processLines(lines, controller) {\n  for (const line of lines) {\n    const { text, is_finished } = JSON.parse(line);\n    if (!is_finished) {\n      controller.enqueue(text);\n    }\n  }\n}\nasync function readAndProcessLines(reader, controller) {\n  let segment = \"\";\n  while (true) {\n    const { value: chunk, done } = await reader.read();\n    if (done) {\n      break;\n    }\n    segment += utf8Decoder.decode(chunk, { stream: true });\n    const linesArray = segment.split(/\\r\\n|\\n|\\r/g);\n    segment = linesArray.pop() || \"\";\n    await processLines(linesArray, controller);\n  }\n  if (segment) {\n    const linesArray = [segment];\n    await processLines(linesArray, controller);\n  }\n  controller.close();\n}\nfunction createParser2(res) {\n  var _a;\n  const reader = (_a = res.body) == null ? void 0 : _a.getReader();\n  return new ReadableStream({\n    async start(controller) {\n      if (!reader) {\n        controller.close();\n        return;\n      }\n      await readAndProcessLines(reader, controller);\n    }\n  });\n}\nasync function* streamable2(stream) {\n  for await (const chunk of stream) {\n    if (chunk.eventType === \"text-generation\") {\n      const text = chunk.text;\n      if (text)\n        yield text;\n    }\n  }\n}\nfunction CohereStream(reader, callbacks) {\n  if (Symbol.asyncIterator in reader) {\n    return readableFromAsyncIterable(streamable2(reader)).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n  } else {\n    return createParser2(reader).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n  }\n}\n\n// streams/google-generative-ai-stream.ts\nasync function* streamable3(response) {\n  var _a, _b, _c;\n  for await (const chunk of response.stream) {\n    const parts = (_c = (_b = (_a = chunk.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts;\n    if (parts === void 0) {\n      continue;\n    }\n    const firstPart = parts[0];\n    if (typeof firstPart.text === \"string\") {\n      yield firstPart.text;\n    }\n  }\n}\nfunction GoogleGenerativeAIStream(response, cb) {\n  return readableFromAsyncIterable(streamable3(response)).pipeThrough(createCallbacksTransformer(cb)).pipeThrough(createStreamDataTransformer());\n}\n\n// streams/huggingface-stream.ts\nfunction createParser3(res) {\n  const trimStartOfStream = trimStartOfStreamHelper();\n  return new ReadableStream({\n    async pull(controller) {\n      var _a, _b;\n      const { value, done } = await res.next();\n      if (done) {\n        controller.close();\n        return;\n      }\n      const text = trimStartOfStream((_b = (_a = value.token) == null ? void 0 : _a.text) != null ? _b : \"\");\n      if (!text)\n        return;\n      if (value.generated_text != null && value.generated_text.length > 0) {\n        return;\n      }\n      if (text === \"</s>\" || text === \"<|endoftext|>\" || text === \"<|end|>\") {\n        return;\n      }\n      controller.enqueue(text);\n    }\n  });\n}\nfunction HuggingFaceStream(res, callbacks) {\n  return createParser3(res).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n\n// streams/inkeep-stream.ts\nfunction InkeepStream(res, callbacks) {\n  if (!res.body) {\n    throw new Error(\"Response body is null\");\n  }\n  let chat_session_id = \"\";\n  let records_cited;\n  const inkeepEventParser = (data, options) => {\n    var _a, _b;\n    const { event } = options;\n    if (event === \"records_cited\") {\n      records_cited = JSON.parse(data);\n      (_a = callbacks == null ? void 0 : callbacks.onRecordsCited) == null ? void 0 : _a.call(callbacks, records_cited);\n    }\n    if (event === \"message_chunk\") {\n      const inkeepMessageChunk = JSON.parse(data);\n      chat_session_id = (_b = inkeepMessageChunk.chat_session_id) != null ? _b : chat_session_id;\n      return inkeepMessageChunk.content_chunk;\n    }\n    return;\n  };\n  let { onRecordsCited, ...passThroughCallbacks } = callbacks || {};\n  passThroughCallbacks = {\n    ...passThroughCallbacks,\n    onFinal: (completion) => {\n      var _a;\n      const inkeepOnFinalMetadata = {\n        chat_session_id,\n        records_cited\n      };\n      (_a = callbacks == null ? void 0 : callbacks.onFinal) == null ? void 0 : _a.call(callbacks, completion, inkeepOnFinalMetadata);\n    }\n  };\n  return AIStream(res, inkeepEventParser, passThroughCallbacks).pipeThrough(\n    createStreamDataTransformer()\n  );\n}\n\n// streams/langchain-adapter.ts\nvar langchain_adapter_exports = {};\n__export(langchain_adapter_exports, {\n  toAIStream: () => toAIStream\n});\nfunction toAIStream(stream, callbacks) {\n  return stream.pipeThrough(\n    new TransformStream({\n      transform: async (chunk, controller) => {\n        if (typeof chunk === \"string\") {\n          controller.enqueue(chunk);\n        } else if (typeof chunk.content === \"string\") {\n          controller.enqueue(chunk.content);\n        } else {\n          const content = chunk.content;\n          for (const item of content) {\n            if (item.type === \"text\") {\n              controller.enqueue(item.text);\n            }\n          }\n        }\n      }\n    })\n  ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n\n// streams/langchain-stream.ts\nfunction LangChainStream(callbacks) {\n  const stream = new TransformStream();\n  const writer = stream.writable.getWriter();\n  const runs = /* @__PURE__ */ new Set();\n  const handleError = async (e, runId) => {\n    runs.delete(runId);\n    await writer.ready;\n    await writer.abort(e);\n  };\n  const handleStart = async (runId) => {\n    runs.add(runId);\n  };\n  const handleEnd = async (runId) => {\n    runs.delete(runId);\n    if (runs.size === 0) {\n      await writer.ready;\n      await writer.close();\n    }\n  };\n  return {\n    stream: stream.readable.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer()),\n    writer,\n    handlers: {\n      handleLLMNewToken: async (token) => {\n        await writer.ready;\n        await writer.write(token);\n      },\n      handleLLMStart: async (_llm, _prompts, runId) => {\n        handleStart(runId);\n      },\n      handleLLMEnd: async (_output, runId) => {\n        await handleEnd(runId);\n      },\n      handleLLMError: async (e, runId) => {\n        await handleError(e, runId);\n      },\n      handleChainStart: async (_chain, _inputs, runId) => {\n        handleStart(runId);\n      },\n      handleChainEnd: async (_outputs, runId) => {\n        await handleEnd(runId);\n      },\n      handleChainError: async (e, runId) => {\n        await handleError(e, runId);\n      },\n      handleToolStart: async (_tool, _input, runId) => {\n        handleStart(runId);\n      },\n      handleToolEnd: async (_output, runId) => {\n        await handleEnd(runId);\n      },\n      handleToolError: async (e, runId) => {\n        await handleError(e, runId);\n      }\n    }\n  };\n}\n\n// streams/mistral-stream.ts\nasync function* streamable4(stream) {\n  var _a, _b;\n  for await (const chunk of stream) {\n    const content = (_b = (_a = chunk.choices[0]) == null ? void 0 : _a.delta) == null ? void 0 : _b.content;\n    if (content === void 0 || content === \"\") {\n      continue;\n    }\n    yield content;\n  }\n}\nfunction MistralStream(response, callbacks) {\n  const stream = readableFromAsyncIterable(streamable4(response));\n  return stream.pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(createStreamDataTransformer());\n}\n\n// streams/openai-stream.ts\nfunction parseOpenAIStream() {\n  const extract = chunkToText();\n  return (data) => extract(JSON.parse(data));\n}\nasync function* streamable5(stream) {\n  const extract = chunkToText();\n  for await (let chunk of stream) {\n    if (\"promptFilterResults\" in chunk) {\n      chunk = {\n        id: chunk.id,\n        created: chunk.created.getDate(),\n        object: chunk.object,\n        // not exposed by Azure API\n        model: chunk.model,\n        // not exposed by Azure API\n        choices: chunk.choices.map((choice) => {\n          var _a, _b, _c, _d, _e, _f, _g;\n          return {\n            delta: {\n              content: (_a = choice.delta) == null ? void 0 : _a.content,\n              function_call: (_b = choice.delta) == null ? void 0 : _b.functionCall,\n              role: (_c = choice.delta) == null ? void 0 : _c.role,\n              tool_calls: ((_e = (_d = choice.delta) == null ? void 0 : _d.toolCalls) == null ? void 0 : _e.length) ? (_g = (_f = choice.delta) == null ? void 0 : _f.toolCalls) == null ? void 0 : _g.map((toolCall, index) => ({\n                index,\n                id: toolCall.id,\n                function: toolCall.function,\n                type: toolCall.type\n              })) : void 0\n            },\n            finish_reason: choice.finishReason,\n            index: choice.index\n          };\n        })\n      };\n    }\n    const text = extract(chunk);\n    if (text)\n      yield text;\n  }\n}\nfunction chunkToText() {\n  const trimStartOfStream = trimStartOfStreamHelper();\n  let isFunctionStreamingIn;\n  return (json) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;\n    if (isChatCompletionChunk(json)) {\n      const delta = (_a = json.choices[0]) == null ? void 0 : _a.delta;\n      if ((_b = delta.function_call) == null ? void 0 : _b.name) {\n        isFunctionStreamingIn = true;\n        return {\n          isText: false,\n          content: `{\"function_call\": {\"name\": \"${delta.function_call.name}\", \"arguments\": \"`\n        };\n      } else if ((_e = (_d = (_c = delta.tool_calls) == null ? void 0 : _c[0]) == null ? void 0 : _d.function) == null ? void 0 : _e.name) {\n        isFunctionStreamingIn = true;\n        const toolCall = delta.tool_calls[0];\n        if (toolCall.index === 0) {\n          return {\n            isText: false,\n            content: `{\"tool_calls\":[ {\"id\": \"${toolCall.id}\", \"type\": \"function\", \"function\": {\"name\": \"${(_f = toolCall.function) == null ? void 0 : _f.name}\", \"arguments\": \"`\n          };\n        } else {\n          return {\n            isText: false,\n            content: `\"}}, {\"id\": \"${toolCall.id}\", \"type\": \"function\", \"function\": {\"name\": \"${(_g = toolCall.function) == null ? void 0 : _g.name}\", \"arguments\": \"`\n          };\n        }\n      } else if ((_h = delta.function_call) == null ? void 0 : _h.arguments) {\n        return {\n          isText: false,\n          content: cleanupArguments((_i = delta.function_call) == null ? void 0 : _i.arguments)\n        };\n      } else if ((_l = (_k = (_j = delta.tool_calls) == null ? void 0 : _j[0]) == null ? void 0 : _k.function) == null ? void 0 : _l.arguments) {\n        return {\n          isText: false,\n          content: cleanupArguments((_o = (_n = (_m = delta.tool_calls) == null ? void 0 : _m[0]) == null ? void 0 : _n.function) == null ? void 0 : _o.arguments)\n        };\n      } else if (isFunctionStreamingIn && (((_p = json.choices[0]) == null ? void 0 : _p.finish_reason) === \"function_call\" || ((_q = json.choices[0]) == null ? void 0 : _q.finish_reason) === \"stop\")) {\n        isFunctionStreamingIn = false;\n        return {\n          isText: false,\n          content: '\"}}'\n        };\n      } else if (isFunctionStreamingIn && ((_r = json.choices[0]) == null ? void 0 : _r.finish_reason) === \"tool_calls\") {\n        isFunctionStreamingIn = false;\n        return {\n          isText: false,\n          content: '\"}}]}'\n        };\n      }\n    }\n    const text = trimStartOfStream(\n      isChatCompletionChunk(json) && json.choices[0].delta.content ? json.choices[0].delta.content : isCompletion(json) ? json.choices[0].text : \"\"\n    );\n    return text;\n  };\n  function cleanupArguments(argumentChunk) {\n    let escapedPartialJson = argumentChunk.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\//g, \"\\\\/\").replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\").replace(/\\f/g, \"\\\\f\");\n    return `${escapedPartialJson}`;\n  }\n}\nvar __internal__OpenAIFnMessagesSymbol = Symbol(\n  \"internal_openai_fn_messages\"\n);\nfunction isChatCompletionChunk(data) {\n  return \"choices\" in data && data.choices && data.choices[0] && \"delta\" in data.choices[0];\n}\nfunction isCompletion(data) {\n  return \"choices\" in data && data.choices && data.choices[0] && \"text\" in data.choices[0];\n}\nfunction OpenAIStream(res, callbacks) {\n  const cb = callbacks;\n  let stream;\n  if (Symbol.asyncIterator in res) {\n    stream = readableFromAsyncIterable(streamable5(res)).pipeThrough(\n      createCallbacksTransformer(\n        (cb == null ? void 0 : cb.experimental_onFunctionCall) || (cb == null ? void 0 : cb.experimental_onToolCall) ? {\n          ...cb,\n          onFinal: void 0\n        } : {\n          ...cb\n        }\n      )\n    );\n  } else {\n    stream = AIStream(\n      res,\n      parseOpenAIStream(),\n      (cb == null ? void 0 : cb.experimental_onFunctionCall) || (cb == null ? void 0 : cb.experimental_onToolCall) ? {\n        ...cb,\n        onFinal: void 0\n      } : {\n        ...cb\n      }\n    );\n  }\n  if (cb && (cb.experimental_onFunctionCall || cb.experimental_onToolCall)) {\n    const functionCallTransformer = createFunctionCallTransformer(cb);\n    return stream.pipeThrough(functionCallTransformer);\n  } else {\n    return stream.pipeThrough(createStreamDataTransformer());\n  }\n}\nfunction createFunctionCallTransformer(callbacks) {\n  const textEncoder = new TextEncoder();\n  let isFirstChunk = true;\n  let aggregatedResponse = \"\";\n  let aggregatedFinalCompletionResponse = \"\";\n  let isFunctionStreamingIn = false;\n  let functionCallMessages = callbacks[__internal__OpenAIFnMessagesSymbol] || [];\n  const decode = createChunkDecoder();\n  return new TransformStream({\n    async transform(chunk, controller) {\n      const message = decode(chunk);\n      aggregatedFinalCompletionResponse += message;\n      const shouldHandleAsFunction = isFirstChunk && (message.startsWith('{\"function_call\":') || message.startsWith('{\"tool_calls\":'));\n      if (shouldHandleAsFunction) {\n        isFunctionStreamingIn = true;\n        aggregatedResponse += message;\n        isFirstChunk = false;\n        return;\n      }\n      if (!isFunctionStreamingIn) {\n        controller.enqueue(\n          textEncoder.encode(formatStreamPart(\"text\", message))\n        );\n        return;\n      } else {\n        aggregatedResponse += message;\n      }\n    },\n    async flush(controller) {\n      try {\n        if (!isFirstChunk && isFunctionStreamingIn && (callbacks.experimental_onFunctionCall || callbacks.experimental_onToolCall)) {\n          isFunctionStreamingIn = false;\n          const payload = JSON.parse(aggregatedResponse);\n          let newFunctionCallMessages = [\n            ...functionCallMessages\n          ];\n          let functionResponse = void 0;\n          if (callbacks.experimental_onFunctionCall) {\n            if (payload.function_call === void 0) {\n              console.warn(\n                \"experimental_onFunctionCall should not be defined when using tools\"\n              );\n            }\n            const argumentsPayload = JSON.parse(\n              payload.function_call.arguments\n            );\n            functionResponse = await callbacks.experimental_onFunctionCall(\n              {\n                name: payload.function_call.name,\n                arguments: argumentsPayload\n              },\n              (result) => {\n                newFunctionCallMessages = [\n                  ...functionCallMessages,\n                  {\n                    role: \"assistant\",\n                    content: \"\",\n                    function_call: payload.function_call\n                  },\n                  {\n                    role: \"function\",\n                    name: payload.function_call.name,\n                    content: JSON.stringify(result)\n                  }\n                ];\n                return newFunctionCallMessages;\n              }\n            );\n          }\n          if (callbacks.experimental_onToolCall) {\n            const toolCalls = {\n              tools: []\n            };\n            for (const tool2 of payload.tool_calls) {\n              toolCalls.tools.push({\n                id: tool2.id,\n                type: \"function\",\n                func: {\n                  name: tool2.function.name,\n                  arguments: JSON.parse(tool2.function.arguments)\n                }\n              });\n            }\n            let responseIndex = 0;\n            try {\n              functionResponse = await callbacks.experimental_onToolCall(\n                toolCalls,\n                (result) => {\n                  if (result) {\n                    const { tool_call_id, function_name, tool_call_result } = result;\n                    newFunctionCallMessages = [\n                      ...newFunctionCallMessages,\n                      // Only append the assistant message if it's the first response\n                      ...responseIndex === 0 ? [\n                        {\n                          role: \"assistant\",\n                          content: \"\",\n                          tool_calls: payload.tool_calls.map(\n                            (tc) => ({\n                              id: tc.id,\n                              type: \"function\",\n                              function: {\n                                name: tc.function.name,\n                                // we send the arguments an object to the user, but as the API expects a string, we need to stringify it\n                                arguments: JSON.stringify(\n                                  tc.function.arguments\n                                )\n                              }\n                            })\n                          )\n                        }\n                      ] : [],\n                      // Append the function call result message\n                      {\n                        role: \"tool\",\n                        tool_call_id,\n                        name: function_name,\n                        content: JSON.stringify(tool_call_result)\n                      }\n                    ];\n                    responseIndex++;\n                  }\n                  return newFunctionCallMessages;\n                }\n              );\n            } catch (e) {\n              console.error(\"Error calling experimental_onToolCall:\", e);\n            }\n          }\n          if (!functionResponse) {\n            controller.enqueue(\n              textEncoder.encode(\n                formatStreamPart(\n                  payload.function_call ? \"function_call\" : \"tool_calls\",\n                  // parse to prevent double-encoding:\n                  JSON.parse(aggregatedResponse)\n                )\n              )\n            );\n            return;\n          } else if (typeof functionResponse === \"string\") {\n            controller.enqueue(\n              textEncoder.encode(formatStreamPart(\"text\", functionResponse))\n            );\n            aggregatedFinalCompletionResponse = functionResponse;\n            return;\n          }\n          const filteredCallbacks = {\n            ...callbacks,\n            onStart: void 0\n          };\n          callbacks.onFinal = void 0;\n          const openAIStream = OpenAIStream(functionResponse, {\n            ...filteredCallbacks,\n            [__internal__OpenAIFnMessagesSymbol]: newFunctionCallMessages\n          });\n          const reader = openAIStream.getReader();\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n            controller.enqueue(value);\n          }\n        }\n      } finally {\n        if (callbacks.onFinal && aggregatedFinalCompletionResponse) {\n          await callbacks.onFinal(aggregatedFinalCompletionResponse);\n        }\n      }\n    }\n  });\n}\n\n// streams/replicate-stream.ts\nasync function ReplicateStream(res, cb, options) {\n  var _a;\n  const url = (_a = res.urls) == null ? void 0 : _a.stream;\n  if (!url) {\n    if (res.error)\n      throw new Error(res.error);\n    else\n      throw new Error(\"Missing stream URL in Replicate response\");\n  }\n  const eventStream = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      Accept: \"text/event-stream\",\n      ...options == null ? void 0 : options.headers\n    }\n  });\n  return AIStream(eventStream, void 0, cb).pipeThrough(\n    createStreamDataTransformer()\n  );\n}\n\n// core/util/merge-streams.ts\nfunction mergeStreams(stream1, stream2) {\n  const reader1 = stream1.getReader();\n  const reader2 = stream2.getReader();\n  let lastRead1 = void 0;\n  let lastRead2 = void 0;\n  let stream1Done = false;\n  let stream2Done = false;\n  async function readStream1(controller) {\n    try {\n      if (lastRead1 == null) {\n        lastRead1 = reader1.read();\n      }\n      const result = await lastRead1;\n      lastRead1 = void 0;\n      if (!result.done) {\n        controller.enqueue(result.value);\n      } else {\n        controller.close();\n      }\n    } catch (error) {\n      controller.error(error);\n    }\n  }\n  async function readStream2(controller) {\n    try {\n      if (lastRead2 == null) {\n        lastRead2 = reader2.read();\n      }\n      const result = await lastRead2;\n      lastRead2 = void 0;\n      if (!result.done) {\n        controller.enqueue(result.value);\n      } else {\n        controller.close();\n      }\n    } catch (error) {\n      controller.error(error);\n    }\n  }\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        if (stream1Done) {\n          readStream2(controller);\n          return;\n        }\n        if (stream2Done) {\n          readStream1(controller);\n          return;\n        }\n        if (lastRead1 == null) {\n          lastRead1 = reader1.read();\n        }\n        if (lastRead2 == null) {\n          lastRead2 = reader2.read();\n        }\n        const { result, reader } = await Promise.race([\n          lastRead1.then((result2) => ({ result: result2, reader: reader1 })),\n          lastRead2.then((result2) => ({ result: result2, reader: reader2 }))\n        ]);\n        if (!result.done) {\n          controller.enqueue(result.value);\n        }\n        if (reader === reader1) {\n          lastRead1 = void 0;\n          if (result.done) {\n            readStream2(controller);\n            stream1Done = true;\n          }\n        } else {\n          lastRead2 = void 0;\n          if (result.done) {\n            stream2Done = true;\n            readStream1(controller);\n          }\n        }\n      } catch (error) {\n        controller.error(error);\n      }\n    },\n    cancel() {\n      reader1.cancel();\n      reader2.cancel();\n    }\n  });\n}\n\n// streams/stream-to-response.ts\nfunction streamToResponse(res, response, init, data) {\n  var _a;\n  response.writeHead((_a = init == null ? void 0 : init.status) != null ? _a : 200, {\n    \"Content-Type\": \"text/plain; charset=utf-8\",\n    ...init == null ? void 0 : init.headers\n  });\n  let processedStream = res;\n  if (data) {\n    processedStream = mergeStreams(data.stream, res);\n  }\n  const reader = processedStream.getReader();\n  function read() {\n    reader.read().then(({ done, value }) => {\n      if (done) {\n        response.end();\n        return;\n      }\n      response.write(value);\n      read();\n    });\n  }\n  read();\n}\n\n// shared/parse-complex-response.ts\nfunction assignAnnotationsToMessage(message, annotations) {\n  if (!message || !annotations || !annotations.length)\n    return message;\n  return { ...message, annotations: [...annotations] };\n}\nasync function parseComplexResponse({\n  reader,\n  abortControllerRef,\n  update,\n  onToolCall,\n  onFinish,\n  generateId: generateId2 = generateId,\n  getCurrentDate = () => /* @__PURE__ */ new Date()\n}) {\n  const createdAt = getCurrentDate();\n  const prefixMap = {\n    data: []\n  };\n  let message_annotations = void 0;\n  for await (const { type, value } of readDataStream(reader, {\n    isAborted: () => (abortControllerRef == null ? void 0 : abortControllerRef.current) === null\n  })) {\n    if (type === \"text\") {\n      if (prefixMap[\"text\"]) {\n        prefixMap[\"text\"] = {\n          ...prefixMap[\"text\"],\n          content: (prefixMap[\"text\"].content || \"\") + value\n        };\n      } else {\n        prefixMap[\"text\"] = {\n          id: generateId2(),\n          role: \"assistant\",\n          content: value,\n          createdAt\n        };\n      }\n    }\n    if (type === \"tool_call\") {\n      if (prefixMap.text == null) {\n        prefixMap.text = {\n          id: generateId2(),\n          role: \"assistant\",\n          content: \"\",\n          createdAt\n        };\n      }\n      if (prefixMap.text.toolInvocations == null) {\n        prefixMap.text.toolInvocations = [];\n      }\n      prefixMap.text.toolInvocations.push(value);\n      if (onToolCall) {\n        const result = await onToolCall({ toolCall: value });\n        if (result != null) {\n          prefixMap.text.toolInvocations[prefixMap.text.toolInvocations.length - 1] = { ...value, result };\n        }\n      }\n    } else if (type === \"tool_result\") {\n      if (prefixMap.text == null) {\n        prefixMap.text = {\n          id: generateId2(),\n          role: \"assistant\",\n          content: \"\",\n          createdAt\n        };\n      }\n      if (prefixMap.text.toolInvocations == null) {\n        prefixMap.text.toolInvocations = [];\n      }\n      const toolInvocationIndex = prefixMap.text.toolInvocations.findIndex(\n        (invocation) => invocation.toolCallId === value.toolCallId\n      );\n      if (toolInvocationIndex !== -1) {\n        prefixMap.text.toolInvocations[toolInvocationIndex] = value;\n      } else {\n        prefixMap.text.toolInvocations.push(value);\n      }\n    }\n    let functionCallMessage = null;\n    if (type === \"function_call\") {\n      prefixMap[\"function_call\"] = {\n        id: generateId2(),\n        role: \"assistant\",\n        content: \"\",\n        function_call: value.function_call,\n        name: value.function_call.name,\n        createdAt\n      };\n      functionCallMessage = prefixMap[\"function_call\"];\n    }\n    let toolCallMessage = null;\n    if (type === \"tool_calls\") {\n      prefixMap[\"tool_calls\"] = {\n        id: generateId2(),\n        role: \"assistant\",\n        content: \"\",\n        tool_calls: value.tool_calls,\n        createdAt\n      };\n      toolCallMessage = prefixMap[\"tool_calls\"];\n    }\n    if (type === \"data\") {\n      prefixMap[\"data\"].push(...value);\n    }\n    let responseMessage = prefixMap[\"text\"];\n    if (type === \"message_annotations\") {\n      if (!message_annotations) {\n        message_annotations = [...value];\n      } else {\n        message_annotations.push(...value);\n      }\n      functionCallMessage = assignAnnotationsToMessage(\n        prefixMap[\"function_call\"],\n        message_annotations\n      );\n      toolCallMessage = assignAnnotationsToMessage(\n        prefixMap[\"tool_calls\"],\n        message_annotations\n      );\n      responseMessage = assignAnnotationsToMessage(\n        prefixMap[\"text\"],\n        message_annotations\n      );\n    }\n    if (message_annotations == null ? void 0 : message_annotations.length) {\n      const messagePrefixKeys = [\n        \"text\",\n        \"function_call\",\n        \"tool_calls\"\n      ];\n      messagePrefixKeys.forEach((key) => {\n        if (prefixMap[key]) {\n          prefixMap[key].annotations = [...message_annotations];\n        }\n      });\n    }\n    const merged = [functionCallMessage, toolCallMessage, responseMessage].filter(Boolean).map((message) => ({\n      ...assignAnnotationsToMessage(message, message_annotations)\n    }));\n    update(merged, [...prefixMap[\"data\"]]);\n  }\n  onFinish == null ? void 0 : onFinish(prefixMap);\n  return {\n    messages: [\n      prefixMap.text,\n      prefixMap.function_call,\n      prefixMap.tool_calls\n    ].filter(Boolean),\n    data: prefixMap.data\n  };\n}\n\n// streams/streaming-react-response.ts\nvar experimental_StreamingReactResponse = class {\n  constructor(res, options) {\n    var _a, _b;\n    let resolveFunc = () => {\n    };\n    let next = new Promise((resolve) => {\n      resolveFunc = resolve;\n    });\n    const processedStream = (options == null ? void 0 : options.data) != null ? mergeStreams((_a = options == null ? void 0 : options.data) == null ? void 0 : _a.stream, res) : res;\n    let lastPayload = void 0;\n    parseComplexResponse({\n      reader: processedStream.getReader(),\n      update: (merged, data) => {\n        var _a2, _b2, _c;\n        const content = (_b2 = (_a2 = merged[0]) == null ? void 0 : _a2.content) != null ? _b2 : \"\";\n        const ui = ((_c = options == null ? void 0 : options.ui) == null ? void 0 : _c.call(options, { content, data })) || content;\n        const payload = { ui, content };\n        const resolvePrevious = resolveFunc;\n        const nextRow = new Promise((resolve) => {\n          resolveFunc = resolve;\n        });\n        resolvePrevious({\n          next: nextRow,\n          ...payload\n        });\n        lastPayload = payload;\n      },\n      generateId: (_b = options == null ? void 0 : options.generateId) != null ? _b : generateId,\n      onFinish: () => {\n        if (lastPayload !== void 0) {\n          resolveFunc({\n            next: null,\n            ...lastPayload\n          });\n        }\n      }\n    });\n    return next;\n  }\n};\n\n// streams/streaming-text-response.ts\nvar StreamingTextResponse = class extends Response {\n  constructor(res, init, data) {\n    let processedStream = res;\n    if (data) {\n      processedStream = mergeStreams(data.stream, res);\n    }\n    super(processedStream, {\n      ...init,\n      status: 200,\n      headers: prepareResponseHeaders(init, {\n        contentType: \"text/plain; charset=utf-8\"\n      })\n    });\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/nanoid/non-secure/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ai/node_modules/nanoid/non-secure/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   nanoid: () => (/* binding */ nanoid)\n/* harmony export */ });\nlet urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvbmFub2lkL25vbi1zZWN1cmUvaW5kZXguanM/YjhhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUgPSAyMSkgPT4ge1xuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgbGV0IGkgPSBzaXplXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWQgKz0gYWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGgpIHwgMF1cbiAgICB9XG4gICAgcmV0dXJuIGlkXG4gIH1cbn1cbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9ICcnXG4gIGxldCBpID0gc2l6ZVxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiA2NCkgfCAwXVxuICB9XG4gIHJldHVybiBpZFxufVxuZXhwb3J0IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/nanoid/non-secure/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Options.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Options.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions),\n/* harmony export */   getDefaultOptions: () => (/* binding */ getDefaultOptions),\n/* harmony export */   ignoreOverride: () => (/* binding */ ignoreOverride)\n/* harmony export */ });\nconst ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\nconst defaultOptions = {\n    name: undefined,\n    $refStrategy: \"root\",\n    basePath: [\"#\"],\n    effectStrategy: \"input\",\n    pipeStrategy: \"all\",\n    dateStrategy: \"format:date-time\",\n    mapStrategy: \"entries\",\n    removeAdditionalStrategy: \"passthrough\",\n    definitionPath: \"definitions\",\n    target: \"jsonSchema7\",\n    strictUnions: false,\n    definitions: {},\n    errorMessages: false,\n    markdownDescription: false,\n    patternStrategy: \"escape\",\n    emailStrategy: \"format:email\",\n};\nconst getDefaultOptions = (options) => (typeof options === \"string\"\n    ? {\n        ...defaultOptions,\n        name: options,\n    }\n    : {\n        ...defaultOptions,\n        ...options,\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9PcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL09wdGlvbnMuanM/N2FmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaWdub3JlT3ZlcnJpZGUgPSBTeW1ib2woXCJMZXQgem9kVG9Kc29uU2NoZW1hIGRlY2lkZSBvbiB3aGljaCBwYXJzZXIgdG8gdXNlXCIpO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAkcmVmU3RyYXRlZ3k6IFwicm9vdFwiLFxuICAgIGJhc2VQYXRoOiBbXCIjXCJdLFxuICAgIGVmZmVjdFN0cmF0ZWd5OiBcImlucHV0XCIsXG4gICAgcGlwZVN0cmF0ZWd5OiBcImFsbFwiLFxuICAgIGRhdGVTdHJhdGVneTogXCJmb3JtYXQ6ZGF0ZS10aW1lXCIsXG4gICAgbWFwU3RyYXRlZ3k6IFwiZW50cmllc1wiLFxuICAgIHJlbW92ZUFkZGl0aW9uYWxTdHJhdGVneTogXCJwYXNzdGhyb3VnaFwiLFxuICAgIGRlZmluaXRpb25QYXRoOiBcImRlZmluaXRpb25zXCIsXG4gICAgdGFyZ2V0OiBcImpzb25TY2hlbWE3XCIsXG4gICAgc3RyaWN0VW5pb25zOiBmYWxzZSxcbiAgICBkZWZpbml0aW9uczoge30sXG4gICAgZXJyb3JNZXNzYWdlczogZmFsc2UsXG4gICAgbWFya2Rvd25EZXNjcmlwdGlvbjogZmFsc2UsXG4gICAgcGF0dGVyblN0cmF0ZWd5OiBcImVzY2FwZVwiLFxuICAgIGVtYWlsU3RyYXRlZ3k6IFwiZm9ybWF0OmVtYWlsXCIsXG59O1xuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRPcHRpb25zID0gKG9wdGlvbnMpID0+ICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIlxuICAgID8ge1xuICAgICAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgbmFtZTogb3B0aW9ucyxcbiAgICB9XG4gICAgOiB7XG4gICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Refs.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Refs.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRefs: () => (/* binding */ getRefs)\n/* harmony export */ });\n/* harmony import */ var _Options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Options.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Options.js\");\n\nconst getRefs = (options) => {\n    const _options = (0,_Options_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)(options);\n    const currentPath = _options.name !== undefined\n        ? [..._options.basePath, _options.definitionPath, _options.name]\n        : _options.basePath;\n    return {\n        ..._options,\n        currentPath: currentPath,\n        propertyPath: undefined,\n        seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [\n            def._def,\n            {\n                def: def._def,\n                path: [..._options.basePath, _options.definitionPath, name],\n                // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n                jsonSchema: undefined,\n            },\n        ])),\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9SZWZzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQzFDO0FBQ1AscUJBQXFCLDhEQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL1JlZnMuanM/ODJjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL09wdGlvbnMuanNcIjtcbmV4cG9ydCBjb25zdCBnZXRSZWZzID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBfb3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gX29wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgX29wdGlvbnMubmFtZV1cbiAgICAgICAgOiBfb3B0aW9ucy5iYXNlUGF0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5fb3B0aW9ucyxcbiAgICAgICAgY3VycmVudFBhdGg6IGN1cnJlbnRQYXRoLFxuICAgICAgICBwcm9wZXJ0eVBhdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgc2VlbjogbmV3IE1hcChPYmplY3QuZW50cmllcyhfb3B0aW9ucy5kZWZpbml0aW9ucykubWFwKChbbmFtZSwgZGVmXSkgPT4gW1xuICAgICAgICAgICAgZGVmLl9kZWYsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGVmOiBkZWYuX2RlZixcbiAgICAgICAgICAgICAgICBwYXRoOiBbLi4uX29wdGlvbnMuYmFzZVBhdGgsIF9vcHRpb25zLmRlZmluaXRpb25QYXRoLCBuYW1lXSxcbiAgICAgICAgICAgICAgICAvLyBSZXNvbHV0aW9uIG9mIHJlZmVyZW5jZXMgd2lsbCBiZSBmb3JjZWQgZXZlbiB0aG91Z2ggc2Vlbiwgc28gaXQncyBvayB0aGF0IHRoZSBzY2hlbWEgaXMgdW5kZWZpbmVkIGhlcmUgZm9yIG5vdy5cbiAgICAgICAgICAgICAgICBqc29uU2NoZW1hOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKSksXG4gICAgfTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Refs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addErrorMessage: () => (/* binding */ addErrorMessage),\n/* harmony export */   setResponseValueAndErrors: () => (/* binding */ setResponseValueAndErrors)\n/* harmony export */ });\nfunction addErrorMessage(res, key, errorMessage, refs) {\n    if (!refs?.errorMessages)\n        return;\n    if (errorMessage) {\n        res.errorMessage = {\n            ...res.errorMessage,\n            [key]: errorMessage,\n        };\n    }\n}\nfunction setResponseValueAndErrors(res, key, value, errorMessage, refs) {\n    res[key] = value;\n    addErrorMessage(res, key, errorMessage, refs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9lcnJvck1lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL2Vycm9yTWVzc2FnZXMuanM/YzlhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpIHtcbiAgICBpZiAoIXJlZnM/LmVycm9yTWVzc2FnZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHJlcy5lcnJvck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAuLi5yZXMuZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgW2tleV06IGVycm9yTWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIGtleSwgdmFsdWUsIGVycm9yTWVzc2FnZSwgcmVmcykge1xuICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addErrorMessage: () => (/* reexport safe */ _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.addErrorMessage),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultOptions: () => (/* reexport safe */ _Options_js__WEBPACK_IMPORTED_MODULE_1__.defaultOptions),\n/* harmony export */   getDefaultOptions: () => (/* reexport safe */ _Options_js__WEBPACK_IMPORTED_MODULE_1__.getDefaultOptions),\n/* harmony export */   getRefs: () => (/* reexport safe */ _Refs_js__WEBPACK_IMPORTED_MODULE_33__.getRefs),\n/* harmony export */   ignoreOverride: () => (/* reexport safe */ _Options_js__WEBPACK_IMPORTED_MODULE_1__.ignoreOverride),\n/* harmony export */   parseAnyDef: () => (/* reexport safe */ _parsers_any_js__WEBPACK_IMPORTED_MODULE_3__.parseAnyDef),\n/* harmony export */   parseArrayDef: () => (/* reexport safe */ _parsers_array_js__WEBPACK_IMPORTED_MODULE_4__.parseArrayDef),\n/* harmony export */   parseBigintDef: () => (/* reexport safe */ _parsers_bigint_js__WEBPACK_IMPORTED_MODULE_5__.parseBigintDef),\n/* harmony export */   parseBooleanDef: () => (/* reexport safe */ _parsers_boolean_js__WEBPACK_IMPORTED_MODULE_6__.parseBooleanDef),\n/* harmony export */   parseBrandedDef: () => (/* reexport safe */ _parsers_branded_js__WEBPACK_IMPORTED_MODULE_7__.parseBrandedDef),\n/* harmony export */   parseCatchDef: () => (/* reexport safe */ _parsers_catch_js__WEBPACK_IMPORTED_MODULE_8__.parseCatchDef),\n/* harmony export */   parseDateDef: () => (/* reexport safe */ _parsers_date_js__WEBPACK_IMPORTED_MODULE_9__.parseDateDef),\n/* harmony export */   parseDef: () => (/* reexport safe */ _parseDef_js__WEBPACK_IMPORTED_MODULE_2__.parseDef),\n/* harmony export */   parseDefaultDef: () => (/* reexport safe */ _parsers_default_js__WEBPACK_IMPORTED_MODULE_10__.parseDefaultDef),\n/* harmony export */   parseEffectsDef: () => (/* reexport safe */ _parsers_effects_js__WEBPACK_IMPORTED_MODULE_11__.parseEffectsDef),\n/* harmony export */   parseEnumDef: () => (/* reexport safe */ _parsers_enum_js__WEBPACK_IMPORTED_MODULE_12__.parseEnumDef),\n/* harmony export */   parseIntersectionDef: () => (/* reexport safe */ _parsers_intersection_js__WEBPACK_IMPORTED_MODULE_13__.parseIntersectionDef),\n/* harmony export */   parseLiteralDef: () => (/* reexport safe */ _parsers_literal_js__WEBPACK_IMPORTED_MODULE_14__.parseLiteralDef),\n/* harmony export */   parseMapDef: () => (/* reexport safe */ _parsers_map_js__WEBPACK_IMPORTED_MODULE_15__.parseMapDef),\n/* harmony export */   parseNativeEnumDef: () => (/* reexport safe */ _parsers_nativeEnum_js__WEBPACK_IMPORTED_MODULE_16__.parseNativeEnumDef),\n/* harmony export */   parseNeverDef: () => (/* reexport safe */ _parsers_never_js__WEBPACK_IMPORTED_MODULE_17__.parseNeverDef),\n/* harmony export */   parseNullDef: () => (/* reexport safe */ _parsers_null_js__WEBPACK_IMPORTED_MODULE_18__.parseNullDef),\n/* harmony export */   parseNullableDef: () => (/* reexport safe */ _parsers_nullable_js__WEBPACK_IMPORTED_MODULE_19__.parseNullableDef),\n/* harmony export */   parseNumberDef: () => (/* reexport safe */ _parsers_number_js__WEBPACK_IMPORTED_MODULE_20__.parseNumberDef),\n/* harmony export */   parseObjectDef: () => (/* reexport safe */ _parsers_object_js__WEBPACK_IMPORTED_MODULE_21__.parseObjectDef),\n/* harmony export */   parseObjectDefX: () => (/* reexport safe */ _parsers_object_js__WEBPACK_IMPORTED_MODULE_21__.parseObjectDefX),\n/* harmony export */   parseOptionalDef: () => (/* reexport safe */ _parsers_optional_js__WEBPACK_IMPORTED_MODULE_22__.parseOptionalDef),\n/* harmony export */   parsePipelineDef: () => (/* reexport safe */ _parsers_pipeline_js__WEBPACK_IMPORTED_MODULE_23__.parsePipelineDef),\n/* harmony export */   parsePromiseDef: () => (/* reexport safe */ _parsers_promise_js__WEBPACK_IMPORTED_MODULE_24__.parsePromiseDef),\n/* harmony export */   parseReadonlyDef: () => (/* reexport safe */ _parsers_readonly_js__WEBPACK_IMPORTED_MODULE_25__.parseReadonlyDef),\n/* harmony export */   parseRecordDef: () => (/* reexport safe */ _parsers_record_js__WEBPACK_IMPORTED_MODULE_26__.parseRecordDef),\n/* harmony export */   parseSetDef: () => (/* reexport safe */ _parsers_set_js__WEBPACK_IMPORTED_MODULE_27__.parseSetDef),\n/* harmony export */   parseStringDef: () => (/* reexport safe */ _parsers_string_js__WEBPACK_IMPORTED_MODULE_28__.parseStringDef),\n/* harmony export */   parseTupleDef: () => (/* reexport safe */ _parsers_tuple_js__WEBPACK_IMPORTED_MODULE_29__.parseTupleDef),\n/* harmony export */   parseUndefinedDef: () => (/* reexport safe */ _parsers_undefined_js__WEBPACK_IMPORTED_MODULE_30__.parseUndefinedDef),\n/* harmony export */   parseUnionDef: () => (/* reexport safe */ _parsers_union_js__WEBPACK_IMPORTED_MODULE_31__.parseUnionDef),\n/* harmony export */   parseUnknownDef: () => (/* reexport safe */ _parsers_unknown_js__WEBPACK_IMPORTED_MODULE_32__.parseUnknownDef),\n/* harmony export */   primitiveMappings: () => (/* reexport safe */ _parsers_union_js__WEBPACK_IMPORTED_MODULE_31__.primitiveMappings),\n/* harmony export */   setResponseValueAndErrors: () => (/* reexport safe */ _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors),\n/* harmony export */   zodPatterns: () => (/* reexport safe */ _parsers_string_js__WEBPACK_IMPORTED_MODULE_28__.zodPatterns),\n/* harmony export */   zodToJsonSchema: () => (/* reexport safe */ _zodToJsonSchema_js__WEBPACK_IMPORTED_MODULE_34__.zodToJsonSchema)\n/* harmony export */ });\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n/* harmony import */ var _Options_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Options.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Options.js\");\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n/* harmony import */ var _parsers_any_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/any.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/any.js\");\n/* harmony import */ var _parsers_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/array.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/array.js\");\n/* harmony import */ var _parsers_bigint_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/bigint.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js\");\n/* harmony import */ var _parsers_boolean_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/boolean.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js\");\n/* harmony import */ var _parsers_branded_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/branded.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js\");\n/* harmony import */ var _parsers_catch_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/catch.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js\");\n/* harmony import */ var _parsers_date_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/date.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/date.js\");\n/* harmony import */ var _parsers_default_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/default.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/default.js\");\n/* harmony import */ var _parsers_effects_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/effects.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js\");\n/* harmony import */ var _parsers_enum_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/enum.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js\");\n/* harmony import */ var _parsers_intersection_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/intersection.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js\");\n/* harmony import */ var _parsers_literal_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/literal.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js\");\n/* harmony import */ var _parsers_map_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./parsers/map.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/map.js\");\n/* harmony import */ var _parsers_nativeEnum_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./parsers/nativeEnum.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js\");\n/* harmony import */ var _parsers_never_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./parsers/never.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/never.js\");\n/* harmony import */ var _parsers_null_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./parsers/null.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/null.js\");\n/* harmony import */ var _parsers_nullable_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./parsers/nullable.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js\");\n/* harmony import */ var _parsers_number_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./parsers/number.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/number.js\");\n/* harmony import */ var _parsers_object_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./parsers/object.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/object.js\");\n/* harmony import */ var _parsers_optional_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./parsers/optional.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js\");\n/* harmony import */ var _parsers_pipeline_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./parsers/pipeline.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js\");\n/* harmony import */ var _parsers_promise_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./parsers/promise.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js\");\n/* harmony import */ var _parsers_readonly_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./parsers/readonly.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js\");\n/* harmony import */ var _parsers_record_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./parsers/record.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/record.js\");\n/* harmony import */ var _parsers_set_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./parsers/set.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/set.js\");\n/* harmony import */ var _parsers_string_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./parsers/string.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/string.js\");\n/* harmony import */ var _parsers_tuple_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./parsers/tuple.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js\");\n/* harmony import */ var _parsers_undefined_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./parsers/undefined.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js\");\n/* harmony import */ var _parsers_union_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./parsers/union.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/union.js\");\n/* harmony import */ var _parsers_unknown_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./parsers/unknown.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js\");\n/* harmony import */ var _Refs_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./Refs.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Refs.js\");\n/* harmony import */ var _zodToJsonSchema_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./zodToJsonSchema.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_zodToJsonSchema_js__WEBPACK_IMPORTED_MODULE_34__.zodToJsonSchema);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNOO0FBQ0M7QUFDRztBQUNFO0FBQ0M7QUFDQztBQUNBO0FBQ0Y7QUFDRDtBQUNHO0FBQ0E7QUFDSDtBQUNRO0FBQ0w7QUFDSjtBQUNPO0FBQ0w7QUFDRDtBQUNJO0FBQ0Y7QUFDQTtBQUNFO0FBQ0E7QUFDRDtBQUNDO0FBQ0Y7QUFDSDtBQUNHO0FBQ0Q7QUFDSTtBQUNKO0FBQ0U7QUFDWDtBQUNXO0FBQ2tCO0FBQ3ZELGlFQUFlLGlFQUFlLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9pbmRleC5qcz81YzU5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Vycm9yTWVzc2FnZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL09wdGlvbnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlRGVmLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL2FueS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9hcnJheS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9iaWdpbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvYm9vbGVhbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9icmFuZGVkLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL2NhdGNoLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL2RhdGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvZGVmYXVsdC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9lZmZlY3RzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL2VudW0uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvaW50ZXJzZWN0aW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL2xpdGVyYWwuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvbWFwLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL25hdGl2ZUVudW0uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvbmV2ZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvbnVsbC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9udWxsYWJsZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9udW1iZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvb2JqZWN0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL29wdGlvbmFsLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL3BpcGVsaW5lLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL3Byb21pc2UuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvcmVhZG9ubHkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvcmVjb3JkLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL3NldC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFyc2Vycy9zdHJpbmcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvdHVwbGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnNlcnMvdW5kZWZpbmVkLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL3VuaW9uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wYXJzZXJzL3Vua25vd24uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1JlZnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3pvZFRvSnNvblNjaGVtYS5qc1wiO1xuaW1wb3J0IHsgem9kVG9Kc29uU2NoZW1hIH0gZnJvbSBcIi4vem9kVG9Kc29uU2NoZW1hLmpzXCI7XG5leHBvcnQgZGVmYXVsdCB6b2RUb0pzb25TY2hlbWE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js":
/*!******************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDef: () => (/* binding */ parseDef)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _parsers_any_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers/any.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/any.js\");\n/* harmony import */ var _parsers_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers/array.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/array.js\");\n/* harmony import */ var _parsers_bigint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers/bigint.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js\");\n/* harmony import */ var _parsers_boolean_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/boolean.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js\");\n/* harmony import */ var _parsers_branded_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/branded.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js\");\n/* harmony import */ var _parsers_catch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/catch.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js\");\n/* harmony import */ var _parsers_date_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/date.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/date.js\");\n/* harmony import */ var _parsers_default_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/default.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/default.js\");\n/* harmony import */ var _parsers_effects_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/effects.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js\");\n/* harmony import */ var _parsers_enum_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/enum.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js\");\n/* harmony import */ var _parsers_intersection_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/intersection.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js\");\n/* harmony import */ var _parsers_literal_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/literal.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js\");\n/* harmony import */ var _parsers_map_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/map.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/map.js\");\n/* harmony import */ var _parsers_nativeEnum_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/nativeEnum.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js\");\n/* harmony import */ var _parsers_never_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/never.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/never.js\");\n/* harmony import */ var _parsers_null_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./parsers/null.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/null.js\");\n/* harmony import */ var _parsers_nullable_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./parsers/nullable.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js\");\n/* harmony import */ var _parsers_number_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./parsers/number.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/number.js\");\n/* harmony import */ var _parsers_object_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./parsers/object.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/object.js\");\n/* harmony import */ var _parsers_optional_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./parsers/optional.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js\");\n/* harmony import */ var _parsers_pipeline_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./parsers/pipeline.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js\");\n/* harmony import */ var _parsers_promise_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./parsers/promise.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js\");\n/* harmony import */ var _parsers_record_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./parsers/record.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/record.js\");\n/* harmony import */ var _parsers_set_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./parsers/set.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/set.js\");\n/* harmony import */ var _parsers_string_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./parsers/string.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/string.js\");\n/* harmony import */ var _parsers_tuple_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./parsers/tuple.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js\");\n/* harmony import */ var _parsers_undefined_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./parsers/undefined.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js\");\n/* harmony import */ var _parsers_union_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./parsers/union.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/union.js\");\n/* harmony import */ var _parsers_unknown_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./parsers/unknown.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js\");\n/* harmony import */ var _parsers_readonly_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./parsers/readonly.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js\");\n/* harmony import */ var _Options_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Options.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Options.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction parseDef(def, refs, forceResolution = false) {\n    const seenItem = refs.seen.get(def);\n    if (refs.override) {\n        const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);\n        if (overrideResult !== _Options_js__WEBPACK_IMPORTED_MODULE_30__.ignoreOverride) {\n            return overrideResult;\n        }\n    }\n    if (seenItem && !forceResolution) {\n        const seenSchema = get$ref(seenItem, refs);\n        if (seenSchema !== undefined) {\n            return seenSchema;\n        }\n    }\n    const newItem = { def, path: refs.currentPath, jsonSchema: undefined };\n    refs.seen.set(def, newItem);\n    const jsonSchema = selectParser(def, def.typeName, refs);\n    if (jsonSchema) {\n        addMeta(def, refs, jsonSchema);\n    }\n    newItem.jsonSchema = jsonSchema;\n    return jsonSchema;\n}\nconst get$ref = (item, refs) => {\n    switch (refs.$refStrategy) {\n        case \"root\":\n            return { $ref: item.path.join(\"/\") };\n        case \"relative\":\n            return { $ref: getRelativePath(refs.currentPath, item.path) };\n        case \"none\":\n        case \"seen\": {\n            if (item.path.length < refs.currentPath.length &&\n                item.path.every((value, index) => refs.currentPath[index] === value)) {\n                console.warn(`Recursive reference detected at ${refs.currentPath.join(\"/\")}! Defaulting to any`);\n                return {};\n            }\n            return refs.$refStrategy === \"seen\" ? {} : undefined;\n        }\n    }\n};\nconst getRelativePath = (pathA, pathB) => {\n    let i = 0;\n    for (; i < pathA.length && i < pathB.length; i++) {\n        if (pathA[i] !== pathB[i])\n            break;\n    }\n    return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\nconst selectParser = (def, typeName, refs) => {\n    switch (typeName) {\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodString:\n            return (0,_parsers_string_js__WEBPACK_IMPORTED_MODULE_24__.parseStringDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodNumber:\n            return (0,_parsers_number_js__WEBPACK_IMPORTED_MODULE_17__.parseNumberDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodObject:\n            return (0,_parsers_object_js__WEBPACK_IMPORTED_MODULE_18__.parseObjectDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodBigInt:\n            return (0,_parsers_bigint_js__WEBPACK_IMPORTED_MODULE_2__.parseBigintDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodBoolean:\n            return (0,_parsers_boolean_js__WEBPACK_IMPORTED_MODULE_3__.parseBooleanDef)();\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodDate:\n            return (0,_parsers_date_js__WEBPACK_IMPORTED_MODULE_6__.parseDateDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodUndefined:\n            return (0,_parsers_undefined_js__WEBPACK_IMPORTED_MODULE_26__.parseUndefinedDef)();\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodNull:\n            return (0,_parsers_null_js__WEBPACK_IMPORTED_MODULE_15__.parseNullDef)(refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodArray:\n            return (0,_parsers_array_js__WEBPACK_IMPORTED_MODULE_1__.parseArrayDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodUnion:\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n            return (0,_parsers_union_js__WEBPACK_IMPORTED_MODULE_27__.parseUnionDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodIntersection:\n            return (0,_parsers_intersection_js__WEBPACK_IMPORTED_MODULE_10__.parseIntersectionDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodTuple:\n            return (0,_parsers_tuple_js__WEBPACK_IMPORTED_MODULE_25__.parseTupleDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodRecord:\n            return (0,_parsers_record_js__WEBPACK_IMPORTED_MODULE_22__.parseRecordDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodLiteral:\n            return (0,_parsers_literal_js__WEBPACK_IMPORTED_MODULE_11__.parseLiteralDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodEnum:\n            return (0,_parsers_enum_js__WEBPACK_IMPORTED_MODULE_9__.parseEnumDef)(def);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodNativeEnum:\n            return (0,_parsers_nativeEnum_js__WEBPACK_IMPORTED_MODULE_13__.parseNativeEnumDef)(def);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodNullable:\n            return (0,_parsers_nullable_js__WEBPACK_IMPORTED_MODULE_16__.parseNullableDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodOptional:\n            return (0,_parsers_optional_js__WEBPACK_IMPORTED_MODULE_19__.parseOptionalDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodMap:\n            return (0,_parsers_map_js__WEBPACK_IMPORTED_MODULE_12__.parseMapDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodSet:\n            return (0,_parsers_set_js__WEBPACK_IMPORTED_MODULE_23__.parseSetDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodLazy:\n            return parseDef(def.getter()._def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodPromise:\n            return (0,_parsers_promise_js__WEBPACK_IMPORTED_MODULE_21__.parsePromiseDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodNaN:\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodNever:\n            return (0,_parsers_never_js__WEBPACK_IMPORTED_MODULE_14__.parseNeverDef)();\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodEffects:\n            return (0,_parsers_effects_js__WEBPACK_IMPORTED_MODULE_8__.parseEffectsDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodAny:\n            return (0,_parsers_any_js__WEBPACK_IMPORTED_MODULE_0__.parseAnyDef)();\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodUnknown:\n            return (0,_parsers_unknown_js__WEBPACK_IMPORTED_MODULE_28__.parseUnknownDef)();\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodDefault:\n            return (0,_parsers_default_js__WEBPACK_IMPORTED_MODULE_7__.parseDefaultDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodBranded:\n            return (0,_parsers_branded_js__WEBPACK_IMPORTED_MODULE_4__.parseBrandedDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodReadonly:\n            return (0,_parsers_readonly_js__WEBPACK_IMPORTED_MODULE_29__.parseReadonlyDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodCatch:\n            return (0,_parsers_catch_js__WEBPACK_IMPORTED_MODULE_5__.parseCatchDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodPipeline:\n            return (0,_parsers_pipeline_js__WEBPACK_IMPORTED_MODULE_20__.parsePipelineDef)(def, refs);\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodFunction:\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodVoid:\n        case zod__WEBPACK_IMPORTED_MODULE_31__.ZodFirstPartyTypeKind.ZodSymbol:\n            return undefined;\n        default:\n            return ((_) => undefined)(typeName);\n    }\n};\nconst addMeta = (def, refs, jsonSchema) => {\n    if (def.description) {\n        jsonSchema.description = def.description;\n        if (refs.markdownDescription) {\n            jsonSchema.markdownDescription = def.description;\n        }\n    }\n    return jsonSchema;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/any.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/any.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseAnyDef: () => (/* binding */ parseAnyDef)\n/* harmony export */ });\nfunction parseAnyDef() {\n    return {};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2FueS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9hbnkuanM/NTA4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VBbnlEZWYoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/any.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/array.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/array.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseArrayDef: () => (/* binding */ parseArrayDef)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\n\n\nfunction parseArrayDef(def, refs) {\n    const res = {\n        type: \"array\",\n    };\n    if (def.type?._def?.typeName !== zod__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodAny) {\n        res.items = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_1__.parseDef)(def.type._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"items\"],\n        });\n    }\n    if (def.minLength) {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minItems\", def.minLength.value, def.minLength.message, refs);\n    }\n    if (def.maxLength) {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maxItems\", def.maxLength.value, def.maxLength.message, refs);\n    }\n    if (def.exactLength) {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minItems\", def.exactLength.value, def.exactLength.message, refs);\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maxItems\", def.exactLength.value, def.exactLength.message, refs);\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDb0I7QUFDdEI7QUFDbkM7QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsc0RBQXFCO0FBQzFELG9CQUFvQixzREFBUTtBQUM1QjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxRQUFRLDRFQUF5QjtBQUNqQztBQUNBO0FBQ0EsUUFBUSw0RUFBeUI7QUFDakM7QUFDQTtBQUNBLFFBQVEsNEVBQXlCO0FBQ2pDLFFBQVEsNEVBQXlCO0FBQ2pDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvYXJyYXkuanM/YmEwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBab2RGaXJzdFBhcnR5VHlwZUtpbmQgfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMuanNcIjtcbmltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcnJheURlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICB9O1xuICAgIGlmIChkZWYudHlwZT8uX2RlZj8udHlwZU5hbWUgIT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBbnkpIHtcbiAgICAgICAgcmVzLml0ZW1zID0gcGFyc2VEZWYoZGVmLnR5cGUuX2RlZiwge1xuICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkZWYubWluTGVuZ3RoKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1pbkl0ZW1zXCIsIGRlZi5taW5MZW5ndGgudmFsdWUsIGRlZi5taW5MZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYubWF4TGVuZ3RoKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heEl0ZW1zXCIsIGRlZi5tYXhMZW5ndGgudmFsdWUsIGRlZi5tYXhMZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYuZXhhY3RMZW5ndGgpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwibWluSXRlbXNcIiwgZGVmLmV4YWN0TGVuZ3RoLnZhbHVlLCBkZWYuZXhhY3RMZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heEl0ZW1zXCIsIGRlZi5leGFjdExlbmd0aC52YWx1ZSwgZGVmLmV4YWN0TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBigintDef: () => (/* binding */ parseBigintDef)\n/* harmony export */ });\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n\nfunction parseBigintDef(def, refs) {\n    const res = {\n        type: \"integer\",\n        format: \"int64\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2JpZ2ludC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRTtBQUN6RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNEVBQXlCO0FBQ2pEO0FBQ0E7QUFDQSx3QkFBd0IsNEVBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0RUFBeUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0RUFBeUI7QUFDakQ7QUFDQTtBQUNBLHdCQUF3Qiw0RUFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRFQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNEVBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2JpZ2ludC5qcz84MzMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQmlnaW50RGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgICAgIGZvcm1hdDogXCJpbnQ2NFwiLFxuICAgIH07XG4gICAgaWYgKCFkZWYuY2hlY2tzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5pbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcImV4Y2x1c2l2ZU1pbmltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1pbmltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhpbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcImV4Y2x1c2l2ZU1heGltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1heGltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heGltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZU9mXCI6XG4gICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwibXVsdGlwbGVPZlwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBooleanDef: () => (/* binding */ parseBooleanDef)\n/* harmony export */ });\nfunction parseBooleanDef() {\n    return {\n        type: \"boolean\",\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2Jvb2xlYW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2Jvb2xlYW4uanM/MGVkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VCb29sZWFuRGVmKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBrandedDef: () => (/* binding */ parseBrandedDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nfunction parseBrandedDef(_def, refs) {\n    return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(_def.type._def, refs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2JyYW5kZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEM7QUFDbkM7QUFDUCxXQUFXLHNEQUFRO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9icmFuZGVkLmpzPzRiODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJyYW5kZWREZWYoX2RlZiwgcmVmcykge1xuICAgIHJldHVybiBwYXJzZURlZihfZGVmLnR5cGUuX2RlZiwgcmVmcyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCatchDef: () => (/* binding */ parseCatchDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nconst parseCatchDef = (def, refs) => {\n    return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.innerType._def, refs);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2NhdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQ25DO0FBQ1AsV0FBVyxzREFBUTtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvY2F0Y2guanM/YmEyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlQ2F0Y2hEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/date.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/date.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDateDef: () => (/* binding */ parseDateDef)\n/* harmony export */ });\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n\nfunction parseDateDef(def, refs, overrideDateStrategy) {\n    const strategy = overrideDateStrategy ?? refs.dateStrategy;\n    if (Array.isArray(strategy)) {\n        return {\n            anyOf: strategy.map((item, i) => parseDateDef(def, refs, item)),\n        };\n    }\n    switch (strategy) {\n        case \"string\":\n        case \"format:date-time\":\n            return {\n                type: \"string\",\n                format: \"date-time\",\n            };\n        case \"format:date\":\n            return {\n                type: \"string\",\n                format: \"date\",\n            };\n        case \"integer\":\n            return integerDateParser(def, refs);\n    }\n}\nconst integerDateParser = (def, refs) => {\n    const res = {\n        type: \"integer\",\n        format: \"unix-time\",\n    };\n    if (refs.target === \"openApi3\") {\n        return res;\n    }\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minimum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n            case \"max\":\n                (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maximum\", check.value, // This is in milliseconds\n                check.message, refs);\n                break;\n        }\n    }\n    return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2RhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0U7QUFDekQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNEVBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0RUFBeUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9kYXRlLmpzP2FiYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEYXRlRGVmKGRlZiwgcmVmcywgb3ZlcnJpZGVEYXRlU3RyYXRlZ3kpIHtcbiAgICBjb25zdCBzdHJhdGVneSA9IG92ZXJyaWRlRGF0ZVN0cmF0ZWd5ID8/IHJlZnMuZGF0ZVN0cmF0ZWd5O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0cmF0ZWd5KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYW55T2Y6IHN0cmF0ZWd5Lm1hcCgoaXRlbSwgaSkgPT4gcGFyc2VEYXRlRGVmKGRlZiwgcmVmcywgaXRlbSkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgY2FzZSBcImZvcm1hdDpkYXRlLXRpbWVcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiZGF0ZS10aW1lXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwiZm9ybWF0OmRhdGVcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImludGVnZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBpbnRlZ2VyRGF0ZVBhcnNlcihkZWYsIHJlZnMpO1xuICAgIH1cbn1cbmNvbnN0IGludGVnZXJEYXRlUGFyc2VyID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgICAgIGZvcm1hdDogXCJ1bml4LXRpbWVcIixcbiAgICB9O1xuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gXCJvcGVuQXBpM1wiKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5pbXVtXCIsIGNoZWNrLnZhbHVlLCAvLyBUaGlzIGlzIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1heFwiOlxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heGltdW1cIiwgY2hlY2sudmFsdWUsIC8vIFRoaXMgaXMgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/date.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/default.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/default.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDefaultDef: () => (/* binding */ parseDefaultDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nfunction parseDefaultDef(_def, refs) {\n    return {\n        ...(0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(_def.innerType._def, refs),\n        default: _def.defaultValue(),\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2RlZmF1bHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEM7QUFDbkM7QUFDUDtBQUNBLFdBQVcsc0RBQVE7QUFDbkI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9kZWZhdWx0LmpzP2M3NzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlZmF1bHREZWYoX2RlZiwgcmVmcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnBhcnNlRGVmKF9kZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpLFxuICAgICAgICBkZWZhdWx0OiBfZGVmLmRlZmF1bHRWYWx1ZSgpLFxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/default.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseEffectsDef: () => (/* binding */ parseEffectsDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nfunction parseEffectsDef(_def, refs) {\n    return refs.effectStrategy === \"input\"\n        ? (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(_def.schema._def, refs)\n        : {};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2VmZmVjdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEM7QUFDbkM7QUFDUDtBQUNBLFVBQVUsc0RBQVE7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvZWZmZWN0cy5qcz8xOGQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFZmZlY3RzRGVmKF9kZWYsIHJlZnMpIHtcbiAgICByZXR1cm4gcmVmcy5lZmZlY3RTdHJhdGVneSA9PT0gXCJpbnB1dFwiXG4gICAgICAgID8gcGFyc2VEZWYoX2RlZi5zY2hlbWEuX2RlZiwgcmVmcylcbiAgICAgICAgOiB7fTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseEnumDef: () => (/* binding */ parseEnumDef)\n/* harmony export */ });\nfunction parseEnumDef(def) {\n    return {\n        type: \"string\",\n        enum: def.values,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2VudW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvZW51bS5qcz8yYjA4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZUVudW1EZWYoZGVmKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZW51bTogZGVmLnZhbHVlcyxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseIntersectionDef: () => (/* binding */ parseIntersectionDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nconst isJsonSchema7AllOfType = (type) => {\n    if (\"type\" in type && type.type === \"string\")\n        return false;\n    return \"allOf\" in type;\n};\nfunction parseIntersectionDef(def, refs) {\n    const allOf = [\n        (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.left._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n        }),\n        (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.right._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"allOf\", \"1\"],\n        }),\n    ].filter((x) => !!x);\n    let unevaluatedProperties = refs.target === \"jsonSchema2019-09\"\n        ? { unevaluatedProperties: false }\n        : undefined;\n    const mergedAllOf = [];\n    // If either of the schemas is an allOf, merge them into a single allOf\n    allOf.forEach((schema) => {\n        if (isJsonSchema7AllOfType(schema)) {\n            mergedAllOf.push(...schema.allOf);\n            if (schema.unevaluatedProperties === undefined) {\n                // If one of the schemas has no unevaluatedProperties set,\n                // the merged schema should also have no unevaluatedProperties set\n                unevaluatedProperties = undefined;\n            }\n        }\n        else {\n            let nestedSchema = schema;\n            if (\"additionalProperties\" in schema &&\n                schema.additionalProperties === false) {\n                const { additionalProperties, ...rest } = schema;\n                nestedSchema = rest;\n            }\n            else {\n                // As soon as one of the schemas has additionalProperties set not to false, we allow unevaluatedProperties\n                unevaluatedProperties = undefined;\n            }\n            mergedAllOf.push(nestedSchema);\n        }\n    });\n    return mergedAllOf.length\n        ? {\n            allOf: mergedAllOf,\n            ...unevaluatedProperties,\n        }\n        : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2ludGVyc2VjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFFBQVEsc0RBQVE7QUFDaEI7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRLHNEQUFRO0FBQ2hCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvaW50ZXJzZWN0aW9uLmpzPzMzMDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmNvbnN0IGlzSnNvblNjaGVtYTdBbGxPZlR5cGUgPSAodHlwZSkgPT4ge1xuICAgIGlmIChcInR5cGVcIiBpbiB0eXBlICYmIHR5cGUudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBcImFsbE9mXCIgaW4gdHlwZTtcbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbnRlcnNlY3Rpb25EZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgYWxsT2YgPSBbXG4gICAgICAgIHBhcnNlRGVmKGRlZi5sZWZ0Ll9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWxsT2ZcIiwgXCIwXCJdLFxuICAgICAgICB9KSxcbiAgICAgICAgcGFyc2VEZWYoZGVmLnJpZ2h0Ll9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWxsT2ZcIiwgXCIxXCJdLFxuICAgICAgICB9KSxcbiAgICBdLmZpbHRlcigoeCkgPT4gISF4KTtcbiAgICBsZXQgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzID0gcmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTIwMTktMDlcIlxuICAgICAgICA/IHsgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzOiBmYWxzZSB9XG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1lcmdlZEFsbE9mID0gW107XG4gICAgLy8gSWYgZWl0aGVyIG9mIHRoZSBzY2hlbWFzIGlzIGFuIGFsbE9mLCBtZXJnZSB0aGVtIGludG8gYSBzaW5nbGUgYWxsT2ZcbiAgICBhbGxPZi5mb3JFYWNoKChzY2hlbWEpID0+IHtcbiAgICAgICAgaWYgKGlzSnNvblNjaGVtYTdBbGxPZlR5cGUoc2NoZW1hKSkge1xuICAgICAgICAgICAgbWVyZ2VkQWxsT2YucHVzaCguLi5zY2hlbWEuYWxsT2YpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYS51bmV2YWx1YXRlZFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIElmIG9uZSBvZiB0aGUgc2NoZW1hcyBoYXMgbm8gdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzIHNldCxcbiAgICAgICAgICAgICAgICAvLyB0aGUgbWVyZ2VkIHNjaGVtYSBzaG91bGQgYWxzbyBoYXZlIG5vIHVuZXZhbHVhdGVkUHJvcGVydGllcyBzZXRcbiAgICAgICAgICAgICAgICB1bmV2YWx1YXRlZFByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbmVzdGVkU2NoZW1hID0gc2NoZW1hO1xuICAgICAgICAgICAgaWYgKFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIiBpbiBzY2hlbWEgJiZcbiAgICAgICAgICAgICAgICBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhZGRpdGlvbmFsUHJvcGVydGllcywgLi4ucmVzdCB9ID0gc2NoZW1hO1xuICAgICAgICAgICAgICAgIG5lc3RlZFNjaGVtYSA9IHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBcyBzb29uIGFzIG9uZSBvZiB0aGUgc2NoZW1hcyBoYXMgYWRkaXRpb25hbFByb3BlcnRpZXMgc2V0IG5vdCB0byBmYWxzZSwgd2UgYWxsb3cgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVyZ2VkQWxsT2YucHVzaChuZXN0ZWRTY2hlbWEpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZEFsbE9mLmxlbmd0aFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGFsbE9mOiBtZXJnZWRBbGxPZixcbiAgICAgICAgICAgIC4uLnVuZXZhbHVhdGVkUHJvcGVydGllcyxcbiAgICAgICAgfVxuICAgICAgICA6IHVuZGVmaW5lZDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseLiteralDef: () => (/* binding */ parseLiteralDef)\n/* harmony export */ });\nfunction parseLiteralDef(def, refs) {\n    const parsedType = typeof def.value;\n    if (parsedType !== \"bigint\" &&\n        parsedType !== \"number\" &&\n        parsedType !== \"boolean\" &&\n        parsedType !== \"string\") {\n        return {\n            type: Array.isArray(def.value) ? \"array\" : \"object\",\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        return {\n            type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n            enum: [def.value],\n        };\n    }\n    return {\n        type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n        const: def.value,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL2xpdGVyYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvbGl0ZXJhbC5qcz8yMmQ4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZUxpdGVyYWxEZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHR5cGVvZiBkZWYudmFsdWU7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFwiYmlnaW50XCIgJiZcbiAgICAgICAgcGFyc2VkVHlwZSAhPT0gXCJudW1iZXJcIiAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSBcImJvb2xlYW5cIiAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheS5pc0FycmF5KGRlZi52YWx1ZSkgPyBcImFycmF5XCIgOiBcIm9iamVjdFwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAocmVmcy50YXJnZXQgPT09IFwib3BlbkFwaTNcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogcGFyc2VkVHlwZSA9PT0gXCJiaWdpbnRcIiA/IFwiaW50ZWdlclwiIDogcGFyc2VkVHlwZSxcbiAgICAgICAgICAgIGVudW06IFtkZWYudmFsdWVdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwYXJzZWRUeXBlID09PSBcImJpZ2ludFwiID8gXCJpbnRlZ2VyXCIgOiBwYXJzZWRUeXBlLFxuICAgICAgICBjb25zdDogZGVmLnZhbHVlLFxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/map.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/map.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseMapDef: () => (/* binding */ parseMapDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n/* harmony import */ var _record_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./record.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/record.js\");\n\n\nfunction parseMapDef(def, refs) {\n    if (refs.mapStrategy === \"record\") {\n        return (0,_record_js__WEBPACK_IMPORTED_MODULE_1__.parseRecordDef)(def, refs);\n    }\n    const keys = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.keyType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"],\n    }) || {};\n    const values = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"],\n    }) || {};\n    return {\n        type: \"array\",\n        maxItems: 125,\n        items: {\n            type: \"array\",\n            items: [keys, values],\n            minItems: 2,\n            maxItems: 2,\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL21hcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7QUFDRztBQUN0QztBQUNQO0FBQ0EsZUFBZSwwREFBYztBQUM3QjtBQUNBLGlCQUFpQixzREFBUTtBQUN6QjtBQUNBO0FBQ0EsS0FBSztBQUNMLG1CQUFtQixzREFBUTtBQUMzQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvbWFwLmpzP2FmMDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmltcG9ydCB7IHBhcnNlUmVjb3JkRGVmIH0gZnJvbSBcIi4vcmVjb3JkLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNYXBEZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMubWFwU3RyYXRlZ3kgPT09IFwicmVjb3JkXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlUmVjb3JkRGVmKGRlZiwgcmVmcyk7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBwYXJzZURlZihkZWYua2V5VHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBcIml0ZW1zXCIsIFwiMFwiXSxcbiAgICB9KSB8fCB7fTtcbiAgICBjb25zdCB2YWx1ZXMgPSBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcIml0ZW1zXCIsIFwiaXRlbXNcIiwgXCIxXCJdLFxuICAgIH0pIHx8IHt9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgbWF4SXRlbXM6IDEyNSxcbiAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIGl0ZW1zOiBba2V5cywgdmFsdWVzXSxcbiAgICAgICAgICAgIG1pbkl0ZW1zOiAyLFxuICAgICAgICAgICAgbWF4SXRlbXM6IDIsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNativeEnumDef: () => (/* binding */ parseNativeEnumDef)\n/* harmony export */ });\nfunction parseNativeEnumDef(def) {\n    const object = def.values;\n    const actualKeys = Object.keys(def.values).filter((key) => {\n        return typeof object[object[key]] !== \"number\";\n    });\n    const actualValues = actualKeys.map((key) => object[key]);\n    const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));\n    return {\n        type: parsedTypes.length === 1\n            ? parsedTypes[0] === \"string\"\n                ? \"string\"\n                : \"number\"\n            : [\"string\", \"number\"],\n        enum: actualValues,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL25hdGl2ZUVudW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL25hdGl2ZUVudW0uanM/M2IzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VOYXRpdmVFbnVtRGVmKGRlZikge1xuICAgIGNvbnN0IG9iamVjdCA9IGRlZi52YWx1ZXM7XG4gICAgY29uc3QgYWN0dWFsS2V5cyA9IE9iamVjdC5rZXlzKGRlZi52YWx1ZXMpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0W29iamVjdFtrZXldXSAhPT0gXCJudW1iZXJcIjtcbiAgICB9KTtcbiAgICBjb25zdCBhY3R1YWxWYWx1ZXMgPSBhY3R1YWxLZXlzLm1hcCgoa2V5KSA9PiBvYmplY3Rba2V5XSk7XG4gICAgY29uc3QgcGFyc2VkVHlwZXMgPSBBcnJheS5mcm9tKG5ldyBTZXQoYWN0dWFsVmFsdWVzLm1hcCgodmFsdWVzKSA9PiB0eXBlb2YgdmFsdWVzKSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBhcnNlZFR5cGVzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgPyBwYXJzZWRUeXBlc1swXSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgID8gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgIDogXCJudW1iZXJcIlxuICAgICAgICAgICAgOiBbXCJzdHJpbmdcIiwgXCJudW1iZXJcIl0sXG4gICAgICAgIGVudW06IGFjdHVhbFZhbHVlcyxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/never.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/never.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNeverDef: () => (/* binding */ parseNeverDef)\n/* harmony export */ });\nfunction parseNeverDef() {\n    return {\n        not: {},\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL25ldmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0EsZUFBZTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL25ldmVyLmpzPzk4MWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmV2ZXJEZWYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm90OiB7fSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/never.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/null.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/null.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNullDef: () => (/* binding */ parseNullDef)\n/* harmony export */ });\nfunction parseNullDef(refs) {\n    return refs.target === \"openApi3\"\n        ? {\n            enum: [\"null\"],\n            nullable: true,\n        }\n        : {\n            type: \"null\",\n        };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL251bGwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9udWxsLmpzPzM5MDkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnVsbERlZihyZWZzKSB7XG4gICAgcmV0dXJuIHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCJcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBlbnVtOiBbXCJudWxsXCJdLFxuICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICB0eXBlOiBcIm51bGxcIixcbiAgICAgICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/null.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNullableDef: () => (/* binding */ parseNullableDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n/* harmony import */ var _union_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./union.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/union.js\");\n\n\nfunction parseNullableDef(def, refs) {\n    if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(def.innerType._def.typeName) &&\n        (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n        if (refs.target === \"openApi3\") {\n            return {\n                type: _union_js__WEBPACK_IMPORTED_MODULE_1__.primitiveMappings[def.innerType._def.typeName],\n                nullable: true,\n            };\n        }\n        return {\n            type: [\n                _union_js__WEBPACK_IMPORTED_MODULE_1__.primitiveMappings[def.innerType._def.typeName],\n                \"null\",\n            ],\n        };\n    }\n    if (refs.target === \"openApi3\") {\n        const base = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.innerType._def, {\n            ...refs,\n            currentPath: [...refs.currentPath],\n        });\n        if (base && '$ref' in base)\n            return { allOf: [base], nullable: true };\n        return base && { ...base, nullable: true };\n    }\n    const base = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.innerType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", \"0\"],\n    });\n    return base && { anyOf: [base, { type: \"null\" }] };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL251bGxhYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNLO0FBQ3hDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0RBQWlCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQWlCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0RBQVE7QUFDN0I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUIsc0RBQVE7QUFDekI7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQkFBcUIsZ0JBQWdCLGNBQWM7QUFDbkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL251bGxhYmxlLmpzPzQ2NmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmltcG9ydCB7IHByaW1pdGl2ZU1hcHBpbmdzIH0gZnJvbSBcIi4vdW5pb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bGxhYmxlRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChbXCJab2RTdHJpbmdcIiwgXCJab2ROdW1iZXJcIiwgXCJab2RCaWdJbnRcIiwgXCJab2RCb29sZWFuXCIsIFwiWm9kTnVsbFwiXS5pbmNsdWRlcyhkZWYuaW5uZXJUeXBlLl9kZWYudHlwZU5hbWUpICYmXG4gICAgICAgICghZGVmLmlubmVyVHlwZS5fZGVmLmNoZWNrcyB8fCAhZGVmLmlubmVyVHlwZS5fZGVmLmNoZWNrcy5sZW5ndGgpKSB7XG4gICAgICAgIGlmIChyZWZzLnRhcmdldCA9PT0gXCJvcGVuQXBpM1wiKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHByaW1pdGl2ZU1hcHBpbmdzW2RlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZV0sXG4gICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBbXG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlTWFwcGluZ3NbZGVmLmlubmVyVHlwZS5fZGVmLnR5cGVOYW1lXSxcbiAgICAgICAgICAgICAgICBcIm51bGxcIixcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gXCJvcGVuQXBpM1wiKSB7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGhdLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGJhc2UgJiYgJyRyZWYnIGluIGJhc2UpXG4gICAgICAgICAgICByZXR1cm4geyBhbGxPZjogW2Jhc2VdLCBudWxsYWJsZTogdHJ1ZSB9O1xuICAgICAgICByZXR1cm4gYmFzZSAmJiB7IC4uLmJhc2UsIG51bGxhYmxlOiB0cnVlIH07XG4gICAgfVxuICAgIGNvbnN0IGJhc2UgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFueU9mXCIsIFwiMFwiXSxcbiAgICB9KTtcbiAgICByZXR1cm4gYmFzZSAmJiB7IGFueU9mOiBbYmFzZSwgeyB0eXBlOiBcIm51bGxcIiB9XSB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/number.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/number.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNumberDef: () => (/* binding */ parseNumberDef)\n/* harmony export */ });\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n\nfunction parseNumberDef(def, refs) {\n    const res = {\n        type: \"number\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"int\":\n                res.type = \"integer\";\n                (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.addErrorMessage)(res, \"type\", check.message, refs);\n                break;\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL251bWJlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRjtBQUMzRTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrRUFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0RUFBeUI7QUFDakQ7QUFDQTtBQUNBLHdCQUF3Qiw0RUFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRFQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDRFQUF5QjtBQUNqRDtBQUNBO0FBQ0Esd0JBQXdCLDRFQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNEVBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0RUFBeUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvbnVtYmVyLmpzP2U0NGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkRXJyb3JNZXNzYWdlLCBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzLCB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOdW1iZXJEZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgcmVzID0ge1xuICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIH07XG4gICAgaWYgKCFkZWYuY2hlY2tzKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJpbnRcIjpcbiAgICAgICAgICAgICAgICByZXMudHlwZSA9IFwiaW50ZWdlclwiO1xuICAgICAgICAgICAgICAgIGFkZEVycm9yTWVzc2FnZShyZXMsIFwidHlwZVwiLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtaW5pbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcImV4Y2x1c2l2ZU1pbmltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1pbmltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09IFwianNvblNjaGVtYTdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgXCJtYXhpbXVtXCIsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcImV4Y2x1c2l2ZU1heGltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1heGltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCBcIm1heGltdW1cIiwgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZU9mXCI6XG4gICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIFwibXVsdGlwbGVPZlwiLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/object.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/object.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseObjectDef: () => (/* binding */ parseObjectDef),\n/* harmony export */   parseObjectDefX: () => (/* binding */ parseObjectDefX)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nfunction decideAdditionalProperties(def, refs) {\n    if (refs.removeAdditionalStrategy === \"strict\") {\n        return def.catchall._def.typeName === \"ZodNever\"\n            ? def.unknownKeys !== \"strict\"\n            : (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.catchall._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"additionalProperties\"],\n            }) ?? true;\n    }\n    else {\n        return def.catchall._def.typeName === \"ZodNever\"\n            ? def.unknownKeys === \"passthrough\"\n            : (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.catchall._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"additionalProperties\"],\n            }) ?? true;\n    }\n}\n;\nfunction parseObjectDefX(def, refs) {\n    Object.keys(def.shape()).reduce((schema, key) => {\n        let prop = def.shape()[key];\n        const isOptional = prop.isOptional();\n        if (!isOptional) {\n            prop = { ...prop._def.innerSchema };\n        }\n        const propSchema = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(prop._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"properties\", key],\n            propertyPath: [...refs.currentPath, \"properties\", key],\n        });\n        if (propSchema !== undefined) {\n            schema.properties[key] = propSchema;\n            if (!isOptional) {\n                if (!schema.required) {\n                    schema.required = [];\n                }\n                schema.required.push(key);\n            }\n        }\n        return schema;\n    }, {\n        type: \"object\",\n        properties: {},\n        additionalProperties: decideAdditionalProperties(def, refs),\n    });\n    const result = {\n        type: \"object\",\n        ...Object.entries(def.shape()).reduce((acc, [propName, propDef]) => {\n            if (propDef === undefined || propDef._def === undefined)\n                return acc;\n            const parsedDef = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(propDef._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"properties\", propName],\n                propertyPath: [...refs.currentPath, \"properties\", propName],\n            });\n            if (parsedDef === undefined)\n                return acc;\n            return {\n                properties: { ...acc.properties, [propName]: parsedDef },\n                required: propDef.isOptional()\n                    ? acc.required\n                    : [...acc.required, propName],\n            };\n        }, { properties: {}, required: [] }),\n        additionalProperties: decideAdditionalProperties(def, refs),\n    };\n    if (!result.required.length)\n        delete result.required;\n    return result;\n}\nfunction parseObjectDef(def, refs) {\n    const result = {\n        type: \"object\",\n        ...Object.entries(def.shape()).reduce((acc, [propName, propDef]) => {\n            if (propDef === undefined || propDef._def === undefined)\n                return acc;\n            const parsedDef = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(propDef._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"properties\", propName],\n                propertyPath: [...refs.currentPath, \"properties\", propName],\n            });\n            if (parsedDef === undefined)\n                return acc;\n            return {\n                properties: { ...acc.properties, [propName]: parsedDef },\n                required: propDef.isOptional()\n                    ? acc.required\n                    : [...acc.required, propName],\n            };\n        }, { properties: {}, required: [] }),\n        additionalProperties: decideAdditionalProperties(def, refs),\n    };\n    if (!result.required.length)\n        delete result.required;\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL29iamVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNEQUFRO0FBQ3RCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNEQUFRO0FBQ3RCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDJCQUEyQixzREFBUTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixzREFBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBDQUEwQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsSUFBSSxjQUFjLGdCQUFnQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsc0RBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwQ0FBMEM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUksY0FBYyxnQkFBZ0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9vYmplY3QuanM/YzIxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5qc1wiO1xuZnVuY3Rpb24gZGVjaWRlQWRkaXRpb25hbFByb3BlcnRpZXMoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMucmVtb3ZlQWRkaXRpb25hbFN0cmF0ZWd5ID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgIHJldHVybiBkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSA9PT0gXCJab2ROZXZlclwiXG4gICAgICAgICAgICA/IGRlZi51bmtub3duS2V5cyAhPT0gXCJzdHJpY3RcIlxuICAgICAgICAgICAgOiBwYXJzZURlZihkZWYuY2F0Y2hhbGwuX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdLFxuICAgICAgICAgICAgfSkgPz8gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWYuY2F0Y2hhbGwuX2RlZi50eXBlTmFtZSA9PT0gXCJab2ROZXZlclwiXG4gICAgICAgICAgICA/IGRlZi51bmtub3duS2V5cyA9PT0gXCJwYXNzdGhyb3VnaFwiXG4gICAgICAgICAgICA6IHBhcnNlRGVmKGRlZi5jYXRjaGFsbC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0sXG4gICAgICAgICAgICB9KSA/PyB0cnVlO1xuICAgIH1cbn1cbjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9iamVjdERlZlgoZGVmLCByZWZzKSB7XG4gICAgT2JqZWN0LmtleXMoZGVmLnNoYXBlKCkpLnJlZHVjZSgoc2NoZW1hLCBrZXkpID0+IHtcbiAgICAgICAgbGV0IHByb3AgPSBkZWYuc2hhcGUoKVtrZXldO1xuICAgICAgICBjb25zdCBpc09wdGlvbmFsID0gcHJvcC5pc09wdGlvbmFsKCk7XG4gICAgICAgIGlmICghaXNPcHRpb25hbCkge1xuICAgICAgICAgICAgcHJvcCA9IHsgLi4ucHJvcC5fZGVmLmlubmVyU2NoZW1hIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvcFNjaGVtYSA9IHBhcnNlRGVmKHByb3AuX2RlZiwge1xuICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJwcm9wZXJ0aWVzXCIsIGtleV0sXG4gICAgICAgICAgICBwcm9wZXJ0eVBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcInByb3BlcnRpZXNcIiwga2V5XSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcm9wU2NoZW1hICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gPSBwcm9wU2NoZW1hO1xuICAgICAgICAgICAgaWYgKCFpc09wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NoZW1hLnJlcXVpcmVkID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNjaGVtYS5yZXF1aXJlZC5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZGVjaWRlQWRkaXRpb25hbFByb3BlcnRpZXMoZGVmLCByZWZzKSxcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGRlZi5zaGFwZSgpKS5yZWR1Y2UoKGFjYywgW3Byb3BOYW1lLCBwcm9wRGVmXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb3BEZWYgPT09IHVuZGVmaW5lZCB8fCBwcm9wRGVmLl9kZWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRGVmID0gcGFyc2VEZWYocHJvcERlZi5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwicHJvcGVydGllc1wiLCBwcm9wTmFtZV0sXG4gICAgICAgICAgICAgICAgcHJvcGVydHlQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJwcm9wZXJ0aWVzXCIsIHByb3BOYW1lXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHBhcnNlZERlZiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgLi4uYWNjLnByb3BlcnRpZXMsIFtwcm9wTmFtZV06IHBhcnNlZERlZiB9LFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBwcm9wRGVmLmlzT3B0aW9uYWwoKVxuICAgICAgICAgICAgICAgICAgICA/IGFjYy5yZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICA6IFsuLi5hY2MucmVxdWlyZWQsIHByb3BOYW1lXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIHsgcHJvcGVydGllczoge30sIHJlcXVpcmVkOiBbXSB9KSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGRlY2lkZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKGRlZiwgcmVmcyksXG4gICAgfTtcbiAgICBpZiAoIXJlc3VsdC5yZXF1aXJlZC5sZW5ndGgpXG4gICAgICAgIGRlbGV0ZSByZXN1bHQucmVxdWlyZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9iamVjdERlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGRlZi5zaGFwZSgpKS5yZWR1Y2UoKGFjYywgW3Byb3BOYW1lLCBwcm9wRGVmXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb3BEZWYgPT09IHVuZGVmaW5lZCB8fCBwcm9wRGVmLl9kZWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRGVmID0gcGFyc2VEZWYocHJvcERlZi5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwicHJvcGVydGllc1wiLCBwcm9wTmFtZV0sXG4gICAgICAgICAgICAgICAgcHJvcGVydHlQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJwcm9wZXJ0aWVzXCIsIHByb3BOYW1lXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHBhcnNlZERlZiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgLi4uYWNjLnByb3BlcnRpZXMsIFtwcm9wTmFtZV06IHBhcnNlZERlZiB9LFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBwcm9wRGVmLmlzT3B0aW9uYWwoKVxuICAgICAgICAgICAgICAgICAgICA/IGFjYy5yZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICA6IFsuLi5hY2MucmVxdWlyZWQsIHByb3BOYW1lXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIHsgcHJvcGVydGllczoge30sIHJlcXVpcmVkOiBbXSB9KSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGRlY2lkZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKGRlZiwgcmVmcyksXG4gICAgfTtcbiAgICBpZiAoIXJlc3VsdC5yZXF1aXJlZC5sZW5ndGgpXG4gICAgICAgIGRlbGV0ZSByZXN1bHQucmVxdWlyZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseOptionalDef: () => (/* binding */ parseOptionalDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nconst parseOptionalDef = (def, refs) => {\n    if (refs.currentPath.toString() === refs.propertyPath?.toString()) {\n        return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.innerType._def, refs);\n    }\n    const innerSchema = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.innerType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", \"1\"],\n    });\n    return innerSchema\n        ? {\n            anyOf: [\n                {\n                    not: {},\n                },\n                innerSchema,\n            ],\n        }\n        : {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL29wdGlvbmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQ25DO0FBQ1A7QUFDQSxlQUFlLHNEQUFRO0FBQ3ZCO0FBQ0Esd0JBQXdCLHNEQUFRO0FBQ2hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL29wdGlvbmFsLmpzPzI2MDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmV4cG9ydCBjb25zdCBwYXJzZU9wdGlvbmFsRGVmID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGlmIChyZWZzLmN1cnJlbnRQYXRoLnRvU3RyaW5nKCkgPT09IHJlZnMucHJvcGVydHlQYXRoPy50b1N0cmluZygpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHJlZnMpO1xuICAgIH1cbiAgICBjb25zdCBpbm5lclNjaGVtYSA9IHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYW55T2ZcIiwgXCIxXCJdLFxuICAgIH0pO1xuICAgIHJldHVybiBpbm5lclNjaGVtYVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGFueU9mOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub3Q6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5uZXJTY2hlbWEsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICAgIDoge307XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePipelineDef: () => (/* binding */ parsePipelineDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nconst parsePipelineDef = (def, refs) => {\n    if (refs.pipeStrategy === \"input\") {\n        return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.in._def, refs);\n    }\n    else if (refs.pipeStrategy === \"output\") {\n        return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.out._def, refs);\n    }\n    const a = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.in._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"allOf\", \"0\"],\n    });\n    const b = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.out._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"],\n    });\n    return {\n        allOf: [a, b].filter((x) => x !== undefined),\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3BpcGVsaW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQ25DO0FBQ1A7QUFDQSxlQUFlLHNEQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxlQUFlLHNEQUFRO0FBQ3ZCO0FBQ0EsY0FBYyxzREFBUTtBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMLGNBQWMsc0RBQVE7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvcGlwZWxpbmUuanM/ZWYzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlUGlwZWxpbmVEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgaWYgKHJlZnMucGlwZVN0cmF0ZWd5ID09PSBcImlucHV0XCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbi5fZGVmLCByZWZzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVmcy5waXBlU3RyYXRlZ3kgPT09IFwib3V0cHV0XCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5vdXQuX2RlZiwgcmVmcyk7XG4gICAgfVxuICAgIGNvbnN0IGEgPSBwYXJzZURlZihkZWYuaW4uX2RlZiwge1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWxsT2ZcIiwgXCIwXCJdLFxuICAgIH0pO1xuICAgIGNvbnN0IGIgPSBwYXJzZURlZihkZWYub3V0Ll9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcImFsbE9mXCIsIGEgPyBcIjFcIiA6IFwiMFwiXSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxPZjogW2EsIGJdLmZpbHRlcigoeCkgPT4geCAhPT0gdW5kZWZpbmVkKSxcbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePromiseDef: () => (/* binding */ parsePromiseDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nfunction parsePromiseDef(def, refs) {\n    return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.type._def, refs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3Byb21pc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEM7QUFDbkM7QUFDUCxXQUFXLHNEQUFRO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9wcm9taXNlLmpzPzZkODEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVByb21pc2VEZWYoZGVmLCByZWZzKSB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi50eXBlLl9kZWYsIHJlZnMpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseReadonlyDef: () => (/* binding */ parseReadonlyDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nconst parseReadonlyDef = (def, refs) => {\n    return (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.innerType._def, refs);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3JlYWRvbmx5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQ25DO0FBQ1AsV0FBVyxzREFBUTtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvcmVhZG9ubHkuanM/NGZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlUmVhZG9ubHlEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/record.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/record.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseRecordDef: () => (/* binding */ parseRecordDef)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/string.js\");\n\n\n\nfunction parseRecordDef(def, refs) {\n    if (refs.target === \"openApi3\" &&\n        def.keyType?._def.typeName === zod__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEnum) {\n        return {\n            type: \"object\",\n            required: def.keyType._def.values,\n            properties: def.keyType._def.values.reduce((acc, key) => ({\n                ...acc,\n                [key]: (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.valueType._def, {\n                    ...refs,\n                    currentPath: [...refs.currentPath, \"properties\", key],\n                }) ?? {},\n            }), {}),\n            additionalProperties: false,\n        };\n    }\n    const schema = {\n        type: \"object\",\n        additionalProperties: (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.valueType._def, {\n            ...refs,\n            currentPath: [...refs.currentPath, \"additionalProperties\"],\n        }) ?? {},\n    };\n    if (refs.target === \"openApi3\") {\n        return schema;\n    }\n    if (def.keyType?._def.typeName === zod__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodString &&\n        def.keyType._def.checks?.length) {\n        const keyType = Object.entries((0,_string_js__WEBPACK_IMPORTED_MODULE_1__.parseStringDef)(def.keyType._def, refs)).reduce((acc, [key, value]) => (key === \"type\" ? acc : { ...acc, [key]: value }), {});\n        return {\n            ...schema,\n            propertyNames: keyType,\n        };\n    }\n    else if (def.keyType?._def.typeName === zod__WEBPACK_IMPORTED_MODULE_2__.ZodFirstPartyTypeKind.ZodEnum) {\n        return {\n            ...schema,\n            propertyNames: {\n                enum: def.keyType._def.values,\n            },\n        };\n    }\n    return schema;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3JlY29yZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZDO0FBQ0g7QUFDRztBQUN0QztBQUNQO0FBQ0EsdUNBQXVDLHNEQUFxQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFRO0FBQy9CO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixzREFBUTtBQUN0QztBQUNBO0FBQ0EsU0FBUyxPQUFPO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHNEQUFxQjtBQUM1RDtBQUNBLHVDQUF1QywwREFBYyxrRkFBa0Ysc0JBQXNCLEtBQUs7QUFDbEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxzREFBcUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3JlY29yZC5qcz8zNTMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFpvZEZpcnN0UGFydHlUeXBlS2luZCwgfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5qc1wiO1xuaW1wb3J0IHsgcGFyc2VTdHJpbmdEZWYgfSBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09IFwib3BlbkFwaTNcIiAmJlxuICAgICAgICBkZWYua2V5VHlwZT8uX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICByZXF1aXJlZDogZGVmLmtleVR5cGUuX2RlZi52YWx1ZXMsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBkZWYua2V5VHlwZS5fZGVmLnZhbHVlcy5yZWR1Y2UoKGFjYywga2V5KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICBba2V5XTogcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJwcm9wZXJ0aWVzXCIsIGtleV0sXG4gICAgICAgICAgICAgICAgfSkgPz8ge30sXG4gICAgICAgICAgICB9KSwge30pLFxuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0sXG4gICAgICAgIH0pID8/IHt9LFxuICAgIH07XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG4gICAgaWYgKGRlZi5rZXlUeXBlPy5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kU3RyaW5nICYmXG4gICAgICAgIGRlZi5rZXlUeXBlLl9kZWYuY2hlY2tzPy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qga2V5VHlwZSA9IE9iamVjdC5lbnRyaWVzKHBhcnNlU3RyaW5nRGVmKGRlZi5rZXlUeXBlLl9kZWYsIHJlZnMpKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoa2V5ID09PSBcInR5cGVcIiA/IGFjYyA6IHsgLi4uYWNjLCBba2V5XTogdmFsdWUgfSksIHt9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZXM6IGtleVR5cGUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGRlZi5rZXlUeXBlPy5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRW51bSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc2NoZW1hLFxuICAgICAgICAgICAgcHJvcGVydHlOYW1lczoge1xuICAgICAgICAgICAgICAgIGVudW06IGRlZi5rZXlUeXBlLl9kZWYudmFsdWVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/record.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/set.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/set.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseSetDef: () => (/* binding */ parseSetDef)\n/* harmony export */ });\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\n\nfunction parseSetDef(def, refs) {\n    const items = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_1__.parseDef)(def.valueType._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\"],\n    });\n    const schema = {\n        type: \"array\",\n        uniqueItems: true,\n        items,\n    };\n    if (def.minSize) {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(schema, \"minItems\", def.minSize.value, def.minSize.message, refs);\n    }\n    if (def.maxSize) {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(schema, \"maxItems\", def.maxSize.value, def.maxSize.message, refs);\n    }\n    return schema;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3NldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0U7QUFDdEI7QUFDbkM7QUFDUCxrQkFBa0Isc0RBQVE7QUFDMUI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDRFQUF5QjtBQUNqQztBQUNBO0FBQ0EsUUFBUSw0RUFBeUI7QUFDakM7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy9zZXQuanM/ZjVjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMuanNcIjtcbmltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTZXREZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgaXRlbXMgPSBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCBcIml0ZW1zXCJdLFxuICAgIH0pO1xuICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICB1bmlxdWVJdGVtczogdHJ1ZSxcbiAgICAgICAgaXRlbXMsXG4gICAgfTtcbiAgICBpZiAoZGVmLm1pblNpemUpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhzY2hlbWEsIFwibWluSXRlbXNcIiwgZGVmLm1pblNpemUudmFsdWUsIGRlZi5taW5TaXplLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICBpZiAoZGVmLm1heFNpemUpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhzY2hlbWEsIFwibWF4SXRlbXNcIiwgZGVmLm1heFNpemUudmFsdWUsIGRlZi5tYXhTaXplLm1lc3NhZ2UsIHJlZnMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/string.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/string.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseStringDef: () => (/* binding */ parseStringDef),\n/* harmony export */   zodPatterns: () => (/* binding */ zodPatterns)\n/* harmony export */ });\n/* harmony import */ var _errorMessages_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errorMessages.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/errorMessages.js\");\n\n/**\n * Generated from the .source property of regular expressins found here:\n * https://github.com/colinhacks/zod/blob/master/src/types.ts.\n *\n * Escapes have been doubled, and expressions with /i flag have been changed accordingly\n */\nconst zodPatterns = {\n    /**\n     * `c` was changed to `[cC]` to replicate /i flag\n     */\n    cuid: \"^[cC][^\\\\s-]{8,}$\",\n    cuid2: \"^[a-z][a-z0-9]*$\",\n    ulid: \"^[0-9A-HJKMNP-TV-Z]{26}$\",\n    /**\n     * `a-z` was added to replicate /i flag\n     */\n    email: \"^(?!\\\\.)(?!.*\\\\.\\\\.)([a-zA-Z0-9_+-\\\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\\\-]*\\\\.)+[a-zA-Z]{2,}$\",\n    emoji: \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\",\n    /**\n     * Unused\n     */\n    uuid: \"^[0-9a-fA-F]{8}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{12}$\",\n    /**\n     * Unused\n     */\n    ipv4: \"^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$\",\n    /**\n     * Unused\n     */\n    ipv6: \"^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$\",\n};\nfunction parseStringDef(def, refs) {\n    const res = {\n        type: \"string\",\n    };\n    function processPattern(value) {\n        return refs.patternStrategy === \"escape\"\n            ? escapeNonAlphaNumeric(value)\n            : value;\n    }\n    if (def.checks) {\n        for (const check of def.checks) {\n            switch (check.kind) {\n                case \"min\":\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minLength\", typeof res.minLength === \"number\"\n                        ? Math.max(res.minLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"max\":\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maxLength\", typeof res.maxLength === \"number\"\n                        ? Math.min(res.maxLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"email\":\n                    switch (refs.emailStrategy) {\n                        case \"format:email\":\n                            addFormat(res, \"email\", check.message, refs);\n                            break;\n                        case \"format:idn-email\":\n                            addFormat(res, \"idn-email\", check.message, refs);\n                            break;\n                        case \"pattern:zod\":\n                            addPattern(res, zodPatterns.email, check.message, refs);\n                            break;\n                    }\n                    break;\n                case \"url\":\n                    addFormat(res, \"uri\", check.message, refs);\n                    break;\n                case \"uuid\":\n                    addFormat(res, \"uuid\", check.message, refs);\n                    break;\n                case \"regex\":\n                    addPattern(res, check.regex.source, check.message, refs);\n                    break;\n                case \"cuid\":\n                    addPattern(res, zodPatterns.cuid, check.message, refs);\n                    break;\n                case \"cuid2\":\n                    addPattern(res, zodPatterns.cuid2, check.message, refs);\n                    break;\n                case \"startsWith\":\n                    addPattern(res, \"^\" + processPattern(check.value), check.message, refs);\n                    break;\n                case \"endsWith\":\n                    addPattern(res, processPattern(check.value) + \"$\", check.message, refs);\n                    break;\n                case \"datetime\":\n                    addFormat(res, \"date-time\", check.message, refs);\n                    break;\n                case \"length\":\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"minLength\", typeof res.minLength === \"number\"\n                        ? Math.max(res.minLength, check.value)\n                        : check.value, check.message, refs);\n                    (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(res, \"maxLength\", typeof res.maxLength === \"number\"\n                        ? Math.min(res.maxLength, check.value)\n                        : check.value, check.message, refs);\n                    break;\n                case \"includes\": {\n                    addPattern(res, processPattern(check.value), check.message, refs);\n                    break;\n                }\n                case \"ip\": {\n                    if (check.version !== \"v6\") {\n                        addFormat(res, \"ipv4\", check.message, refs);\n                    }\n                    if (check.version !== \"v4\") {\n                        addFormat(res, \"ipv6\", check.message, refs);\n                    }\n                    break;\n                }\n                case \"emoji\":\n                    addPattern(res, zodPatterns.emoji, check.message, refs);\n                    break;\n                case \"ulid\": {\n                    addPattern(res, zodPatterns.ulid, check.message, refs);\n                    break;\n                }\n                case \"toLowerCase\":\n                case \"toUpperCase\":\n                case \"trim\":\n                    // I have no idea why these are checks in Zod 🤷\n                    break;\n                default:\n                    ((_) => { })(check);\n            }\n        }\n    }\n    return res;\n}\nconst escapeNonAlphaNumeric = (value) => Array.from(value)\n    .map((c) => (/[a-zA-Z0-9]/.test(c) ? c : `\\\\${c}`))\n    .join(\"\");\nconst addFormat = (schema, value, message, refs) => {\n    if (schema.format || schema.anyOf?.some((x) => x.format)) {\n        if (!schema.anyOf) {\n            schema.anyOf = [];\n        }\n        if (schema.format) {\n            schema.anyOf.push({\n                format: schema.format,\n                ...(schema.errorMessage &&\n                    refs.errorMessages && {\n                    errorMessage: { format: schema.errorMessage.format },\n                }),\n            });\n            delete schema.format;\n            if (schema.errorMessage) {\n                delete schema.errorMessage.format;\n                if (Object.keys(schema.errorMessage).length === 0) {\n                    delete schema.errorMessage;\n                }\n            }\n        }\n        schema.anyOf.push({\n            format: value,\n            ...(message &&\n                refs.errorMessages && { errorMessage: { format: message } }),\n        });\n    }\n    else {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(schema, \"format\", value, message, refs);\n    }\n};\nconst addPattern = (schema, value, message, refs) => {\n    if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {\n        if (!schema.allOf) {\n            schema.allOf = [];\n        }\n        if (schema.pattern) {\n            schema.allOf.push({\n                pattern: schema.pattern,\n                ...(schema.errorMessage &&\n                    refs.errorMessages && {\n                    errorMessage: { pattern: schema.errorMessage.pattern },\n                }),\n            });\n            delete schema.pattern;\n            if (schema.errorMessage) {\n                delete schema.errorMessage.pattern;\n                if (Object.keys(schema.errorMessage).length === 0) {\n                    delete schema.errorMessage;\n                }\n            }\n        }\n        schema.allOf.push({\n            pattern: value,\n            ...(message &&\n                refs.errorMessages && { errorMessage: { pattern: message } }),\n        });\n    }\n    else {\n        (0,_errorMessages_js__WEBPACK_IMPORTED_MODULE_0__.setResponseValueAndErrors)(schema, \"pattern\", value, message, refs);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseTupleDef: () => (/* binding */ parseTupleDef)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nfunction parseTupleDef(def, refs) {\n    if (def.rest) {\n        return {\n            type: \"array\",\n            minItems: def.items.length,\n            items: def.items\n                .map((x, i) => (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(x._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"items\", `${i}`],\n            }))\n                .reduce((acc, x) => (x === undefined ? acc : [...acc, x]), []),\n            additionalItems: (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(def.rest._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"additionalItems\"],\n            }),\n        };\n    }\n    else {\n        return {\n            type: \"array\",\n            minItems: def.items.length,\n            maxItems: def.items.length,\n            items: def.items\n                .map((x, i) => (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(x._def, {\n                ...refs,\n                currentPath: [...refs.currentPath, \"items\", `${i}`],\n            }))\n                .reduce((acc, x) => (x === undefined ? acc : [...acc, x]), []),\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3R1cGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQ25DO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixzREFBUTtBQUN2QztBQUNBLCtEQUErRCxFQUFFO0FBQ2pFLGFBQWE7QUFDYjtBQUNBLDZCQUE2QixzREFBUTtBQUNyQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isc0RBQVE7QUFDdkM7QUFDQSwrREFBK0QsRUFBRTtBQUNqRSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3R1cGxlLmpzPzQ5OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChkZWYucmVzdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgbWluSXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBpdGVtczogZGVmLml0ZW1zXG4gICAgICAgICAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiaXRlbXNcIiwgYCR7aX1gXSxcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4gKHggPT09IHVuZGVmaW5lZCA/IGFjYyA6IFsuLi5hY2MsIHhdKSwgW10pLFxuICAgICAgICAgICAgYWRkaXRpb25hbEl0ZW1zOiBwYXJzZURlZihkZWYucmVzdC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsIFwiYWRkaXRpb25hbEl0ZW1zXCJdLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgbWluSXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBtYXhJdGVtczogZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgIGl0ZW1zOiBkZWYuaXRlbXNcbiAgICAgICAgICAgICAgICAubWFwKCh4LCBpKSA9PiBwYXJzZURlZih4Ll9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJpdGVtc1wiLCBgJHtpfWBdLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCB4KSA9PiAoeCA9PT0gdW5kZWZpbmVkID8gYWNjIDogWy4uLmFjYywgeF0pLCBbXSksXG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseUndefinedDef: () => (/* binding */ parseUndefinedDef)\n/* harmony export */ });\nfunction parseUndefinedDef() {\n    return {\n        not: {},\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3VuZGVmaW5lZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBLGVBQWU7QUFDZjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2FpL25vZGVfbW9kdWxlcy96b2QtdG8tanNvbi1zY2hlbWEvZGlzdC9lc20vcGFyc2Vycy91bmRlZmluZWQuanM/NmE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VVbmRlZmluZWREZWYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm90OiB7fSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/union.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/union.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseUnionDef: () => (/* binding */ parseUnionDef),\n/* harmony export */   primitiveMappings: () => (/* binding */ primitiveMappings)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n\nconst primitiveMappings = {\n    ZodString: \"string\",\n    ZodNumber: \"number\",\n    ZodBigInt: \"integer\",\n    ZodBoolean: \"boolean\",\n    ZodNull: \"null\",\n};\nfunction parseUnionDef(def, refs) {\n    if (refs.target === \"openApi3\")\n        return asAnyOf(def, refs);\n    const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n    // This blocks tries to look ahead a bit to produce nicer looking schemas with type array instead of anyOf.\n    if (options.every((x) => x._def.typeName in primitiveMappings &&\n        (!x._def.checks || !x._def.checks.length))) {\n        // all types in union are primitive and lack checks, so might as well squash into {type: [...]}\n        const types = options.reduce((types, x) => {\n            const type = primitiveMappings[x._def.typeName]; //Can be safely casted due to row 43\n            return type && !types.includes(type) ? [...types, type] : types;\n        }, []);\n        return {\n            type: types.length > 1 ? types : types[0],\n        };\n    }\n    else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n        // all options literals\n        const types = options.reduce((acc, x) => {\n            const type = typeof x._def.value;\n            switch (type) {\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                    return [...acc, type];\n                case \"bigint\":\n                    return [...acc, \"integer\"];\n                case \"object\":\n                    if (x._def.value === null)\n                        return [...acc, \"null\"];\n                case \"symbol\":\n                case \"undefined\":\n                case \"function\":\n                default:\n                    return acc;\n            }\n        }, []);\n        if (types.length === options.length) {\n            // all the literals are primitive, as far as null can be considered primitive\n            const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);\n            return {\n                type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n                enum: options.reduce((acc, x) => {\n                    return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n                }, []),\n            };\n        }\n    }\n    else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n        return {\n            type: \"string\",\n            enum: options.reduce((acc, x) => [\n                ...acc,\n                ...x._def.values.filter((x) => !acc.includes(x)),\n            ], []),\n        };\n    }\n    return asAnyOf(def, refs);\n}\nconst asAnyOf = (def, refs) => {\n    const anyOf = (def.options instanceof Map\n        ? Array.from(def.options.values())\n        : def.options)\n        .map((x, i) => (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"anyOf\", `${i}`],\n    }))\n        .filter((x) => !!x &&\n        (!refs.strictUnions ||\n            (typeof x === \"object\" && Object.keys(x).length > 0)));\n    return anyOf.length ? { anyOf } : undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3VuaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNuQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGO0FBQzNGO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQVE7QUFDL0I7QUFDQSx1REFBdUQsRUFBRTtBQUN6RCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3VuaW9uLmpzPzZmNTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYuanNcIjtcbmV4cG9ydCBjb25zdCBwcmltaXRpdmVNYXBwaW5ncyA9IHtcbiAgICBab2RTdHJpbmc6IFwic3RyaW5nXCIsXG4gICAgWm9kTnVtYmVyOiBcIm51bWJlclwiLFxuICAgIFpvZEJpZ0ludDogXCJpbnRlZ2VyXCIsXG4gICAgWm9kQm9vbGVhbjogXCJib29sZWFuXCIsXG4gICAgWm9kTnVsbDogXCJudWxsXCIsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pb25EZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSBcIm9wZW5BcGkzXCIpXG4gICAgICAgIHJldHVybiBhc0FueU9mKGRlZiwgcmVmcyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSkgOiBkZWYub3B0aW9ucztcbiAgICAvLyBUaGlzIGJsb2NrcyB0cmllcyB0byBsb29rIGFoZWFkIGEgYml0IHRvIHByb2R1Y2UgbmljZXIgbG9va2luZyBzY2hlbWFzIHdpdGggdHlwZSBhcnJheSBpbnN0ZWFkIG9mIGFueU9mLlxuICAgIGlmIChvcHRpb25zLmV2ZXJ5KCh4KSA9PiB4Ll9kZWYudHlwZU5hbWUgaW4gcHJpbWl0aXZlTWFwcGluZ3MgJiZcbiAgICAgICAgKCF4Ll9kZWYuY2hlY2tzIHx8ICF4Ll9kZWYuY2hlY2tzLmxlbmd0aCkpKSB7XG4gICAgICAgIC8vIGFsbCB0eXBlcyBpbiB1bmlvbiBhcmUgcHJpbWl0aXZlIGFuZCBsYWNrIGNoZWNrcywgc28gbWlnaHQgYXMgd2VsbCBzcXVhc2ggaW50byB7dHlwZTogWy4uLl19XG4gICAgICAgIGNvbnN0IHR5cGVzID0gb3B0aW9ucy5yZWR1Y2UoKHR5cGVzLCB4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gcHJpbWl0aXZlTWFwcGluZ3NbeC5fZGVmLnR5cGVOYW1lXTsgLy9DYW4gYmUgc2FmZWx5IGNhc3RlZCBkdWUgdG8gcm93IDQzXG4gICAgICAgICAgICByZXR1cm4gdHlwZSAmJiAhdHlwZXMuaW5jbHVkZXModHlwZSkgPyBbLi4udHlwZXMsIHR5cGVdIDogdHlwZXM7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVzLmxlbmd0aCA+IDEgPyB0eXBlcyA6IHR5cGVzWzBdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zLmV2ZXJ5KCh4KSA9PiB4Ll9kZWYudHlwZU5hbWUgPT09IFwiWm9kTGl0ZXJhbFwiICYmICF4LmRlc2NyaXB0aW9uKSkge1xuICAgICAgICAvLyBhbGwgb3B0aW9ucyBsaXRlcmFsc1xuICAgICAgICBjb25zdCB0eXBlcyA9IG9wdGlvbnMucmVkdWNlKChhY2MsIHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgeC5fZGVmLnZhbHVlO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgdHlwZV07XG4gICAgICAgICAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgXCJpbnRlZ2VyXCJdO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHguX2RlZi52YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCBcIm51bGxcIl07XG4gICAgICAgICAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGlmICh0eXBlcy5sZW5ndGggPT09IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBhbGwgdGhlIGxpdGVyYWxzIGFyZSBwcmltaXRpdmUsIGFzIGZhciBhcyBudWxsIGNhbiBiZSBjb25zaWRlcmVkIHByaW1pdGl2ZVxuICAgICAgICAgICAgY29uc3QgdW5pcXVlVHlwZXMgPSB0eXBlcy5maWx0ZXIoKHgsIGksIGEpID0+IGEuaW5kZXhPZih4KSA9PT0gaSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHVuaXF1ZVR5cGVzLmxlbmd0aCA+IDEgPyB1bmlxdWVUeXBlcyA6IHVuaXF1ZVR5cGVzWzBdLFxuICAgICAgICAgICAgICAgIGVudW06IG9wdGlvbnMucmVkdWNlKChhY2MsIHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYy5pbmNsdWRlcyh4Ll9kZWYudmFsdWUpID8gYWNjIDogWy4uLmFjYywgeC5fZGVmLnZhbHVlXTtcbiAgICAgICAgICAgICAgICB9LCBbXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMuZXZlcnkoKHgpID0+IHguX2RlZi50eXBlTmFtZSA9PT0gXCJab2RFbnVtXCIpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgZW51bTogb3B0aW9ucy5yZWR1Y2UoKGFjYywgeCkgPT4gW1xuICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAuLi54Ll9kZWYudmFsdWVzLmZpbHRlcigoeCkgPT4gIWFjYy5pbmNsdWRlcyh4KSksXG4gICAgICAgICAgICBdLCBbXSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhc0FueU9mKGRlZiwgcmVmcyk7XG59XG5jb25zdCBhc0FueU9mID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IGFueU9mID0gKGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwXG4gICAgICAgID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSlcbiAgICAgICAgOiBkZWYub3B0aW9ucylcbiAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgXCJhbnlPZlwiLCBgJHtpfWBdLFxuICAgIH0pKVxuICAgICAgICAuZmlsdGVyKCh4KSA9PiAhIXggJiZcbiAgICAgICAgKCFyZWZzLnN0cmljdFVuaW9ucyB8fFxuICAgICAgICAgICAgKHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIE9iamVjdC5rZXlzKHgpLmxlbmd0aCA+IDApKSk7XG4gICAgcmV0dXJuIGFueU9mLmxlbmd0aCA/IHsgYW55T2YgfSA6IHVuZGVmaW5lZDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/union.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseUnknownDef: () => (/* binding */ parseUnknownDef)\n/* harmony export */ });\nfunction parseUnknownDef() {\n    return {};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS9wYXJzZXJzL3Vua25vd24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9haS9ub2RlX21vZHVsZXMvem9kLXRvLWpzb24tc2NoZW1hL2Rpc3QvZXNtL3BhcnNlcnMvdW5rbm93bi5qcz84OTE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZVVua25vd25EZWYoKSB7XG4gICAgcmV0dXJuIHt9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   zodToJsonSchema: () => (/* binding */ zodToJsonSchema)\n/* harmony export */ });\n/* harmony import */ var _parseDef_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parseDef.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/parseDef.js\");\n/* harmony import */ var _Refs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Refs.js */ \"(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/Refs.js\");\n\n\nconst zodToJsonSchema = (schema, options) => {\n    const refs = (0,_Refs_js__WEBPACK_IMPORTED_MODULE_1__.getRefs)(options);\n    const definitions = typeof options === \"object\" && options.definitions\n        ? Object.entries(options.definitions).reduce((acc, [name, schema]) => ({\n            ...acc,\n            [name]: (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(schema._def, {\n                ...refs,\n                currentPath: [...refs.basePath, refs.definitionPath, name],\n            }, true) ?? {},\n        }), {})\n        : undefined;\n    const name = typeof options === \"string\" ? options : options?.name;\n    const main = (0,_parseDef_js__WEBPACK_IMPORTED_MODULE_0__.parseDef)(schema._def, name === undefined\n        ? refs\n        : {\n            ...refs,\n            currentPath: [...refs.basePath, refs.definitionPath, name],\n        }, false) ?? {};\n    const combined = name === undefined\n        ? definitions\n            ? {\n                ...main,\n                [refs.definitionPath]: definitions,\n            }\n            : main\n        : {\n            $ref: [\n                ...(refs.$refStrategy === \"relative\" ? [] : refs.basePath),\n                refs.definitionPath,\n                name,\n            ].join(\"/\"),\n            [refs.definitionPath]: {\n                ...definitions,\n                [name]: main,\n            },\n        };\n    if (refs.target === \"jsonSchema7\") {\n        combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n    }\n    else if (refs.target === \"jsonSchema2019-09\") {\n        combined.$schema = \"https://json-schema.org/draft/2019-09/schema#\";\n    }\n    return combined;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS96b2RUb0pzb25TY2hlbWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlDO0FBQ0w7QUFDcEM7QUFDQSxpQkFBaUIsaURBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNEQUFRO0FBQzVCO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsU0FBUyxLQUFLO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQixzREFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYWkvbm9kZV9tb2R1bGVzL3pvZC10by1qc29uLXNjaGVtYS9kaXN0L2VzbS96b2RUb0pzb25TY2hlbWEuanM/MjkxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuL3BhcnNlRGVmLmpzXCI7XG5pbXBvcnQgeyBnZXRSZWZzIH0gZnJvbSBcIi4vUmVmcy5qc1wiO1xuY29uc3Qgem9kVG9Kc29uU2NoZW1hID0gKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHJlZnMgPSBnZXRSZWZzKG9wdGlvbnMpO1xuICAgIGNvbnN0IGRlZmluaXRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5kZWZpbml0aW9uc1xuICAgICAgICA/IE9iamVjdC5lbnRyaWVzKG9wdGlvbnMuZGVmaW5pdGlvbnMpLnJlZHVjZSgoYWNjLCBbbmFtZSwgc2NoZW1hXSkgPT4gKHtcbiAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgIFtuYW1lXTogcGFyc2VEZWYoc2NoZW1hLl9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5iYXNlUGF0aCwgcmVmcy5kZWZpbml0aW9uUGF0aCwgbmFtZV0sXG4gICAgICAgICAgICB9LCB0cnVlKSA/PyB7fSxcbiAgICAgICAgfSksIHt9KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBuYW1lID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgPyBvcHRpb25zIDogb3B0aW9ucz8ubmFtZTtcbiAgICBjb25zdCBtYWluID0gcGFyc2VEZWYoc2NoZW1hLl9kZWYsIG5hbWUgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHJlZnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmJhc2VQYXRoLCByZWZzLmRlZmluaXRpb25QYXRoLCBuYW1lXSxcbiAgICAgICAgfSwgZmFsc2UpID8/IHt9O1xuICAgIGNvbnN0IGNvbWJpbmVkID0gbmFtZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gZGVmaW5pdGlvbnNcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIC4uLm1haW4sXG4gICAgICAgICAgICAgICAgW3JlZnMuZGVmaW5pdGlvblBhdGhdOiBkZWZpbml0aW9ucyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbWFpblxuICAgICAgICA6IHtcbiAgICAgICAgICAgICRyZWY6IFtcbiAgICAgICAgICAgICAgICAuLi4ocmVmcy4kcmVmU3RyYXRlZ3kgPT09IFwicmVsYXRpdmVcIiA/IFtdIDogcmVmcy5iYXNlUGF0aCksXG4gICAgICAgICAgICAgICAgcmVmcy5kZWZpbml0aW9uUGF0aCxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgXS5qb2luKFwiL1wiKSxcbiAgICAgICAgICAgIFtyZWZzLmRlZmluaXRpb25QYXRoXToge1xuICAgICAgICAgICAgICAgIC4uLmRlZmluaXRpb25zLFxuICAgICAgICAgICAgICAgIFtuYW1lXTogbWFpbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSBcImpzb25TY2hlbWE3XCIpIHtcbiAgICAgICAgY29tYmluZWQuJHNjaGVtYSA9IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEjXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlZnMudGFyZ2V0ID09PSBcImpzb25TY2hlbWEyMDE5LTA5XCIpIHtcbiAgICAgICAgY29tYmluZWQuJHNjaGVtYSA9IFwiaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQvMjAxOS0wOS9zY2hlbWEjXCI7XG4gICAgfVxuICAgIHJldHVybiBjb21iaW5lZDtcbn07XG5leHBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ai/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js\n");

/***/ })

};
;